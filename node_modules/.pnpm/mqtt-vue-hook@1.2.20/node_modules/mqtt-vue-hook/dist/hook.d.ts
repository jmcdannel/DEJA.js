import mqtt from 'mqtt';
import { SubscribeOptions, PublishOptions } from './base-hook';
export interface MqttHook {
    isConnected: (clientID?: string) => boolean;
    connect: (url: string, _options: MqttOptions, clientID?: string) => Promise<void>;
    disconnect: (clientID?: string) => Promise<void>;
    reconnect: (url: string, options: mqtt.IClientOptions, clientID?: string) => Promise<void>;
    subscribe: (topicArray: string[], qos?: mqtt.QoS, opts?: SubscribeOptions, callback?: mqtt.ClientSubscribeCallback, clientID?: string) => Promise<void>;
    unSubscribe: (unTopic: string, opts?: Object, callback?: mqtt.PacketCallback, clientID?: string) => Promise<void>;
    publish: (topic: string, message: string, qos?: mqtt.QoS, opts?: PublishOptions, callback?: mqtt.PacketCallback, clientID?: string) => Promise<void>;
    showAllClient: () => Promise<string[]>;
    registerEvent: (topic: string, callback: (topic: string, message: string) => void, vm?: string, clientID?: string) => Promise<void>;
    unRegisterEvent: (topic: string, vm?: any, clientID?: string) => Promise<void>;
    clearEvent: (clientID?: string) => Promise<void>;
    test: () => Promise<boolean>;
}
export declare type MqttOptions = mqtt.IClientOptions;
export declare const connect: (url: string, _options: MqttOptions, clientID?: string | undefined) => Promise<void>;
export declare const mqttHook: () => MqttHook;
