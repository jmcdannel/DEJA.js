import mqtt from 'mqtt';
export interface MqttBaseHook {
    isConnected: (clientID: string) => boolean;
    connect: (clientID: string, url: string, _options: MqttOptions) => Promise<void>;
    disconnect: (clientID: string) => Promise<void>;
    reconnect: (clientID: string, url: string, options: mqtt.IClientOptions) => Promise<void>;
    subscribe: (clientID: string, topicArray: string[], qos?: mqtt.QoS, opts?: SubscribeOptions, callback?: mqtt.ClientSubscribeCallback) => Promise<void>;
    unSubscribe: (clientID: string, unTopic: string, opts?: Object, callback?: mqtt.PacketCallback) => Promise<void>;
    publish: (clientID: string, topic: string, message: string, qos?: mqtt.QoS, opts?: PublishOptions, callback?: mqtt.PacketCallback) => Promise<void>;
    showAllClient: () => Promise<string[]>;
}
export interface SubscribeOptions {
    qos: mqtt.QoS;
    nl: any;
    rap: any;
    rh: any;
    properties: object;
}
export interface PublishOptions {
    qos: mqtt.QoS;
    retain: any;
    dup: any;
    properties: object;
}
export interface PublishArgs {
    topic: string;
    message: string;
    qos: mqtt.QoS;
    opts: PublishOptions;
    callback?: mqtt.PacketCallback;
}
export interface SubscribeArgs {
    topicArray: string[];
    qos: mqtt.QoS;
    opts: SubscribeOptions;
    callback?: mqtt.ClientSubscribeCallback;
}
export declare type MqttOptions = mqtt.IClientOptions;
export declare const connect: (clientID: string, url: string, _options: MqttOptions) => Promise<void>;
export declare const useMqttBaseHook: () => MqttBaseHook;
