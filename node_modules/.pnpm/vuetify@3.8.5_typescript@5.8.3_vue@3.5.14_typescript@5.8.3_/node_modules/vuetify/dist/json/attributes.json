{
  "VAlert/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VAlert/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VAlert/border": {
    "type": "boolean | 'top' | 'end' | 'bottom' | 'start'\n",
    "description": "Adds a colored border to the component."
  },
  "VAlert/border-color": {
    "type": "string\n",
    "description": "Specifies the color of the border. Only used in combination with **border** prop. Accepts any color value."
  },
  "VAlert/closable": {
    "type": "boolean\n",
    "description": "Adds a close icon that can hide the alert."
  },
  "VAlert/close-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Change the default icon used for **closable** alerts."
  },
  "VAlert/type": {
    "type": "'success' | 'info' | 'warning' | 'error'\n",
    "description": "Create a specialized alert that uses a contextual color and has a pre-defined icon."
  },
  "VAlert/close-label": {
    "type": "string\n",
    "description": "Text used for *aria-label* on **closable** alerts. Can also be customized globally in [Internationalization](/customization/internationalization)."
  },
  "VAlert/icon": {
    "type": "  | false\n  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VAlert/model-value": {
    "type": "boolean\n",
    "description": "Controls whether the component is visible or hidden."
  },
  "VAlert/prominent": {
    "type": "boolean\n",
    "description": "Displays a larger vertically centered icon to draw more attention."
  },
  "VAlert/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VAlert/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VAlert/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VAlert/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VAlert/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VAlert/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VAlert/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VAlert/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VAlert/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VAlert/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VAlert/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VAlert/tile": {
    "type": "boolean\n",
    "description": "Removes the component's border-radius."
  },
  "VAlert/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VAlert/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VAlert/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VAlert/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VAlertTitle/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VApp/full-height": {
    "type": "boolean\n",
    "description": "Sets the component height to 100%."
  },
  "VApp/overlaps": {
    "type": "string[]\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VApp/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VAppBar/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VAppBar/flat": {
    "type": "boolean\n",
    "description": "Removes the component's **box-shadow**."
  },
  "VAppBar/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VAppBar/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VAppBar/density": {
    "type": "'default' | 'prominent' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VAppBar/height": {
    "type": "string | number\n",
    "description": "Designates a specific height for the toolbar. Overrides the heights imposed by other props, e.g. **prominent**, **dense**, **extended**, etc."
  },
  "VAppBar/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VAppBar/location": {
    "type": "'top' | 'bottom'\n",
    "description": "Aligns the component towards the top or bottom."
  },
  "VAppBar/absolute": {
    "type": "boolean\n",
    "description": "Applies position: absolute to the component."
  },
  "VAppBar/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VAppBar/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VAppBar/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VAppBar/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VAppBar/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VAppBar/name": {
    "type": "string\n",
    "description": "Assign a specific name for layout registration."
  },
  "VAppBar/image": {
    "type": "string\n",
    "description": "Specifies a [v-img](/components/images) as the component's background."
  },
  "VAppBar/collapse": {
    "type": "boolean\n",
    "description": "Morphs the component into a collapsed state, reducing its maximum width."
  },
  "VAppBar/extended": {
    "type": "boolean\n",
    "description": "Use this prop to increase the height of the toolbar _without_ using the `extension` slot for adding content. May be used in conjunction with the **extension-height** prop, and any of the other props that affect the height of the toolbar, e.g. **prominent**, **dense**, etc., **WITH THE EXCEPTION** of **height**."
  },
  "VAppBar/extension-height": {
    "type": "string | number\n",
    "description": "Designate an explicit height for the `extension` slot."
  },
  "VAppBar/floating": {
    "type": "boolean\n",
    "description": "Applies **display: inline-flex** to the component."
  },
  "VAppBar/order": {
    "type": "string | number\n",
    "description": "Adjust the order of the component in relation to its registration order."
  },
  "VAppBar/scroll-target": {
    "type": "string\n",
    "description": "The element to target for scrolling events. Uses `window` by default."
  },
  "VAppBar/scroll-threshold": {
    "type": "string | number\n",
    "description": "The amount of scroll distance down before **scroll-behavior** activates."
  },
  "VAppBar/scroll-behavior": {
    "type": "  | (string & {})\n  | 'hide'\n  | 'fully-hide'\n  | 'inverted'\n  | 'collapse'\n  | 'elevate'\n  | 'fade-image'\n",
    "description": "Specify an action to take when the scroll position of **scroll-target** reaches **scroll-threshold**. Accepts any combination of hide, inverted, collapse, elevate, and fade-image. Multiple values can be used, separated by a space."
  },
  "VAppBarNavIcon/symbol": {
    "type": "any\n",
    "description": "The [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) used to hook into group functionality for components like [v-btn-toggle](/components/btn-toggle) and [v-bottom-navigation](/components/bottom-navigations/)."
  },
  "VAppBarNavIcon/flat": {
    "type": "boolean\n",
    "description": "Removes the button box shadow. This is different than using the 'flat' variant."
  },
  "VAppBarNavIcon/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VAppBarNavIcon/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VAppBarNavIcon/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VAppBarNavIcon/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VAppBarNavIcon/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VAppBarNavIcon/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VAppBarNavIcon/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VAppBarNavIcon/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VAppBarNavIcon/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VAppBarNavIcon/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VAppBarNavIcon/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VAppBarNavIcon/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
  },
  "VAppBarNavIcon/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VAppBarNavIcon/block": {
    "type": "boolean\n",
    "description": "Expands the button to 100% of available space."
  },
  "VAppBarNavIcon/readonly": {
    "type": "boolean\n",
    "description": "Puts the button in a readonly state. Cannot be clicked or navigated to by keyboard."
  },
  "VAppBarNavIcon/slim": {
    "type": "boolean\n",
    "description": "Reduces padding to 0 8px."
  },
  "VAppBarNavIcon/stacked": {
    "type": "boolean\n",
    "description": "Displays the button as a flex-column."
  },
  "VAppBarNavIcon/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VAppBarNavIcon/text": {
    "type": "string | number | boolean\n",
    "description": "Specify content text for the component."
  },
  "VAppBarNavIcon/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VAppBarNavIcon/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VAppBarNavIcon/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VAppBarNavIcon/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VAppBarNavIcon/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VAppBarNavIcon/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VAppBarNavIcon/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VAppBarNavIcon/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VAppBarNavIcon/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VAppBarNavIcon/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VAppBarNavIcon/position": {
    "type": "'fixed' | 'relative' | 'static' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VAppBarNavIcon/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VAppBarNavIcon/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VAppBarNavIcon/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VAppBarNavIcon/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VAppBarNavIcon/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VAppBarNavIcon/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VAppBarNavIcon/variant": {
    "type": "'flat' | 'text' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VAppBarNavIcon/icon": {
    "type": "  | boolean\n  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component. The button will become _round_."
  },
  "VAppBarTitle/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VAppBarTitle/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VAutocomplete/flat": {
    "type": "boolean\n",
    "description": "Removes box shadow when using a variant with elevation."
  },
  "VAutocomplete/search": {
    "type": "string\n",
    "description": "Text input used to filter items."
  },
  "VAutocomplete/type": {
    "type": "string\n",
    "description": "Sets input type."
  },
  "VAutocomplete/reverse": {
    "type": "boolean\n",
    "description": "Reverses the orientation."
  },
  "VAutocomplete/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VAutocomplete/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VAutocomplete/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VAutocomplete/menu": {
    "type": "boolean\n",
    "description": "Renders with the menu open by default."
  },
  "VAutocomplete/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VAutocomplete/multiple": {
    "type": "boolean\n",
    "description": "Changes select to multiple. Accepts array for value."
  },
  "VAutocomplete/placeholder": {
    "type": "string\n",
    "description": "Sets the input’s placeholder text."
  },
  "VAutocomplete/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VAutocomplete/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VAutocomplete/prefix": {
    "type": "string\n",
    "description": "Displays prefix text."
  },
  "VAutocomplete/role": {
    "type": "string\n",
    "description": "The role attribute applied to the input."
  },
  "VAutocomplete/autofocus": {
    "type": "boolean\n",
    "description": "Enables autofocus."
  },
  "VAutocomplete/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VAutocomplete/items": {
    "type": "any[]\n",
    "description": "Can be an array of objects or strings. By default objects should have **title** and **value** properties, and can optionally have a **props** property containing any [VListItem props](/api/v-list-item/#props). Keys to use for these can be changed with the **item-title**, **item-value**, and **item-props** props."
  },
  "VAutocomplete/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VAutocomplete/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VAutocomplete/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the outside the component's input, uses the same syntax as `v-icon`."
  },
  "VAutocomplete/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VAutocomplete/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VAutocomplete/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VAutocomplete/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VAutocomplete/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VAutocomplete/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VAutocomplete/rounded": {
    "type": "string | number | boolean\n",
    "description": "Adds a border radius to the input."
  },
  "VAutocomplete/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VAutocomplete/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VAutocomplete/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VAutocomplete/auto-select-first": {
    "type": "boolean | 'exact'\n",
    "description": "When searching, will always highlight the first option and select it on blur. `exact` will only highlight and select exact matches."
  },
  "VAutocomplete/clear-on-select": {
    "type": "boolean\n",
    "description": "Reset the search text when a selection is made while using the **multiple** prop."
  },
  "VAutocomplete/filter-mode": {
    "type": "'every' | 'some' | 'union' | 'intersection'\n",
    "description": "Controls how the results of `customFilter` and `customKeyFilter` are combined. All modes only apply `customFilter` to columns not specified in `customKeyFilter`.\n\n- **some**: There is at least one match from either the custom filter or the custom key filter.\n- **every**: All columns match either the custom filter or the custom key filter.\n- **union**: There is at least one match from the custom filter, or all columns match the custom key filters.\n- **intersection**: There is at least one match from the custom filter, and all columns match the custom key filters."
  },
  "VAutocomplete/no-filter": {
    "type": "boolean\n",
    "description": "Do not apply filtering when searching. Useful when data is being filtered server side."
  },
  "VAutocomplete/custom-filter": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/filter.tsx#L22-L22\" target=\"_blank\">FilterFunction</a>\n",
    "description": "Function used to filter items, called for each filterable key on each item in the list. The first argument is the filterable value from the item, the second is the search term, and the third is the internal item object. The function should return true if the item should be included in the filtered list, or the index of the match in the value if it should be included with the result highlighted."
  },
  "VAutocomplete/custom-key-filter": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customFilter` is skipped for columns with `customKeyFilter` specified."
  },
  "VAutocomplete/filter-keys": {
    "type": "string | string[]\n",
    "description": "Array of specific keys to filter on the item."
  },
  "VAutocomplete/chips": {
    "type": "boolean\n",
    "description": "Changes display of selections to chips."
  },
  "VAutocomplete/closable-chips": {
    "type": "boolean\n",
    "description": "Enables the [closable](/api/v-chip/#props-closable) prop on all [v-chip](/components/chips/) components."
  },
  "VAutocomplete/close-text": {
    "type": "string\n",
    "description": "Text set to the inputs `aria-label` and `title` when input menu is closed."
  },
  "VAutocomplete/open-text": {
    "type": "string\n",
    "description": "Text set to the inputs **aria-label** and **title** when input menu is open."
  },
  "VAutocomplete/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VAutocomplete/hide-no-data": {
    "type": "boolean\n",
    "description": "Hides the menu when there are no options to show.  Useful for preventing the menu from opening before results are fetched asynchronously.  Also has the effect of opening the menu when the `items` array changes if not already open."
  },
  "VAutocomplete/hide-selected": {
    "type": "boolean\n",
    "description": "Do not display in the select menu items that are already selected."
  },
  "VAutocomplete/list-props": {
    "type": "unknown\n",
    "description": "Pass props through to the `v-list` component. Accepts an object with anything from [v-list](/api/v-list/#props) props, camelCase keys are recommended."
  },
  "VAutocomplete/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VAutocomplete/item-title": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its title."
  },
  "VAutocomplete/item-value": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VAutocomplete/item-children": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "This property currently has **no effect**."
  },
  "VAutocomplete/item-props": {
    "type": "SelectItemKey<any>\n",
    "description": "Props object that will be applied to each item component. `true` will treat the original object as raw props and pass it directly to the component."
  },
  "VAutocomplete/return-object": {
    "type": "boolean\n",
    "description": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**."
  },
  "VAutocomplete/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VAutocomplete/menu-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Sets the the spin icon."
  },
  "VAutocomplete/menu-props": {
    "type": "unknown\n",
    "description": "Pass props through to the `v-menu` component. Accepts an object with anything from [v-menu](/api/v-menu/#props) props, camelCase keys are recommended."
  },
  "VAutocomplete/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VAutocomplete/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VAutocomplete/no-data-text": {
    "type": "string\n",
    "description": "Text shown when no items are provided to the component."
  },
  "VAutocomplete/open-on-clear": {
    "type": "boolean\n",
    "description": "Open's the menu whenever the clear icon is clicked."
  },
  "VAutocomplete/item-color": {
    "type": "string\n",
    "description": "Sets color of selected items."
  },
  "VAutocomplete/counter": {
    "type": "string | number | boolean\n",
    "description": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation."
  },
  "VAutocomplete/persistent-placeholder": {
    "type": "boolean\n",
    "description": "Forces placeholder to always be visible."
  },
  "VAutocomplete/persistent-counter": {
    "type": "boolean\n",
    "description": "Forces counter to always be visible."
  },
  "VAutocomplete/suffix": {
    "type": "string\n",
    "description": "Displays suffix text."
  },
  "VAutocomplete/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VAutocomplete/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VAutocomplete/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VAutocomplete/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VAutocomplete/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VAutocomplete/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VAutocomplete/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VAutocomplete/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VAutocomplete/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VAutocomplete/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VAutocomplete/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VAutocomplete/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VAutocomplete/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VAutocomplete/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VAutocomplete/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VAutocomplete/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when the **clearable** prop is set to true."
  },
  "VAutocomplete/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VAutocomplete/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
  },
  "VAutocomplete/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VAutocomplete/counter-value": {
    "type": "number | ((value: any) => number)\n",
    "description": "Function returns the counter display text."
  },
  "VAutocomplete/model-modifiers": {
    "type": "unknown\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VAvatar/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VAvatar/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VAvatar/end": {
    "type": "boolean\n",
    "description": "Applies margin at the start of the component."
  },
  "VAvatar/start": {
    "type": "boolean\n",
    "description": "Applies margin at the end of the component."
  },
  "VAvatar/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VAvatar/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VAvatar/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VAvatar/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VAvatar/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VAvatar/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VAvatar/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VAvatar/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VAvatar/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VAvatar/image": {
    "type": "string\n",
    "description": "Apply a specific image using [v-img](/components/images/)."
  },
  "VBadge/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VBadge/model-value": {
    "type": "boolean\n",
    "description": "Controls whether the component is visible or hidden."
  },
  "VBadge/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VBadge/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VBadge/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VBadge/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VBadge/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VBadge/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBadge/max": {
    "type": "string | number\n",
    "description": "Sets the maximum number allowed when using the **content** prop with a `number` like value. If the content number exceeds the maximum value, a `+` suffix is added."
  },
  "VBadge/floating": {
    "type": "boolean\n",
    "description": "Move the badge further away from the slotted content. Equivalent to an 8px offset."
  },
  "VBadge/bordered": {
    "type": "boolean\n",
    "description": "Applies a **2px** by default and **1.5px** border around the badge when using the **dot** property."
  },
  "VBadge/content": {
    "type": "string | number\n",
    "description": "Text content to show in the badge."
  },
  "VBadge/dot": {
    "type": "boolean\n",
    "description": "Reduce the size of the badge and hide its contents."
  },
  "VBadge/inline": {
    "type": "boolean\n",
    "description": "Display as an inline block instead of absolute position. **location**, **floating**, and **offset** will have no effect."
  },
  "VBadge/label": {
    "type": "string\n",
    "description": "The **aria-label** used for the badge."
  },
  "VBadge/offset-x": {
    "type": "string | number\n",
    "description": "Offset the badge on the x-axis."
  },
  "VBadge/offset-y": {
    "type": "string | number\n",
    "description": "Offset the badge on the y-axis."
  },
  "VBadge/text-color": {
    "type": "string\n",
    "description": "Applies a specified color to the control text - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBadge/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VBanner/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VBanner/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VBanner/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VBanner/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VBanner/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VBanner/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VBanner/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VBanner/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VBanner/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VBanner/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VBanner/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VBanner/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VBanner/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VBanner/sticky": {
    "type": "boolean\n",
    "description": "Applies `position: sticky` to the component with `top: 0`. You can find more information on the [MDN documentation for sticky position](https://developer.mozilla.org/en-US/docs/Web/CSS/position)."
  },
  "VBanner/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VBanner/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VBanner/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VBanner/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VBanner/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBanner/avatar": {
    "type": "string\n",
    "description": "Designates a specific src image to pass to the thumbnail."
  },
  "VBanner/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBanner/stacked": {
    "type": "boolean\n",
    "description": "Forces the banner actions onto a new line. This is not applicable when the banner has `lines=\"one\"`."
  },
  "VBanner/mobile": {
    "type": "boolean\n",
    "description": "Applies the mobile banner styles."
  },
  "VBanner/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VBanner/lines": {
    "type": "'one' | 'two' | 'three'\n",
    "description": "The amount of visible lines of text before it truncates."
  },
  "VBannerActions/density": {
    "type": "string\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VBannerActions/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBannerText/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VBottomNavigation/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VBottomNavigation/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VBottomNavigation/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VBottomNavigation/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VBottomNavigation/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VBottomNavigation/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the component."
  },
  "VBottomNavigation/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VBottomNavigation/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VBottomNavigation/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VBottomNavigation/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VBottomNavigation/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBottomNavigation/name": {
    "type": "string\n",
    "description": "Assign a specific name for layout registration."
  },
  "VBottomNavigation/disabled": {
    "type": "boolean\n",
    "description": "Puts all children components into a disabled state."
  },
  "VBottomNavigation/max": {
    "type": "number\n",
    "description": "Sets a maximum number of selections that can be made."
  },
  "VBottomNavigation/multiple": {
    "type": "boolean\n",
    "description": "Allows one to select multiple items."
  },
  "VBottomNavigation/order": {
    "type": "string | number\n",
    "description": "Adjust the order of the component in relation to its registration order."
  },
  "VBottomNavigation/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBottomNavigation/mode": {
    "type": "string\n",
    "description": "Changes the orientation and active state styling of the component."
  },
  "VBottomNavigation/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VBottomNavigation/grow": {
    "type": "boolean\n",
    "description": "Force all [v-btn](/components/buttons) children to take up all available horizontal space."
  },
  "VBottomNavigation/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VBottomNavigation/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VBottomNavigation/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VBottomSheet/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VBottomSheet/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VBottomSheet/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VBottomSheet/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VBottomSheet/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VBottomSheet/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VBottomSheet/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VBottomSheet/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both.."
  },
  "VBottomSheet/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the content element."
  },
  "VBottomSheet/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VBottomSheet/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VBottomSheet/transition": {
    "type": "  | string\n  | boolean\n  | (TransitionProps & { component: Component })\n  | {\n      component: ComponentPublicInstanceConstructor<\n        CreateComponentPublicInstanceWithMixins<\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          unknown,\n          {},\n          {},\n          ComponentOptionsMixin,\n          ComponentOptionsMixin,\n          Record<string, any>,\n          PublicProps,\n          {},\n          true,\n          {},\n          SlotsType<Partial<MakeSlots<{ default: never }>>>,\n          GlobalComponents,\n          GlobalDirectives,\n          string,\n          {},\n          any,\n          ComponentProvideOptions,\n          OptionTypesType<{}, {}, {}, {}, {}, {}>,\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          {},\n          {},\n          {},\n          {}\n        >,\n        any,\n        any,\n        any,\n        ComputedOptions,\n        MethodOptions\n      > &\n        ComponentOptionsBase<\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          unknown,\n          {},\n          {},\n          ComponentOptionsMixin,\n          ComponentOptionsMixin,\n          Record<string, any>,\n          string,\n          {},\n          {},\n          string,\n          SlotsType<Partial<MakeSlots<{ default: never }>>>,\n          GlobalComponents,\n          GlobalDirectives,\n          string,\n          ComponentProvideOptions\n        > &\n        VNodeProps &\n        AllowedComponentProps &\n        ComponentCustomProps & {\n          filterProps: (props: T) => Partial<Pick<T, U>>\n        }\n    }\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VBottomSheet/activator": {
    "type": "Element | (string & {}) | 'parent' | ComponentPublicInstance\n",
    "description": "Explicitly sets the overlay's activator."
  },
  "VBottomSheet/inset": {
    "type": "boolean\n",
    "description": "Reduces the sheet content maximum width to 70%."
  },
  "VBottomSheet/fullscreen": {
    "type": "boolean\n",
    "description": "Changes layout for fullscreen display."
  },
  "VBottomSheet/retain-focus": {
    "type": "boolean\n",
    "description": "Tab focus will return to the first child of the dialog by default. Disable this when using external tools that require focus such as TinyMCE or vue-clipboard."
  },
  "VBottomSheet/scrollable": {
    "type": "boolean\n",
    "description": "When set to true, expects a `v-card` and a `v-card-text` component with a designated height. For more information, check out the [scrollable example](/components/dialogs#scrollable)."
  },
  "VBottomSheet/close-on-back": {
    "type": "boolean\n",
    "description": "Closes the overlay content when the browser's back button is pressed or `$router.back()` is called, cancelling the original navigation. `persistent` overlays will cancel navigation and animate as if they were clicked outside instead of closing."
  },
  "VBottomSheet/contained": {
    "type": "boolean\n",
    "description": "Limits the size of the component and scrim to its offset parent. Implies `absolute` and `attach`. (Note: The parent element must have position: relative.)."
  },
  "VBottomSheet/content-class": {
    "type": "any\n",
    "description": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component."
  },
  "VBottomSheet/content-props": {
    "type": "any\n",
    "description": "Apply custom properties to the content."
  },
  "VBottomSheet/opacity": {
    "type": "string | number\n",
    "description": "Sets the opacity of the scrim element. Only applies if `scrim` is enabled."
  },
  "VBottomSheet/no-click-animation": {
    "type": "boolean\n",
    "description": "Disables the bounce effect when clicking outside of the content element when using the persistent prop."
  },
  "VBottomSheet/persistent": {
    "type": "boolean\n",
    "description": "Clicking outside of the element or pressing esc key will not deactivate it."
  },
  "VBottomSheet/scrim": {
    "type": "string | boolean\n",
    "description": "Accepts true/false to enable background, and string to define color."
  },
  "VBottomSheet/z-index": {
    "type": "string | number\n",
    "description": "The z-index used for the component."
  },
  "VBottomSheet/target": {
    "type": "  | Element\n  | (string & {})\n  | 'parent'\n  | 'cursor'\n  | ComponentPublicInstance\n  | [number, number]\n",
    "description": "For locationStrategy=\"connected\", specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default."
  },
  "VBottomSheet/activator-props": {
    "type": "unknown\n",
    "description": "Apply custom properties to the activator."
  },
  "VBottomSheet/open-on-click": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is clicked."
  },
  "VBottomSheet/open-on-hover": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is hovered."
  },
  "VBottomSheet/open-on-focus": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is focused."
  },
  "VBottomSheet/close-on-content-click": {
    "type": "boolean\n",
    "description": "Closes component when you click on its content."
  },
  "VBottomSheet/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only applies to hover and focus events."
  },
  "VBottomSheet/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only applies to hover and focus events."
  },
  "VBottomSheet/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VBottomSheet/location-strategy": {
    "type": "'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n",
    "description": "A function used to specifies how the component should position relative to its activator."
  },
  "VBottomSheet/origin": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VBottomSheet/offset": {
    "type": "string | number | number[]\n",
    "description": "Increases distance from the target. When passed as a pair of numbers, the second value shifts anchor along the side and away from the target."
  },
  "VBottomSheet/scroll-strategy": {
    "type": "'close' | 'none' | 'block' | 'reposition' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/scrollStrategies.ts#L17-L17\" target=\"_blank\">ScrollStrategyFunction</a>\n",
    "description": "Strategy used when the component is activate and user scrolls."
  },
  "VBottomSheet/attach": {
    "type": "string | boolean | Element\n",
    "description": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or `true` to disable teleporting. Uses `body` by default."
  },
  "VBreadcrumbs/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VBreadcrumbs/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VBreadcrumbs/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VBreadcrumbs/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VBreadcrumbs/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VBreadcrumbs/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBreadcrumbs/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VBreadcrumbs/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBreadcrumbs/divider": {
    "type": "string\n",
    "description": "Specifies the dividing character between items."
  },
  "VBreadcrumbs/active-class": {
    "type": "string\n",
    "description": "The class applied to the component when it is in an active state."
  },
  "VBreadcrumbs/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VBreadcrumbs/items": {
    "type": "(\n  | string\n  | (Partial<LinkProps> & { title: string; disabled: boolean })\n)[]\n",
    "description": "An array of strings or objects used for automatically generating children components."
  },
  "VBreadcrumbsDivider/divider": {
    "type": "string | number\n",
    "description": "Specifies the dividing character between items."
  },
  "VBreadcrumbsItem/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VBreadcrumbsItem/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VBreadcrumbsItem/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VBreadcrumbsItem/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBreadcrumbsItem/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VBreadcrumbsItem/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VBreadcrumbsItem/active-class": {
    "type": "string\n",
    "description": "The class applied to the component when it matches the current route. Find more information about the [active-class prop](https://router.vuejs.org/api/#active-class) on the [vue-router](https://router.vuejs.org/) documentation."
  },
  "VBreadcrumbsItem/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VBreadcrumbsItem/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VBreadcrumbsItem/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VBreadcrumbsItem/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VBtn/symbol": {
    "type": "any\n",
    "description": "The [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) used to hook into group functionality for components like [v-btn-toggle](/components/btn-toggle) and [v-bottom-navigation](/components/bottom-navigations/)."
  },
  "VBtn/text": {
    "type": "string | number | boolean\n",
    "description": "Specify content text for the component."
  },
  "VBtn/flat": {
    "type": "boolean\n",
    "description": "Removes the button box shadow. This is different than using the 'flat' variant."
  },
  "VBtn/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VBtn/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VBtn/icon": {
    "type": "  | boolean\n  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component. The button will become _round_."
  },
  "VBtn/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VBtn/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VBtn/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VBtn/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VBtn/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VBtn/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VBtn/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VBtn/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VBtn/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VBtn/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VBtn/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VBtn/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VBtn/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VBtn/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VBtn/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBtn/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VBtn/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VBtn/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VBtn/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VBtn/stacked": {
    "type": "boolean\n",
    "description": "Displays the button as a flex-column."
  },
  "VBtn/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VBtn/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VBtn/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VBtn/block": {
    "type": "boolean\n",
    "description": "Expands the button to 100% of available space."
  },
  "VBtn/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VBtn/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VBtn/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VBtn/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VBtn/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
  },
  "VBtn/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VBtn/readonly": {
    "type": "boolean\n",
    "description": "Puts the button in a readonly state. Cannot be clicked or navigated to by keyboard."
  },
  "VBtn/slim": {
    "type": "boolean\n",
    "description": "Reduces padding to 0 8px."
  },
  "VBtn/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VBtn/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VBtnGroup/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VBtnGroup/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VBtnGroup/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VBtnGroup/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VBtnGroup/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VBtnGroup/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VBtnGroup/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VBtnGroup/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBtnGroup/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VBtnGroup/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VBtnGroup/divided": {
    "type": "boolean\n",
    "description": "Add dividers between children [v-btn](/components/buttons) components."
  },
  "VBtnToggle/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VBtnToggle/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VBtnToggle/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VBtnToggle/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VBtnToggle/rounded": {
    "type": "string | number | boolean\n",
    "description": "Round edge buttons."
  },
  "VBtnToggle/tile": {
    "type": "boolean\n",
    "description": "Removes the component's border-radius."
  },
  "VBtnToggle/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VBtnToggle/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VBtnToggle/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VBtnToggle/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VBtnToggle/disabled": {
    "type": "boolean\n",
    "description": "Puts all children components into a disabled state."
  },
  "VBtnToggle/max": {
    "type": "number\n",
    "description": "Sets a maximum number of selections that can be made."
  },
  "VBtnToggle/multiple": {
    "type": "boolean\n",
    "description": "Allows one to select multiple items."
  },
  "VBtnToggle/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VBtnToggle/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VBtnToggle/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VBtnToggle/divided": {
    "type": "boolean\n",
    "description": "Add dividers between children [v-btn](/components/buttons) components."
  },
  "VCalendar/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VCalendar/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VCalendar/model-value": {
    "type": "unknown[]\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VCalendar/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VCalendar/max": {
    "type": "unknown\n",
    "description": "Maximum date or value that can be selected."
  },
  "VCalendar/min": {
    "type": "unknown\n",
    "description": "Minimum date or value that can be selected."
  },
  "VCalendar/hide-header": {
    "type": "boolean\n",
    "description": "Determines whether the header is hidden in the calendar view."
  },
  "VCalendar/hide-week-number": {
    "type": "boolean\n",
    "description": "Toggles the display of week numbers in a calendar view."
  },
  "VCalendar/month": {
    "type": "string | number\n",
    "description": "Specifies the month for the calendar view."
  },
  "VCalendar/show-adjacent-months": {
    "type": "boolean\n",
    "description": "Shows or hides days from adjacent months."
  },
  "VCalendar/year": {
    "type": "string | number\n",
    "description": "Specifies the year for the calendar view."
  },
  "VCalendar/weekdays": {
    "type": "(0 | 1 | 2 | 4 | 5 | 6 | 3)[]\n",
    "description": "Specifies which days of the week to display."
  },
  "VCalendar/weeks-in-month": {
    "type": "'static' | 'dynamic'\n",
    "description": "A dynamic number of weeks in a month will grow and shrink depending on how many days are in the month. A static number always shows 7 weeks."
  },
  "VCalendar/first-day-of-week": {
    "type": "string | number\n",
    "description": "Sets the first day of the week, starting with 0 for Sunday."
  },
  "VCalendar/allowed-dates": {
    "type": "unknown[] | ((date: unknown) => boolean)\n",
    "description": "Determines which dates are selectable."
  },
  "VCalendar/display-value": {
    "type": "unknown\n",
    "description": "The value that determines the month to show. This is different from modelValue, which determines the selected value."
  },
  "VCalendar/hide-day-header": {
    "type": "boolean\n",
    "description": "Determines whether the day header is visible in the calendar day view."
  },
  "VCalendar/intervals": {
    "type": "number\n",
    "description": "Total number of intervals in a day view."
  },
  "VCalendar/day": {
    "type": "unknown\n",
    "description": "Represents the specific day associated with the interval."
  },
  "VCalendar/day-index": {
    "type": "number\n",
    "description": "Index of the day this interval is a part of, in a week or month view."
  },
  "VCalendar/events": {
    "type": "any[]\n",
    "description": "Array of events specific to this interval."
  },
  "VCalendar/interval-divisions": {
    "type": "number\n",
    "description": "Number of subdivisions within this interval."
  },
  "VCalendar/interval-duration": {
    "type": "number\n",
    "description": "Duration of this specific interval in minutes."
  },
  "VCalendar/interval-height": {
    "type": "number\n",
    "description": "Height of the interval in pixels in the calendar view."
  },
  "VCalendar/interval-format": {
    "type": "string | Function\n",
    "description": "Formatting rule for displaying the interval, as a string or function."
  },
  "VCalendar/interval-start": {
    "type": "number\n",
    "description": "Starting time for this specific interval."
  },
  "VCalendar/next-icon": {
    "type": "string\n",
    "description": "The icon to use for the next button."
  },
  "VCalendar/prev-icon": {
    "type": "string\n",
    "description": "The icon to use for the prev button."
  },
  "VCalendar/view-mode": {
    "type": "'month' | 'day' | 'week'\n",
    "description": "The current view mode of the calendar."
  },
  "VCalendarDay/hide-day-header": {
    "type": "boolean\n",
    "description": "Determines whether the day header is visible in the calendar day view."
  },
  "VCalendarDay/intervals": {
    "type": "number\n",
    "description": "Specifies the total number of time intervals for the day in the calendar view."
  },
  "VCalendarDay/day": {
    "type": "unknown\n",
    "description": "Represents the specific day associated with the interval."
  },
  "VCalendarDay/day-index": {
    "type": "number\n",
    "description": "Index of the day this interval is a part of, in a week or month view."
  },
  "VCalendarDay/events": {
    "type": "any[]\n",
    "description": "Array of events specific to this interval."
  },
  "VCalendarDay/interval-divisions": {
    "type": "number\n",
    "description": "Number of subdivisions within this interval."
  },
  "VCalendarDay/interval-duration": {
    "type": "number\n",
    "description": "Duration of this specific interval in minutes."
  },
  "VCalendarDay/interval-height": {
    "type": "number\n",
    "description": "Height of the interval in pixels in the calendar view."
  },
  "VCalendarDay/interval-format": {
    "type": "string | Function\n",
    "description": "Formatting rule for displaying the interval, as a string or function."
  },
  "VCalendarDay/interval-start": {
    "type": "number\n",
    "description": "Starting time for this specific interval."
  },
  "VCalendarHeader/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VCalendarHeader/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VCalendarHeader/next-icon": {
    "type": "string\n",
    "description": "The icon to use for the next button."
  },
  "VCalendarHeader/prev-icon": {
    "type": "string\n",
    "description": "The icon to use for the prev button."
  },
  "VCalendarHeader/view-mode": {
    "type": "'month' | 'day' | 'week'\n",
    "description": "The current view mode of the calendar."
  },
  "VCalendarInterval/day": {
    "type": "unknown\n",
    "description": "Represents the specific day associated with the interval."
  },
  "VCalendarInterval/day-index": {
    "type": "number\n",
    "description": "Index of the day this interval is a part of, in a week or month view."
  },
  "VCalendarInterval/events": {
    "type": "any[]\n",
    "description": "Array of events specific to this interval."
  },
  "VCalendarInterval/interval-divisions": {
    "type": "number\n",
    "description": "Number of subdivisions within this interval."
  },
  "VCalendarInterval/interval-duration": {
    "type": "number\n",
    "description": "Duration of this specific interval in minutes."
  },
  "VCalendarInterval/interval-height": {
    "type": "number\n",
    "description": "Height of the interval in pixels in the calendar view."
  },
  "VCalendarInterval/interval-format": {
    "type": "string | Function\n",
    "description": "Formatting rule for displaying the interval, as a string or function."
  },
  "VCalendarInterval/interval-start": {
    "type": "number\n",
    "description": "Starting time for this specific interval."
  },
  "VCalendarInterval/index": {
    "type": "number\n",
    "description": "Index or position of the interval in the day view."
  },
  "VCalendarIntervalEvent/interval": {
    "type": "unknown\n",
    "description": "The specific time interval this event is associated with."
  },
  "VCalendarIntervalEvent/interval-divisions": {
    "type": "number\n",
    "description": "Number of subdivisions within the interval for this event."
  },
  "VCalendarIntervalEvent/interval-duration": {
    "type": "number\n",
    "description": "Duration of the interval in which this event occurs, in minutes."
  },
  "VCalendarIntervalEvent/interval-height": {
    "type": "number\n",
    "description": "Height of the interval in the calendar view, in pixels."
  },
  "VCalendarIntervalEvent/all-day": {
    "type": "boolean\n",
    "description": "Indicates whether the event spans the entire day."
  },
  "VCalendarIntervalEvent/event": {
    "type": "unknown\n",
    "description": "The event object associated with this calendar interval."
  },
  "VCalendarMonthDay/title": {
    "type": "string | number\n",
    "description": "Specify a title text for the component."
  },
  "VCalendarMonthDay/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VCalendarMonthDay/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VCalendarMonthDay/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VCalendarMonthDay/day": {
    "type": "{\n  date: Date\n  formatted: string\n  isAdjacent: boolean\n  isDisabled: boolean\n  isEnd: boolean\n  isHidden: boolean\n  isSame: boolean\n  isSelected: boolean\n  isStart: boolean\n  isToday: boolean\n  isWeekEnd: boolean\n  isWeekStart: boolean\n  isoDate: string\n  localized: string\n  month: number\n  year: number\n}\n",
    "description": "Represents the specific day in the month view of the calendar."
  },
  "VCalendarMonthDay/events": {
    "type": "any[]\n",
    "description": "Array of events associated with this specific day."
  },
  "VCard/title": {
    "type": "string | number | boolean\n",
    "description": "Specify a title text for the component."
  },
  "VCard/text": {
    "type": "string | number | boolean\n",
    "description": "Specify content text for the component."
  },
  "VCard/flat": {
    "type": "boolean\n",
    "description": "Removes the card's elevation."
  },
  "VCard/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VCard/link": {
    "type": "boolean\n",
    "description": "Designates that the component is a link. This is automatic when using the href or to prop."
  },
  "VCard/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VCard/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VCard/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VCard/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VCard/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VCard/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VCard/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VCard/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VCard/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VCard/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VCard/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VCard/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VCard/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VCard/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VCard/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VCard/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VCard/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VCard/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VCard/image": {
    "type": "string\n",
    "description": "Apply a specific background image to the component."
  },
  "VCard/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VCard/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VCard/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VCard/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends a [v-icon](/components/icons/) component to the header."
  },
  "VCard/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VCard/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VCard/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VCard/subtitle": {
    "type": "string | number | boolean\n",
    "description": "Specify a subtitle text for the component."
  },
  "VCard/append-avatar": {
    "type": "string\n",
    "description": "Appends a [v-avatar](/components/avatars/) component after default content in the **append** slot."
  },
  "VCard/hover": {
    "type": "boolean\n",
    "description": "Applies **4dp** of elevation when hovered (default 2dp). You can find more information on the [elevation page](/styles/elevation)."
  },
  "VCard/prepend-avatar": {
    "type": "string\n",
    "description": "Prepends a [v-avatar](/components/avatars/) component in the **prepend** slot before default content."
  },
  "VCardItem/title": {
    "type": "string | number | boolean\n",
    "description": "Specify a title text for the component."
  },
  "VCardItem/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VCardItem/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
  },
  "VCardItem/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VCardItem/subtitle": {
    "type": "string | number | boolean\n",
    "description": "Specify a subtitle text for the component."
  },
  "VCardItem/append-avatar": {
    "type": "string\n",
    "description": "Appends a [v-avatar](/components/avatars/) component after default content in the **append** slot."
  },
  "VCardItem/prepend-avatar": {
    "type": "string\n",
    "description": "Prepends a [v-avatar](/components/avatars/) component in the **prepend** slot before default content."
  },
  "VCardSubtitle/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VCardSubtitle/opacity": {
    "type": "string | number\n",
    "description": "Sets the component's opacity value"
  },
  "VCardText/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VCardText/opacity": {
    "type": "string | number\n",
    "description": "Sets the component's opacity value"
  },
  "VCardTitle/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VCarousel/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VCarousel/reverse": {
    "type": "boolean\n",
    "description": "Reverse the normal transition direction."
  },
  "VCarousel/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VCarousel/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VCarousel/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VCarousel/color": {
    "type": "string\n",
    "description": "Applies a color to the navigation dots - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VCarousel/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VCarousel/progress": {
    "type": "string | boolean\n",
    "description": "Displays a carousel progress bar. Requires the **cycle** prop and **interval**."
  },
  "VCarousel/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VCarousel/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VCarousel/interval": {
    "type": "string | number\n",
    "description": "The duration between image cycles. Requires the **cycle** prop."
  },
  "VCarousel/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The displayed icon for forcing pagination to the next item."
  },
  "VCarousel/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The displayed icon for forcing pagination to the previous item."
  },
  "VCarousel/cycle": {
    "type": "boolean\n",
    "description": "Determines if the carousel should cycle through images."
  },
  "VCarousel/delimiter-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Sets icon for carousel delimiter."
  },
  "VCarousel/hide-delimiters": {
    "type": "boolean\n",
    "description": "Hides the carousel's bottom delimiters."
  },
  "VCarousel/hide-delimiter-background": {
    "type": "boolean\n",
    "description": "Hides the bottom delimiter background."
  },
  "VCarousel/continuous": {
    "type": "boolean\n",
    "description": "Determines whether carousel is continuous."
  },
  "VCarousel/show-arrows": {
    "type": "string | boolean\n",
    "description": "Displays arrows for next/previous navigation."
  },
  "VCarousel/touch": {
    "type": "boolean | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/directives/touch/index.ts#L9-L17\" target=\"_blank\">TouchHandlers</a>\n",
    "description": "Provide a custom **left** and **right** function when swiped left or right."
  },
  "VCarousel/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "The transition direction when changing windows."
  },
  "VCarousel/vertical-delimiters": {
    "type": "boolean | 'left' | 'right'\n",
    "description": "Displays carousel delimiters vertically."
  },
  "VCarouselItem/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VCarouselItem/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VCarouselItem/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VCarouselItem/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VCarouselItem/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VCarouselItem/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VCarouselItem/position": {
    "type": "string\n",
    "description": "Applies [object-position](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) styles to the image and placeholder elements."
  },
  "VCarouselItem/absolute": {
    "type": "boolean\n",
    "description": "Applies position: absolute to the component."
  },
  "VCarouselItem/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VCarouselItem/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VCarouselItem/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VCarouselItem/alt": {
    "type": "string\n",
    "description": "Alternate text for screen readers. Leave empty for decorative images."
  },
  "VCarouselItem/disabled": {
    "type": "boolean\n",
    "description": "Prevents the item from becoming active when using the \"next\" and \"prev\" buttons or the `toggle` method."
  },
  "VCarouselItem/src": {
    "type": "  | string\n  | { src: string; srcset: string; lazySrc: string; aspect: number }\n",
    "description": "The image URL. This prop is mandatory."
  },
  "VCarouselItem/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VCarouselItem/draggable": {
    "type": "boolean | 'true' | 'false'\n",
    "description": "Controls the `draggable` behavior of the image. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable)."
  },
  "VCarouselItem/inline": {
    "type": "boolean\n",
    "description": "Display as an inline element instead of a block, also disables flex-grow."
  },
  "VCarouselItem/transition": {
    "type": "string | boolean\n",
    "description": "The transition to use when switching from `lazy-src` to `src`. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VCarouselItem/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VCarouselItem/content-class": {
    "type": "any\n",
    "description": "Apply a custom class to the internal content element."
  },
  "VCarouselItem/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VCarouselItem/cover": {
    "type": "boolean\n",
    "description": "Resizes the background image to cover the entire container."
  },
  "VCarouselItem/gradient": {
    "type": "string\n",
    "description": "The gradient to apply to the image. Only supports [linear-gradient](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient) syntax, anything else should be done with classes."
  },
  "VCarouselItem/lazy-src": {
    "type": "string\n",
    "description": "Something to show while waiting for the main image to load, typically a small base64-encoded thumbnail. Has a slight blur filter applied.  \nNOTE: This prop has no effect unless either `height` or `aspect-ratio` are provided."
  },
  "VCarouselItem/options": {
    "type": "IntersectionObserverInit\n",
    "description": "Options that are passed to the [Intersection observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) constructor."
  },
  "VCarouselItem/sizes": {
    "type": "string\n",
    "description": "For use with `srcset`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes)."
  },
  "VCarouselItem/srcset": {
    "type": "string\n",
    "description": "A set of alternate images to use based on device size. [Read more...](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset)."
  },
  "VCarouselItem/aspect-ratio": {
    "type": "string | number\n",
    "description": "Calculated as `width/height`, so for a 1920x1080px image this will be `1.7778`. Will be calculated automatically if omitted."
  },
  "VCarouselItem/crossorigin": {
    "type": "'' | 'anonymous' | 'use-credentials'\n",
    "description": "Specify that images should be fetched with CORS enabled [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#crossorigin)"
  },
  "VCarouselItem/referrerpolicy": {
    "type": "  | 'origin'\n  | 'no-referrer'\n  | 'no-referrer-when-downgrade'\n  | 'origin-when-cross-origin'\n  | 'same-origin'\n  | 'strict-origin'\n  | 'strict-origin-when-cross-origin'\n  | 'unsafe-url'\n",
    "description": "Define which referrer is sent when fetching the resource [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#referrerpolicy)"
  },
  "VCarouselItem/reverse-transition": {
    "type": "string | boolean\n",
    "description": "Sets the reverse transition."
  },
  "VCheckbox/type": {
    "type": "string\n",
    "description": "Provides the default type for children selection controls."
  },
  "VCheckbox/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VCheckbox/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VCheckbox/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VCheckbox/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VCheckbox/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VCheckbox/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VCheckbox/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VCheckbox/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VCheckbox/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VCheckbox/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VCheckbox/indeterminate": {
    "type": "boolean\n",
    "description": "Sets an indeterminate state for the checkbox."
  },
  "VCheckbox/multiple": {
    "type": "boolean\n",
    "description": "Changes expected model to an array."
  },
  "VCheckbox/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VCheckbox/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VCheckbox/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VCheckbox/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VCheckbox/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VCheckbox/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VCheckbox/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VCheckbox/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VCheckbox/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VCheckbox/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VCheckbox/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the input is focused and apply color."
  },
  "VCheckbox/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VCheckbox/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VCheckbox/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VCheckbox/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VCheckbox/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VCheckbox/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VCheckbox/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VCheckbox/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VCheckbox/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VCheckbox/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VCheckbox/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VCheckbox/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VCheckbox/indeterminate-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when in an indeterminate state."
  },
  "VCheckbox/true-value": {
    "type": "any\n",
    "description": "Sets value for truthy state."
  },
  "VCheckbox/false-value": {
    "type": "any\n",
    "description": "Sets value for falsy state."
  },
  "VCheckbox/defaults-target": {
    "type": "string\n",
    "description": "The target component to provide defaults values for."
  },
  "VCheckbox/false-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when inactive."
  },
  "VCheckbox/true-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when active."
  },
  "VCheckbox/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VCheckboxBtn/type": {
    "type": "string\n",
    "description": "Provides the default type for children selection controls."
  },
  "VCheckboxBtn/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VCheckboxBtn/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VCheckboxBtn/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VCheckboxBtn/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VCheckboxBtn/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VCheckboxBtn/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VCheckboxBtn/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VCheckboxBtn/indeterminate": {
    "type": "boolean\n",
    "description": "Puts the control in an indeterminate state. Used with the [indeterminate-icon](#props-indeterminate-icon) property."
  },
  "VCheckboxBtn/multiple": {
    "type": "boolean\n",
    "description": "Changes select to multiple. Accepts array for value."
  },
  "VCheckboxBtn/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VCheckboxBtn/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VCheckboxBtn/inline": {
    "type": "boolean\n",
    "description": "Puts children inputs into a row."
  },
  "VCheckboxBtn/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VCheckboxBtn/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VCheckboxBtn/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VCheckboxBtn/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VCheckboxBtn/indeterminate-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the component is in an indeterminate state."
  },
  "VCheckboxBtn/true-value": {
    "type": "any\n",
    "description": "Sets value for truthy state."
  },
  "VCheckboxBtn/false-value": {
    "type": "any\n",
    "description": "Sets value for falsy state."
  },
  "VCheckboxBtn/defaults-target": {
    "type": "string\n",
    "description": "The target component to provide defaults values for."
  },
  "VCheckboxBtn/false-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when inactive."
  },
  "VCheckboxBtn/true-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when active."
  },
  "VCheckboxBtn/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VChip/text": {
    "type": "string | number | boolean\n",
    "description": "Specify content text for the component."
  },
  "VChip/filter": {
    "type": "boolean\n",
    "description": "Displays a selection icon when selected."
  },
  "VChip/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VChip/link": {
    "type": "boolean\n",
    "description": "Designates that the component is a link. This is automatic when using the href or to prop."
  },
  "VChip/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VChip/closable": {
    "type": "boolean\n",
    "description": "Adds remove button and then a chip can be closed."
  },
  "VChip/close-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Change the default icon used for **close** chips."
  },
  "VChip/close-label": {
    "type": "string\n",
    "description": "Text used for *aria-label* on the close button in **close** chips. Can also be customized globally in [Internationalization](/customization/internationalization)."
  },
  "VChip/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VChip/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VChip/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VChip/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VChip/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VChip/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VChip/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VChip/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VChip/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VChip/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VChip/size": {
    "type": "string | number\n",
    "description": "Sets the height, padding and the font size of the component. Accepts only predefined options: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VChip/value": {
    "type": "any\n",
    "description": "The value used when a child of a [v-chip-group](/components/chip-groups)."
  },
  "VChip/draggable": {
    "type": "boolean\n",
    "description": "Makes the chip draggable."
  },
  "VChip/label": {
    "type": "boolean\n",
    "description": "Applies a medium size border radius."
  },
  "VChip/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VChip/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VChip/active-class": {
    "type": "string\n",
    "description": "The class applied to the component when it matches the current route. Find more information about the [active-class prop](https://router.vuejs.org/api/#active-class) on the [vue-router](https://router.vuejs.org/) documentation."
  },
  "VChip/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VChip/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VChip/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VChip/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
  },
  "VChip/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VChip/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VChip/append-avatar": {
    "type": "string\n",
    "description": "Appends a [v-avatar](/components/avatars/) component after default content in the **append** slot."
  },
  "VChip/prepend-avatar": {
    "type": "string\n",
    "description": "Prepends a [v-avatar](/components/avatars/) component in the **prepend** slot before default content."
  },
  "VChip/filter-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Change the default icon used for **filter** chips."
  },
  "VChip/pill": {
    "type": "boolean\n",
    "description": "Remove `v-avatar` padding."
  },
  "VChipGroup/symbol": {
    "type": "any\n",
    "description": "The [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) used to hook into group functionality for components like [v-btn-toggle](/components/btn-toggle) and [v-bottom-navigation](/components/bottom-navigations/)."
  },
  "VChipGroup/filter": {
    "type": "boolean\n",
    "description": "Applies an checkmark icon in front of every chip for using it like a filter."
  },
  "VChipGroup/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VChipGroup/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VChipGroup/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VChipGroup/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VChipGroup/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VChipGroup/disabled": {
    "type": "boolean\n",
    "description": "Puts all children components into a disabled state."
  },
  "VChipGroup/max": {
    "type": "number\n",
    "description": "Sets a maximum number of selections that can be made."
  },
  "VChipGroup/multiple": {
    "type": "boolean\n",
    "description": "Allows one to select multiple items."
  },
  "VChipGroup/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VChipGroup/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Sets the designated mobile breakpoint for the component."
  },
  "VChipGroup/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused. Recommended with `color` or `filter` to properly highlight selected items."
  },
  "VChipGroup/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VChipGroup/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VChipGroup/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Specify the icon to use for the next icon."
  },
  "VChipGroup/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Specify the icon to use for the prev icon."
  },
  "VChipGroup/show-arrows": {
    "type": "string | boolean\n",
    "description": "Force the display of the pagination arrows."
  },
  "VChipGroup/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Switch between horizontal and vertical modes."
  },
  "VChipGroup/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VChipGroup/column": {
    "type": "boolean\n",
    "description": "Remove horizontal pagination and wrap items as needed."
  },
  "VChipGroup/center-active": {
    "type": "boolean\n",
    "description": "Forces the selected chip to be centered."
  },
  "VClassIcon/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VClassIcon/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VCode/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VCol/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VCol/order": {
    "type": "string | number\n",
    "description": "Sets the default [order](https://developer.mozilla.org/en-US/docs/Web/CSS/order) for the column."
  },
  "VCol/sm": {
    "type": "string | number | boolean\n",
    "description": "Changes the number of columns on small and greater breakpoints."
  },
  "VCol/md": {
    "type": "string | number | boolean\n",
    "description": "Changes the number of columns on medium and greater breakpoints."
  },
  "VCol/lg": {
    "type": "string | number | boolean\n",
    "description": "Changes the number of columns on large and greater breakpoints."
  },
  "VCol/xl": {
    "type": "string | number | boolean\n",
    "description": "Changes the number of columns on extra large and greater breakpoints."
  },
  "VCol/xxl": {
    "type": "string | number | boolean\n",
    "description": "Changes the number of columns on extra extra large and greater breakpoints."
  },
  "VCol/offset": {
    "type": "string | number\n",
    "description": "Sets the default offset for the column."
  },
  "VCol/cols": {
    "type": "string | number | boolean\n",
    "description": "Sets the default number of columns the component extends. Available options are: **1 -> 12** and **auto**."
  },
  "VCol/offset-sm": {
    "type": "string | number\n",
    "description": "Changes the offset of the component on small and greater breakpoints."
  },
  "VCol/offset-md": {
    "type": "string | number\n",
    "description": "Changes the offset of the component on medium and greater breakpoints."
  },
  "VCol/offset-lg": {
    "type": "string | number\n",
    "description": "Changes the offset of the component on large and greater breakpoints."
  },
  "VCol/offset-xl": {
    "type": "string | number\n",
    "description": "Changes the offset of the component on extra large and greater breakpoints."
  },
  "VCol/offset-xxl": {
    "type": "string | number\n",
    "description": "Changes the offset of the component on extra extra large and greater breakpoints."
  },
  "VCol/order-sm": {
    "type": "string | number\n",
    "description": "Changes the order of the component on small and greater breakpoints."
  },
  "VCol/order-md": {
    "type": "string | number\n",
    "description": "Changes the order of the component on medium and greater breakpoints."
  },
  "VCol/order-lg": {
    "type": "string | number\n",
    "description": "Changes the order of the component on large and greater breakpoints."
  },
  "VCol/order-xl": {
    "type": "string | number\n",
    "description": "Changes the order of the component on extra large and greater breakpoints."
  },
  "VCol/order-xxl": {
    "type": "string | number\n",
    "description": "Changes the order of the component on extra extra large and greater breakpoints."
  },
  "VCol/align-self": {
    "type": "'end' | 'start' | 'center' | 'auto' | 'baseline' | 'stretch'\n",
    "description": "Applies the [align-items](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items) css property. Available options are: **start**, **center**, **end**, **auto**, **baseline** and **stretch**."
  },
  "VColorInput/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VColorInput/flat": {
    "type": "boolean\n",
    "description": "Removes box shadow when using a variant with elevation."
  },
  "VColorInput/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VColorInput/type": {
    "type": "string\n",
    "description": "Sets input type."
  },
  "VColorInput/model-value": {
    "type": "string | Record<string, unknown>\n",
    "description": "Represents the committed v-model value"
  },
  "VColorInput/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VColorInput/reverse": {
    "type": "boolean\n",
    "description": "Reverses the orientation."
  },
  "VColorInput/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VColorInput/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VColorInput/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VColorInput/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VColorInput/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VColorInput/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VColorInput/width": {
    "type": "string | number\n",
    "description": "Sets the width of the color picker."
  },
  "VColorInput/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VColorInput/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VColorInput/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VColorInput/rounded": {
    "type": "string | number | boolean\n",
    "description": "Adds a border radius to the input."
  },
  "VColorInput/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VColorInput/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VColorInput/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VColorInput/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VColorInput/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VColorInput/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VColorInput/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VColorInput/placeholder": {
    "type": "string\n",
    "description": "Sets the input’s placeholder text."
  },
  "VColorInput/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VColorInput/prefix": {
    "type": "string\n",
    "description": "Displays prefix text."
  },
  "VColorInput/role": {
    "type": "string\n",
    "description": "The role attribute applied to the input."
  },
  "VColorInput/autofocus": {
    "type": "boolean\n",
    "description": "Enables autofocus."
  },
  "VColorInput/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VColorInput/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VColorInput/mode": {
    "type": "'rgb' | 'rgba' | 'hsl' | 'hsla' | 'hex' | 'hexa'\n",
    "description": "The current selected input type. Syncable with `v-model:mode`."
  },
  "VColorInput/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VColorInput/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VColorInput/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the outside the component's input, uses the same syntax as `v-icon`."
  },
  "VColorInput/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VColorInput/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VColorInput/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VColorInput/divided": {
    "type": "boolean\n",
    "description": "Adds a divider between the header and controls."
  },
  "VColorInput/hide-header": {
    "type": "boolean\n",
    "description": "Hide the picker header."
  },
  "VColorInput/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VColorInput/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VColorInput/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VColorInput/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VColorInput/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VColorInput/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VColorInput/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VColorInput/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VColorInput/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VColorInput/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VColorInput/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VColorInput/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VColorInput/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VColorInput/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VColorInput/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VColorInput/counter": {
    "type": "string | number | boolean\n",
    "description": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation."
  },
  "VColorInput/pip": {
    "type": "boolean\n",
    "description": "MISSING DESCRIPTION ([edit in github](https://github.com/vuetifyjs/vuetify/tree//packages/api-generator/src/locale/en/VColorInput.json))"
  },
  "VColorInput/pip-icon": {
    "type": "string\n",
    "description": "MISSING DESCRIPTION ([edit in github](https://github.com/vuetifyjs/vuetify/tree//packages/api-generator/src/locale/en/VColorInput.json))"
  },
  "VColorInput/cancel-text": {
    "type": "string\n",
    "description": "Text for the cancel button"
  },
  "VColorInput/ok-text": {
    "type": "string\n",
    "description": "Text for the ok button"
  },
  "VColorInput/hide-actions": {
    "type": "boolean\n",
    "description": "Prevent showing the default actions buttons. Does not affect `<component :is=\"actions\" />`"
  },
  "VColorInput/persistent-placeholder": {
    "type": "boolean\n",
    "description": "Forces placeholder to always be visible."
  },
  "VColorInput/persistent-counter": {
    "type": "boolean\n",
    "description": "Forces counter to always be visible."
  },
  "VColorInput/suffix": {
    "type": "string\n",
    "description": "Displays suffix text."
  },
  "VColorInput/append-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **append-inner** slot."
  },
  "VColorInput/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VColorInput/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when the **clearable** prop is set to true."
  },
  "VColorInput/dirty": {
    "type": "boolean\n",
    "description": "Manually apply the dirty state styling."
  },
  "VColorInput/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VColorInput/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
  },
  "VColorInput/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VColorInput/counter-value": {
    "type": "number | ((value: any) => number)\n",
    "description": "Function returns the counter display text."
  },
  "VColorInput/model-modifiers": {
    "type": "unknown\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VColorInput/canvas-height": {
    "type": "string | number\n",
    "description": "Height of canvas."
  },
  "VColorInput/dot-size": {
    "type": "string | number\n",
    "description": "Changes the size of the selection dot on the canvas."
  },
  "VColorInput/hide-canvas": {
    "type": "boolean\n",
    "description": "Hides canvas."
  },
  "VColorInput/hide-sliders": {
    "type": "boolean\n",
    "description": "Hides sliders."
  },
  "VColorInput/hide-inputs": {
    "type": "boolean\n",
    "description": "Hides inputs."
  },
  "VColorInput/modes": {
    "type": "('rgb' | 'rgba' | 'hsl' | 'hsla' | 'hex' | 'hexa')[]\n",
    "description": "Sets available input types."
  },
  "VColorInput/show-swatches": {
    "type": "boolean\n",
    "description": "Displays color swatches."
  },
  "VColorInput/swatches-max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height of the swatches section."
  },
  "VColorInput/landscape": {
    "type": "boolean\n",
    "description": "Puts the picker into landscape mode."
  },
  "VColorInput/swatches": {
    "type": "(\n  | string\n  | number\n  | {\n      readonly h: number\n      readonly s: number\n      readonly v: number\n      readonly a?: number | undefined\n    }\n  | {\n      readonly r: number\n      readonly g: number\n      readonly b: number\n      readonly a?: number | undefined\n    }\n  | {\n      readonly h: number\n      readonly s: number\n      readonly l: number\n      readonly a?: number | undefined\n    }\n)[][]\n",
    "description": "Sets the available color swatches to select from. 2D array of rows and columns, accepts any color format the picker does."
  },
  "VColorPicker/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VColorPicker/mode": {
    "type": "'rgb' | 'rgba' | 'hsl' | 'hsla' | 'hex' | 'hexa'\n",
    "description": "The current selected input type. Syncable with `v-model:mode`."
  },
  "VColorPicker/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VColorPicker/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VColorPicker/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VColorPicker/width": {
    "type": "string | number\n",
    "description": "Sets the width of the color picker."
  },
  "VColorPicker/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VColorPicker/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VColorPicker/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VColorPicker/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VColorPicker/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VColorPicker/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VColorPicker/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VColorPicker/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VColorPicker/position": {
    "type": "'fixed' | 'relative' | 'static' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VColorPicker/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VColorPicker/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VColorPicker/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VColorPicker/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VColorPicker/model-value": {
    "type": "string | Record<string, unknown>\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VColorPicker/canvas-height": {
    "type": "string | number\n",
    "description": "Height of canvas."
  },
  "VColorPicker/dot-size": {
    "type": "string | number\n",
    "description": "Changes the size of the selection dot on the canvas."
  },
  "VColorPicker/hide-canvas": {
    "type": "boolean\n",
    "description": "Hides canvas."
  },
  "VColorPicker/hide-sliders": {
    "type": "boolean\n",
    "description": "Hides sliders."
  },
  "VColorPicker/hide-inputs": {
    "type": "boolean\n",
    "description": "Hides inputs."
  },
  "VColorPicker/modes": {
    "type": "('rgb' | 'rgba' | 'hsl' | 'hsla' | 'hex' | 'hexa')[]\n",
    "description": "Sets available input types."
  },
  "VColorPicker/show-swatches": {
    "type": "boolean\n",
    "description": "Displays color swatches."
  },
  "VColorPicker/swatches-max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height of the swatches section."
  },
  "VColorPicker/divided": {
    "type": "boolean\n",
    "description": "Adds a divider between the header and controls."
  },
  "VColorPicker/landscape": {
    "type": "boolean\n",
    "description": "Puts the picker into landscape mode."
  },
  "VColorPicker/hide-header": {
    "type": "boolean\n",
    "description": "Hide the picker header."
  },
  "VColorPicker/swatches": {
    "type": "(\n  | string\n  | number\n  | {\n      readonly h: number\n      readonly s: number\n      readonly v: number\n      readonly a?: number | undefined\n    }\n  | {\n      readonly r: number\n      readonly g: number\n      readonly b: number\n      readonly a?: number | undefined\n    }\n  | {\n      readonly h: number\n      readonly s: number\n      readonly l: number\n      readonly a?: number | undefined\n    }\n)[][]\n",
    "description": "Sets the available color swatches to select from. 2D array of rows and columns, accepts any color format the picker does."
  },
  "VCombobox/flat": {
    "type": "boolean\n",
    "description": "Removes box shadow when using a variant with elevation."
  },
  "VCombobox/type": {
    "type": "string\n",
    "description": "Sets input type."
  },
  "VCombobox/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VCombobox/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VCombobox/reverse": {
    "type": "boolean\n",
    "description": "Reverses the orientation."
  },
  "VCombobox/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VCombobox/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VCombobox/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VCombobox/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VCombobox/rounded": {
    "type": "string | number | boolean\n",
    "description": "Adds a border radius to the input."
  },
  "VCombobox/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VCombobox/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VCombobox/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VCombobox/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VCombobox/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VCombobox/delimiters": {
    "type": "string[]\n",
    "description": "Accepts an array of strings that will trigger a new tag when typing. Does not replace the normal Tab and Enter keys."
  },
  "VCombobox/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VCombobox/multiple": {
    "type": "boolean\n",
    "description": "Changes select to multiple. Accepts array for value."
  },
  "VCombobox/placeholder": {
    "type": "string\n",
    "description": "Sets the input’s placeholder text."
  },
  "VCombobox/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VCombobox/prefix": {
    "type": "string\n",
    "description": "Displays prefix text."
  },
  "VCombobox/role": {
    "type": "string\n",
    "description": "The role attribute applied to the input."
  },
  "VCombobox/autofocus": {
    "type": "boolean\n",
    "description": "Enables autofocus."
  },
  "VCombobox/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VCombobox/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VCombobox/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VCombobox/menu": {
    "type": "boolean\n",
    "description": "Renders with the menu open by default."
  },
  "VCombobox/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VCombobox/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VCombobox/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VCombobox/items": {
    "type": "any[]\n",
    "description": "Can be an array of objects or strings. By default objects should have **title** and **value** properties, and can optionally have a **props** property containing any [VListItem props](/api/v-list-item/#props). Keys to use for these can be changed with the **item-title**, **item-value**, and **item-props** props."
  },
  "VCombobox/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the outside the component's input, uses the same syntax as `v-icon`."
  },
  "VCombobox/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VCombobox/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VCombobox/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VCombobox/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VCombobox/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VCombobox/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VCombobox/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VCombobox/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VCombobox/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VCombobox/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VCombobox/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VCombobox/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VCombobox/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VCombobox/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VCombobox/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VCombobox/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VCombobox/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VCombobox/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VCombobox/counter": {
    "type": "string | number | boolean\n",
    "description": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation."
  },
  "VCombobox/persistent-placeholder": {
    "type": "boolean\n",
    "description": "Forces placeholder to always be visible."
  },
  "VCombobox/persistent-counter": {
    "type": "boolean\n",
    "description": "Forces counter to always be visible."
  },
  "VCombobox/suffix": {
    "type": "string\n",
    "description": "Displays suffix text."
  },
  "VCombobox/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VCombobox/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when the **clearable** prop is set to true."
  },
  "VCombobox/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VCombobox/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
  },
  "VCombobox/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VCombobox/counter-value": {
    "type": "number | ((value: any) => number)\n",
    "description": "Function returns the counter display text."
  },
  "VCombobox/model-modifiers": {
    "type": "unknown\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VCombobox/auto-select-first": {
    "type": "boolean | 'exact'\n",
    "description": "When searching, will always highlight the first option and select it on blur. `exact` will only highlight and select exact matches."
  },
  "VCombobox/clear-on-select": {
    "type": "boolean\n",
    "description": "Reset the search text when a selection is made while using the **multiple** prop."
  },
  "VCombobox/filter-mode": {
    "type": "'every' | 'some' | 'union' | 'intersection'\n",
    "description": "Controls how the results of `customFilter` and `customKeyFilter` are combined. All modes only apply `customFilter` to columns not specified in `customKeyFilter`.\n\n- **some**: There is at least one match from either the custom filter or the custom key filter.\n- **every**: All columns match either the custom filter or the custom key filter.\n- **union**: There is at least one match from the custom filter, or all columns match the custom key filters.\n- **intersection**: There is at least one match from the custom filter, and all columns match the custom key filters."
  },
  "VCombobox/no-filter": {
    "type": "boolean\n",
    "description": "Disables all item filtering."
  },
  "VCombobox/custom-filter": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/filter.tsx#L22-L22\" target=\"_blank\">FilterFunction</a>\n",
    "description": "Function used to filter items, called for each filterable key on each item in the list. The first argument is the filterable value from the item, the second is the search term, and the third is the internal item object. The function should return true if the item should be included in the filtered list, or the index of the match in the value if it should be included with the result highlighted."
  },
  "VCombobox/custom-key-filter": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customFilter` is skipped for columns with `customKeyFilter` specified."
  },
  "VCombobox/filter-keys": {
    "type": "string | string[]\n",
    "description": "Array of specific keys to filter on the item."
  },
  "VCombobox/chips": {
    "type": "boolean\n",
    "description": "Changes display of selections to chips."
  },
  "VCombobox/closable-chips": {
    "type": "boolean\n",
    "description": "Enables the [closable](/api/v-chip/#props-closable) prop on all [v-chip](/components/chips/) components."
  },
  "VCombobox/close-text": {
    "type": "string\n",
    "description": "Text set to the inputs `aria-label` and `title` when input menu is closed."
  },
  "VCombobox/open-text": {
    "type": "string\n",
    "description": "Text set to the inputs **aria-label** and **title** when input menu is open."
  },
  "VCombobox/hide-no-data": {
    "type": "boolean\n",
    "description": "Hides the menu when there are no options to show.  Useful for preventing the menu from opening before results are fetched asynchronously.  Also has the effect of opening the menu when the `items` array changes if not already open."
  },
  "VCombobox/hide-selected": {
    "type": "boolean\n",
    "description": "Do not display in the select menu items that are already selected."
  },
  "VCombobox/list-props": {
    "type": "unknown\n",
    "description": "Pass props through to the `v-list` component. Accepts an object with anything from [v-list](/api/v-list/#props) props, camelCase keys are recommended."
  },
  "VCombobox/item-title": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its title."
  },
  "VCombobox/item-value": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VCombobox/item-children": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "This property currently has **no effect**."
  },
  "VCombobox/item-props": {
    "type": "SelectItemKey<any>\n",
    "description": "Props object that will be applied to each item component. `true` will treat the original object as raw props and pass it directly to the component."
  },
  "VCombobox/return-object": {
    "type": "boolean\n",
    "description": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**."
  },
  "VCombobox/menu-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Sets the the spin icon."
  },
  "VCombobox/menu-props": {
    "type": "unknown\n",
    "description": "Pass props through to the `v-menu` component. Accepts an object with anything from [v-menu](/api/v-menu/#props) props, camelCase keys are recommended."
  },
  "VCombobox/no-data-text": {
    "type": "string\n",
    "description": "Text shown when no items are provided to the component."
  },
  "VCombobox/open-on-clear": {
    "type": "boolean\n",
    "description": "Open's the menu whenever the clear icon is clicked."
  },
  "VCombobox/item-color": {
    "type": "string\n",
    "description": "Sets color of selected items."
  },
  "VComponentIcon/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VComponentIcon/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VConfirmEdit/disabled": {
    "type": "boolean | ('cancel' | 'save')[]\n",
    "description": "Control the disabled state of action buttons. If not provided, internal logic will be used to determine the disabled state."
  },
  "VConfirmEdit/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VConfirmEdit/model-value": {
    "type": "unknown\n",
    "description": "Represents the committed v-model value"
  },
  "VConfirmEdit/cancel-text": {
    "type": "string\n",
    "description": "Text for the cancel button"
  },
  "VConfirmEdit/ok-text": {
    "type": "string\n",
    "description": "Text for the ok button"
  },
  "VConfirmEdit/hide-actions": {
    "type": "boolean\n",
    "description": "Prevent showing the default actions buttons. Does not affect `<component :is=\"actions\" />`"
  },
  "VContainer/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VContainer/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VContainer/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VContainer/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VContainer/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VContainer/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VContainer/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VContainer/fluid": {
    "type": "boolean\n",
    "description": "Removes viewport maximum-width size breakpoints."
  },
  "VCounter/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VCounter/max": {
    "type": "string | number\n",
    "description": "Sets the maximum allowed value."
  },
  "VCounter/value": {
    "type": "string | number\n",
    "description": "Sets the current counter value."
  },
  "VCounter/active": {
    "type": "boolean\n",
    "description": "Determines whether the counter is visible or not."
  },
  "VCounter/transition": {
    "type": "  | string\n  | boolean\n  | (TransitionProps & { component: Component })\n  | { component: Component }\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VDataIterator/search": {
    "type": "string\n",
    "description": "Text input used to filter items."
  },
  "VDataIterator/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VDataIterator/items": {
    "type": "unknown[]\n",
    "description": "An array of strings or objects used for automatically generating children components."
  },
  "VDataIterator/loading": {
    "type": "boolean\n",
    "description": "If `true` and no items are provided, then a loading text will be shown."
  },
  "VDataIterator/filter-mode": {
    "type": "'every' | 'some' | 'union' | 'intersection'\n",
    "description": "Controls how the results of `customFilter` and `customKeyFilter` are combined. All modes only apply `customFilter` to columns not specified in `customKeyFilter`.\n\n- **some**: There is at least one match from either the custom filter or the custom key filter.\n- **every**: All columns match either the custom filter or the custom key filter.\n- **union**: There is at least one match from the custom filter, or all columns match the custom key filters.\n- **intersection**: There is at least one match from the custom filter, and all columns match the custom key filters."
  },
  "VDataIterator/no-filter": {
    "type": "boolean\n",
    "description": "Disables all item filtering."
  },
  "VDataIterator/custom-filter": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/filter.tsx#L22-L22\" target=\"_blank\">FilterFunction</a>\n",
    "description": "Function to filter items."
  },
  "VDataIterator/custom-key-filter": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customFilter` is skipped for columns with `customKeyFilter` specified."
  },
  "VDataIterator/filter-keys": {
    "type": "string | string[]\n",
    "description": "Array of specific keys to filter on the item."
  },
  "VDataIterator/select-strategy": {
    "type": "'single' | 'page' | 'all'\n",
    "description": "Defines the strategy of selecting items in the list. Possible values are: 'single' (only one item can be selected at a time), 'page' ('Select all' button will select only items on the current page), 'all' ('Select all' button will select all items in the list)."
  },
  "VDataIterator/item-value": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VDataIterator/return-object": {
    "type": "boolean\n",
    "description": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**."
  },
  "VDataIterator/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VDataIterator/model-value": {
    "type": "any[]\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VDataIterator/transition": {
    "type": "  | string\n  | boolean\n  | (TransitionProps & { component: Component })\n  | { component: Component; hideOnLeave: boolean }\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VDataIterator/item-selectable": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "Property on supplied `items` that contains the boolean value indicating if the item is selectable."
  },
  "VDataIterator/show-select": {
    "type": "boolean\n",
    "description": "Shows the column with checkboxes for selecting items in the list."
  },
  "VDataIterator/page": {
    "type": "string | number\n",
    "description": "The current displayed page number (1-indexed)."
  },
  "VDataIterator/sort-by": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/composables/sort.ts#L30-L30\" target=\"_blank\">SortItem</a>[]\n",
    "description": "Changes which item property (or properties) should be used for sort order. Can be used with `.sync` modifier."
  },
  "VDataIterator/multi-sort": {
    "type": "boolean\n",
    "description": "If `true` then one can sort on multiple properties."
  },
  "VDataIterator/must-sort": {
    "type": "boolean\n",
    "description": "If `true` then one can not disable sorting, it will always switch between ascending and descending."
  },
  "VDataIterator/custom-key-sort": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customSort` is skipped for columns with `customKeySort` specified."
  },
  "VDataIterator/items-per-page": {
    "type": "string | number\n",
    "description": "Changes how many items per page should be visible. Can be used with `.sync` modifier. Setting this prop to `-1` will display all items on the page."
  },
  "VDataIterator/expand-on-click": {
    "type": "boolean\n",
    "description": "Expands item when the row is clicked."
  },
  "VDataIterator/show-expand": {
    "type": "boolean\n",
    "description": "Shows the expand icon."
  },
  "VDataIterator/expanded": {
    "type": "string[]\n",
    "description": "Array of expanded items. Can be used with `.sync` modifier."
  },
  "VDataIterator/group-by": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/composables/sort.ts#L30-L30\" target=\"_blank\">SortItem</a>[]\n",
    "description": "Changes which item property should be used for grouping items. Currently only supports a single grouping in the format: `group` or `['group']`. When using an array, only the first element is considered. Can be used with `.sync` modifier."
  },
  "VDataTable/search": {
    "type": "string\n",
    "description": "Text input used to filter items."
  },
  "VDataTable/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VDataTable/height": {
    "type": "string | number\n",
    "description": "Set an explicit height of table."
  },
  "VDataTable/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VDataTable/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VDataTable/items": {
    "type": "any[]\n",
    "description": "An array of strings or objects used for automatically generating children components."
  },
  "VDataTable/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height of the table rows."
  },
  "VDataTable/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VDataTable/sticky": {
    "type": "boolean\n",
    "description": "Deprecated, use `fixed-header` instead."
  },
  "VDataTable/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDataTable/filter-mode": {
    "type": "'every' | 'some' | 'union' | 'intersection'\n",
    "description": "Controls how the results of `customFilter` and `customKeyFilter` are combined. All modes only apply `customFilter` to columns not specified in `customKeyFilter`.\n\n- **some**: There is at least one match from either the custom filter or the custom key filter.\n- **every**: All columns match either the custom filter or the custom key filter.\n- **union**: There is at least one match from the custom filter, or all columns match the custom key filters.\n- **intersection**: There is at least one match from the custom filter, and all columns match the custom key filters."
  },
  "VDataTable/no-filter": {
    "type": "boolean\n",
    "description": "Disables all item filtering."
  },
  "VDataTable/custom-filter": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/filter.tsx#L22-L22\" target=\"_blank\">FilterFunction</a>\n",
    "description": "Function to filter items."
  },
  "VDataTable/custom-key-filter": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customFilter` is skipped for columns with `customKeyFilter` specified."
  },
  "VDataTable/filter-keys": {
    "type": "string | string[]\n",
    "description": "Array of specific keys to filter on the item."
  },
  "VDataTable/hide-no-data": {
    "type": "boolean\n",
    "description": "Hides the menu when there are no options to show.  Useful for preventing the menu from opening before results are fetched asynchronously.  Also has the effect of opening the menu when the `items` array changes if not already open."
  },
  "VDataTable/select-strategy": {
    "type": "'single' | 'page' | 'all'\n",
    "description": "Defines the strategy of selecting items in the list. Possible values are: 'single' (only one item can be selected at a time), 'page' ('Select all' button will select only items on the current page), 'all' ('Select all' button will select all items in the list)."
  },
  "VDataTable/item-value": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VDataTable/return-object": {
    "type": "boolean\n",
    "description": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**."
  },
  "VDataTable/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VDataTable/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VDataTable/no-data-text": {
    "type": "string\n",
    "description": "Text shown when no items are provided to the component."
  },
  "VDataTable/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VDataTable/item-selectable": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that indicates whether the item is selectable."
  },
  "VDataTable/show-select": {
    "type": "boolean\n",
    "description": "Shows the select checkboxes in both the header and rows (if using default rows)."
  },
  "VDataTable/page": {
    "type": "string | number\n",
    "description": "The current displayed page number (1-indexed)."
  },
  "VDataTable/sort-by": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/composables/sort.ts#L30-L30\" target=\"_blank\">SortItem</a>[]\n",
    "description": "Changes which item property (or properties) should be used for sort order. Can be used with `.sync` modifier."
  },
  "VDataTable/multi-sort": {
    "type": "boolean\n",
    "description": "If `true` then one can sort on multiple properties."
  },
  "VDataTable/must-sort": {
    "type": "boolean\n",
    "description": "If `true` then one can not disable sorting, it will always switch between ascending and descending."
  },
  "VDataTable/custom-key-sort": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customSort` is skipped for columns with `customKeySort` specified."
  },
  "VDataTable/items-per-page": {
    "type": "string | number\n",
    "description": "Changes how many items per page should be visible. Can be used with `.sync` modifier. Setting this prop to `-1` will display all items on the page."
  },
  "VDataTable/expand-on-click": {
    "type": "boolean\n",
    "description": "Expands item when the row is clicked."
  },
  "VDataTable/show-expand": {
    "type": "boolean\n",
    "description": "Shows the expand toggle in default rows."
  },
  "VDataTable/expanded": {
    "type": "string[]\n",
    "description": "Whether the item is expanded or not."
  },
  "VDataTable/group-by": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/composables/sort.ts#L30-L30\" target=\"_blank\">SortItem</a>[]\n",
    "description": "Changes which item property should be used for grouping items. Currently only supports a single grouping in the format: `group` or `['group']`. When using an array, only the first element is considered. Can be used with `.sync` modifier."
  },
  "VDataTable/header-props": {
    "type": "unknown\n",
    "description": "Pass props to the default header. See [`v-data-table-headers` API](/api/v-data-table-headers) for more information."
  },
  "VDataTable/cell-props": {
    "type": "  | Record<string, any>\n  | ((\n      data: Pick<\n        ItemKeySlot<any>,\n        'value' | 'item' | 'index' | 'internalItem' | 'column'\n      >,\n    ) => Record<string, any>)\n",
    "description": "An object of additional props to be passed to each `<td>` in the table body. Also accepts a function that will be called for each cell. If the same prop is defined both here and in `cellProps` in a headers object, the value from the headers object will be used."
  },
  "VDataTable/disable-sort": {
    "type": "boolean\n",
    "description": "Disables sorting completely."
  },
  "VDataTable/headers": {
    "type": "{\n  readonly key?:\n    | (string & {})\n    | 'data-table-group'\n    | 'data-table-select'\n    | 'data-table-expand'\n    | undefined\n  readonly value?: SelectItemKey<any>\n  readonly title?: string | undefined\n  readonly fixed?: boolean | undefined\n  readonly align?: 'start' | 'end' | 'center' | undefined\n  readonly width?: string | number | undefined\n  readonly minWidth?: string | number | undefined\n  readonly maxWidth?: string | number | undefined\n  readonly nowrap?: boolean | undefined\n  readonly headerProps?: { readonly [x: string]: any } | undefined\n  readonly cellProps?:\n    | { readonly [x: string]: any }\n    | HeaderCellPropsFunction\n    | undefined\n  readonly sortable?: boolean | undefined\n  readonly sort?: DataTableCompareFunction<any> | undefined\n  readonly sortRaw?: DataTableCompareFunction<any> | undefined\n  readonly filter?: FilterFunction | undefined\n  readonly children?: readonly any[] | undefined\n}[]\n",
    "description": "An array of objects that each describe a header column."
  },
  "VDataTable/loading-text": {
    "type": "string\n",
    "description": "Text shown when the data is loading."
  },
  "VDataTable/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VDataTable/row-props": {
    "type": "  | Record<string, any>\n  | ((\n      data: Pick<ItemKeySlot<any>, 'item' | 'index' | 'internalItem'>,\n    ) => Record<string, any>)\n",
    "description": "An object of additional props to be passed to each `<tr>` in the table body. Also accepts a function that will be called for each row."
  },
  "VDataTable/hide-default-body": {
    "type": "boolean\n",
    "description": "Hides the default body."
  },
  "VDataTable/hide-default-footer": {
    "type": "boolean\n",
    "description": "Hides the default footer."
  },
  "VDataTable/hide-default-header": {
    "type": "boolean\n",
    "description": "Hides the default header."
  },
  "VDataTable/fixed-header": {
    "type": "boolean\n",
    "description": "Fixed header to top of table."
  },
  "VDataTable/sort-asc-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for ascending sort button."
  },
  "VDataTable/sort-desc-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for descending sort button."
  },
  "VDataTable/fixed-footer": {
    "type": "boolean\n",
    "description": "Use the fixed-footer prop together with the height prop to fix the footer to the bottom of the table."
  },
  "VDataTable/hover": {
    "type": "boolean\n",
    "description": "Adds a hover effects to a table rows."
  },
  "VDataTable/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Previous icon."
  },
  "VDataTable/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Next icon."
  },
  "VDataTable/first-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "First icon."
  },
  "VDataTable/last-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Last icon."
  },
  "VDataTable/items-per-page-text": {
    "type": "string\n",
    "description": "Text for items-per-page dropdown."
  },
  "VDataTable/page-text": {
    "type": "string\n",
    "description": "Label for page number."
  },
  "VDataTable/first-page-label": {
    "type": "string\n",
    "description": "Label for first page."
  },
  "VDataTable/prev-page-label": {
    "type": "string\n",
    "description": "Label for previous page."
  },
  "VDataTable/next-page-label": {
    "type": "string\n",
    "description": "Label for next page."
  },
  "VDataTable/last-page-label": {
    "type": "string\n",
    "description": "Label for last page."
  },
  "VDataTable/items-per-page-options": {
    "type": "(number | { title: string; value: number })[]\n",
    "description": "Array of options to show in the items-per-page dropdown."
  },
  "VDataTable/show-current-page": {
    "type": "boolean\n",
    "description": "Show current page number between prev/next icons."
  },
  "VDataTableFooter/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Previous icon."
  },
  "VDataTableFooter/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Next icon."
  },
  "VDataTableFooter/first-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "First icon."
  },
  "VDataTableFooter/last-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Last icon."
  },
  "VDataTableFooter/items-per-page-text": {
    "type": "string\n",
    "description": "Text for items-per-page dropdown."
  },
  "VDataTableFooter/page-text": {
    "type": "string\n",
    "description": "Label for page number."
  },
  "VDataTableFooter/first-page-label": {
    "type": "string\n",
    "description": "Label for first page."
  },
  "VDataTableFooter/prev-page-label": {
    "type": "string\n",
    "description": "Label for previous page."
  },
  "VDataTableFooter/next-page-label": {
    "type": "string\n",
    "description": "Label for next page."
  },
  "VDataTableFooter/last-page-label": {
    "type": "string\n",
    "description": "Label for last page."
  },
  "VDataTableFooter/items-per-page-options": {
    "type": "(number | { title: string; value: number })[]\n",
    "description": "Array of options to show in the items-per-page dropdown."
  },
  "VDataTableFooter/show-current-page": {
    "type": "boolean\n",
    "description": "Show current page number between prev/next icons."
  },
  "VDataTableHeaders/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VDataTableHeaders/sticky": {
    "type": "boolean\n",
    "description": "Deprecated, use `fixed-header` instead."
  },
  "VDataTableHeaders/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDataTableHeaders/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VDataTableHeaders/multi-sort": {
    "type": "boolean\n",
    "description": "Sort on multiple columns at the same time."
  },
  "VDataTableHeaders/header-props": {
    "type": "unknown\n",
    "description": "Additional props to be be passed to the default header"
  },
  "VDataTableHeaders/disable-sort": {
    "type": "boolean\n",
    "description": "Toggles rendering of sort button."
  },
  "VDataTableHeaders/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VDataTableHeaders/fixed-header": {
    "type": "boolean\n",
    "description": "Sticks the header to the top of the table."
  },
  "VDataTableHeaders/sort-asc-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for ascending sort button."
  },
  "VDataTableHeaders/sort-desc-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for descending sort button."
  },
  "VDataTableRow/item": {
    "type": "unknown\n",
    "description": "Data (key, index and column values) of the displayed item."
  },
  "VDataTableRow/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VDataTableRow/cell-props": {
    "type": "  | Record<string, any>\n  | ((\n      data: Pick<\n        ItemKeySlot<unknown>,\n        'value' | 'item' | 'index' | 'internalItem' | 'column'\n      >,\n    ) => Record<string, any>)\n",
    "description": "Props to be applied to the cell."
  },
  "VDataTableRow/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VDataTableRow/index": {
    "type": "number\n",
    "description": "Row index."
  },
  "VDataTableRows/items": {
    "type": "(<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/types.ts#L46-L52\" target=\"_blank\">DataTableItem</a> | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/composables/group.ts#L18-L25\" target=\"_blank\">Group</a>)[]\n",
    "description": "An array of strings or objects used for automatically generating children components."
  },
  "VDataTableRows/loading": {
    "type": "string | boolean\n",
    "description": "Displays `loading` slot if set to `true`"
  },
  "VDataTableRows/hide-no-data": {
    "type": "boolean\n",
    "description": "Hides the menu when there are no options to show.  Useful for preventing the menu from opening before results are fetched asynchronously.  Also has the effect of opening the menu when the `items` array changes if not already open."
  },
  "VDataTableRows/no-data-text": {
    "type": "string\n",
    "description": "Text shown when no items are provided to the component."
  },
  "VDataTableRows/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VDataTableRows/cell-props": {
    "type": "  | Record<string, any>\n  | ((\n      data: Pick<\n        ItemKeySlot<any>,\n        'value' | 'item' | 'index' | 'internalItem' | 'column'\n      >,\n    ) => Record<string, any>)\n",
    "description": "An object of additional props to be passed to each `<td>` in the table body. Also accepts a function that will be called for each cell. If the same prop is defined both here and in `cellProps` in a headers object, the value from the headers object will be used."
  },
  "VDataTableRows/loading-text": {
    "type": "string\n",
    "description": "Text shown when the data is loading."
  },
  "VDataTableRows/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VDataTableRows/row-props": {
    "type": "  | Record<string, any>\n  | ((\n      data: Pick<ItemKeySlot<any>, 'item' | 'index' | 'internalItem'>,\n    ) => Record<string, any>)\n",
    "description": "An object of additional props to be passed to each `<tr>` in the table body. Also accepts a function that will be called for each row."
  },
  "VDataTableServer/search": {
    "type": "string\n",
    "description": "Text input used to filter items."
  },
  "VDataTableServer/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VDataTableServer/height": {
    "type": "string | number\n",
    "description": "Use the height prop to set the height of the table."
  },
  "VDataTableServer/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VDataTableServer/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VDataTableServer/items": {
    "type": "any[]\n",
    "description": "An array of strings or objects used for automatically generating children components."
  },
  "VDataTableServer/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VDataTableServer/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VDataTableServer/sticky": {
    "type": "boolean\n",
    "description": "Deprecated, use `fixed-header` instead."
  },
  "VDataTableServer/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDataTableServer/hide-no-data": {
    "type": "boolean\n",
    "description": "Hides the menu when there are no options to show.  Useful for preventing the menu from opening before results are fetched asynchronously.  Also has the effect of opening the menu when the `items` array changes if not already open."
  },
  "VDataTableServer/select-strategy": {
    "type": "'single' | 'page' | 'all'\n",
    "description": "Defines the strategy of selecting items in the list. Possible values are: 'single' (only one item can be selected at a time), 'page' ('Select all' button will select only items on the current page), 'all' ('Select all' button will select all items in the list)."
  },
  "VDataTableServer/item-value": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VDataTableServer/return-object": {
    "type": "boolean\n",
    "description": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**."
  },
  "VDataTableServer/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VDataTableServer/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VDataTableServer/no-data-text": {
    "type": "string\n",
    "description": "Text shown when no items are provided to the component."
  },
  "VDataTableServer/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VDataTableServer/item-selectable": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that indicates whether the item is selectable."
  },
  "VDataTableServer/show-select": {
    "type": "boolean\n",
    "description": "Shows the column with checkboxes for selecting items in the list."
  },
  "VDataTableServer/page": {
    "type": "string | number\n",
    "description": "The current displayed page number (1-indexed)."
  },
  "VDataTableServer/sort-by": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/composables/sort.ts#L30-L30\" target=\"_blank\">SortItem</a>[]\n",
    "description": "Array of column keys and sort orders that determines the sort order of the table."
  },
  "VDataTableServer/multi-sort": {
    "type": "boolean\n",
    "description": "Sort on multiple columns at the same time."
  },
  "VDataTableServer/must-sort": {
    "type": "boolean\n",
    "description": "Forces sorting on the column(s)."
  },
  "VDataTableServer/custom-key-sort": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customSort` is skipped for columns with `customKeySort` specified."
  },
  "VDataTableServer/items-per-page": {
    "type": "string | number\n",
    "description": "The number of items to display on each page."
  },
  "VDataTableServer/expand-on-click": {
    "type": "boolean\n",
    "description": "Expands item when the row is clicked."
  },
  "VDataTableServer/show-expand": {
    "type": "boolean\n",
    "description": "Shows the expand icon."
  },
  "VDataTableServer/expanded": {
    "type": "string[]\n",
    "description": "Whether the item is expanded or not."
  },
  "VDataTableServer/group-by": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/composables/sort.ts#L30-L30\" target=\"_blank\">SortItem</a>[]\n",
    "description": "Defines the grouping of the table items."
  },
  "VDataTableServer/header-props": {
    "type": "unknown\n",
    "description": "Pass props to the default header. See [`v-data-table-server` API](/api/v-data-table-server) for more information."
  },
  "VDataTableServer/cell-props": {
    "type": "  | Record<string, any>\n  | ((\n      data: Pick<\n        ItemKeySlot<any>,\n        'value' | 'item' | 'index' | 'internalItem' | 'column'\n      >,\n    ) => Record<string, any>)\n",
    "description": "An object of additional props to be passed to each `<td>` in the table body. Also accepts a function that will be called for each cell. If the same prop is defined both here and in `cellProps` in a headers object, the value from the headers object will be used."
  },
  "VDataTableServer/items-length": {
    "type": "string | number\n",
    "description": "Number of all items."
  },
  "VDataTableServer/disable-sort": {
    "type": "boolean\n",
    "description": "Toggles rendering of sort button."
  },
  "VDataTableServer/headers": {
    "type": "{\n  readonly key?:\n    | (string & {})\n    | 'data-table-group'\n    | 'data-table-select'\n    | 'data-table-expand'\n    | undefined\n  readonly value?: SelectItemKey<any>\n  readonly title?: string | undefined\n  readonly fixed?: boolean | undefined\n  readonly align?: 'start' | 'end' | 'center' | undefined\n  readonly width?: string | number | undefined\n  readonly minWidth?: string | number | undefined\n  readonly maxWidth?: string | number | undefined\n  readonly nowrap?: boolean | undefined\n  readonly headerProps?: { readonly [x: string]: any } | undefined\n  readonly cellProps?:\n    | { readonly [x: string]: any }\n    | HeaderCellPropsFunction\n    | undefined\n  readonly sortable?: boolean | undefined\n  readonly sort?: DataTableCompareFunction<any> | undefined\n  readonly sortRaw?: DataTableCompareFunction<any> | undefined\n  readonly filter?: FilterFunction | undefined\n  readonly children?: readonly any[] | undefined\n}[]\n",
    "description": "An array of objects that each describe a header column."
  },
  "VDataTableServer/loading-text": {
    "type": "string\n",
    "description": "Text shown when the data is loading."
  },
  "VDataTableServer/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VDataTableServer/row-props": {
    "type": "  | Record<string, any>\n  | ((\n      data: Pick<ItemKeySlot<any>, 'item' | 'index' | 'internalItem'>,\n    ) => Record<string, any>)\n",
    "description": "An object of additional props to be passed to each `<tr>` in the table body. Also accepts a function that will be called for each row."
  },
  "VDataTableServer/hide-default-body": {
    "type": "boolean\n",
    "description": "Hides the default body."
  },
  "VDataTableServer/hide-default-footer": {
    "type": "boolean\n",
    "description": "Hides the default footer."
  },
  "VDataTableServer/hide-default-header": {
    "type": "boolean\n",
    "description": "Hides the default header."
  },
  "VDataTableServer/fixed-header": {
    "type": "boolean\n",
    "description": "Use the fixed-header prop together with the height prop to fix the header to the top of the table."
  },
  "VDataTableServer/sort-asc-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for ascending sort button."
  },
  "VDataTableServer/sort-desc-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for descending sort button."
  },
  "VDataTableServer/fixed-footer": {
    "type": "boolean\n",
    "description": "Use the fixed-footer prop together with the height prop to fix the footer to the bottom of the table."
  },
  "VDataTableServer/hover": {
    "type": "boolean\n",
    "description": "Will add a hover effect to a table's row when the mouse is over it."
  },
  "VDataTableServer/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Previous icon."
  },
  "VDataTableServer/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Next icon."
  },
  "VDataTableServer/first-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "First icon."
  },
  "VDataTableServer/last-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Last icon."
  },
  "VDataTableServer/items-per-page-text": {
    "type": "string\n",
    "description": "Text for items-per-page dropdown."
  },
  "VDataTableServer/page-text": {
    "type": "string\n",
    "description": "Label for page number."
  },
  "VDataTableServer/first-page-label": {
    "type": "string\n",
    "description": "Label for first page."
  },
  "VDataTableServer/prev-page-label": {
    "type": "string\n",
    "description": "Label for previous page."
  },
  "VDataTableServer/next-page-label": {
    "type": "string\n",
    "description": "Label for next page."
  },
  "VDataTableServer/last-page-label": {
    "type": "string\n",
    "description": "Label for last page."
  },
  "VDataTableServer/items-per-page-options": {
    "type": "(number | { title: string; value: number })[]\n",
    "description": "Array of options to show in the items-per-page dropdown."
  },
  "VDataTableServer/show-current-page": {
    "type": "boolean\n",
    "description": "Show current page number between prev/next icons."
  },
  "VDataTableVirtual/search": {
    "type": "string\n",
    "description": "Text input used to filter items."
  },
  "VDataTableVirtual/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VDataTableVirtual/height": {
    "type": "string | number\n",
    "description": "Use the height prop to set the height of the table."
  },
  "VDataTableVirtual/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VDataTableVirtual/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VDataTableVirtual/items": {
    "type": "any[]\n",
    "description": "An array of strings or objects used for automatically generating children components."
  },
  "VDataTableVirtual/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VDataTableVirtual/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VDataTableVirtual/sticky": {
    "type": "boolean\n",
    "description": "Deprecated, use `fixed-header` instead."
  },
  "VDataTableVirtual/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDataTableVirtual/filter-mode": {
    "type": "'every' | 'some' | 'union' | 'intersection'\n",
    "description": "Controls how the results of `customFilter` and `customKeyFilter` are combined. All modes only apply `customFilter` to columns not specified in `customKeyFilter`.\n\n- **some**: There is at least one match from either the custom filter or the custom key filter.\n- **every**: All columns match either the custom filter or the custom key filter.\n- **union**: There is at least one match from the custom filter, or all columns match the custom key filters.\n- **intersection**: There is at least one match from the custom filter, and all columns match the custom key filters."
  },
  "VDataTableVirtual/no-filter": {
    "type": "boolean\n",
    "description": "Disables all item filtering."
  },
  "VDataTableVirtual/custom-filter": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/filter.tsx#L22-L22\" target=\"_blank\">FilterFunction</a>\n",
    "description": "Function used to filter items, called for each filterable key on each item in the list. The first argument is the filterable value from the item, the second is the search term, and the third is the internal item object. The function should return true if the item should be included in the filtered list, or the index of the match in the value if it should be included with the result highlighted."
  },
  "VDataTableVirtual/custom-key-filter": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customFilter` is skipped for columns with `customKeyFilter` specified."
  },
  "VDataTableVirtual/filter-keys": {
    "type": "string | string[]\n",
    "description": "Array of specific keys to filter on the item."
  },
  "VDataTableVirtual/hide-no-data": {
    "type": "boolean\n",
    "description": "Hides the menu when there are no options to show.  Useful for preventing the menu from opening before results are fetched asynchronously.  Also has the effect of opening the menu when the `items` array changes if not already open."
  },
  "VDataTableVirtual/select-strategy": {
    "type": "'single' | 'page' | 'all'\n",
    "description": "Defines the strategy of selecting items in the list. Possible values are: 'single' (only one item can be selected at a time), 'page' ('Select all' button will select only items on the current page), 'all' ('Select all' button will select all items in the list)."
  },
  "VDataTableVirtual/item-value": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VDataTableVirtual/return-object": {
    "type": "boolean\n",
    "description": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**."
  },
  "VDataTableVirtual/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VDataTableVirtual/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VDataTableVirtual/no-data-text": {
    "type": "string\n",
    "description": "Text shown when no items are provided to the component."
  },
  "VDataTableVirtual/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VDataTableVirtual/item-selectable": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that indicates whether the item is selectable."
  },
  "VDataTableVirtual/show-select": {
    "type": "boolean\n",
    "description": "Shows the column with checkboxes for selecting items in the list."
  },
  "VDataTableVirtual/sort-by": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/composables/sort.ts#L30-L30\" target=\"_blank\">SortItem</a>[]\n",
    "description": "Array of column keys and sort orders that determines the sort order of the table."
  },
  "VDataTableVirtual/multi-sort": {
    "type": "boolean\n",
    "description": "Sort on multiple columns at the same time."
  },
  "VDataTableVirtual/must-sort": {
    "type": "boolean\n",
    "description": "Forces sorting on the column(s)."
  },
  "VDataTableVirtual/custom-key-sort": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customSort` is skipped for columns with `customKeySort` specified."
  },
  "VDataTableVirtual/expand-on-click": {
    "type": "boolean\n",
    "description": "Expands item when the row is clicked."
  },
  "VDataTableVirtual/show-expand": {
    "type": "boolean\n",
    "description": "Shows the expand icon."
  },
  "VDataTableVirtual/expanded": {
    "type": "string[]\n",
    "description": "Whether the item is expanded or not."
  },
  "VDataTableVirtual/group-by": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VDataTable/composables/sort.ts#L30-L30\" target=\"_blank\">SortItem</a>[]\n",
    "description": "Defines the grouping of the table items."
  },
  "VDataTableVirtual/header-props": {
    "type": "unknown\n",
    "description": "Pass props to the default header."
  },
  "VDataTableVirtual/cell-props": {
    "type": "  | Record<string, any>\n  | ((\n      data: Pick<\n        ItemKeySlot<any>,\n        'value' | 'item' | 'index' | 'internalItem' | 'column'\n      >,\n    ) => Record<string, any>)\n",
    "description": "An object of additional props to be passed to each `<td>` in the table body. Also accepts a function that will be called for each cell. If the same prop is defined both here and in `cellProps` in a headers object, the value from the headers object will be used."
  },
  "VDataTableVirtual/disable-sort": {
    "type": "boolean\n",
    "description": "Toggles rendering of sort button."
  },
  "VDataTableVirtual/headers": {
    "type": "{\n  readonly key?:\n    | (string & {})\n    | 'data-table-group'\n    | 'data-table-select'\n    | 'data-table-expand'\n    | undefined\n  readonly value?: SelectItemKey<any>\n  readonly title?: string | undefined\n  readonly fixed?: boolean | undefined\n  readonly align?: 'start' | 'end' | 'center' | undefined\n  readonly width?: string | number | undefined\n  readonly minWidth?: string | number | undefined\n  readonly maxWidth?: string | number | undefined\n  readonly nowrap?: boolean | undefined\n  readonly headerProps?: { readonly [x: string]: any } | undefined\n  readonly cellProps?:\n    | { readonly [x: string]: any }\n    | HeaderCellPropsFunction\n    | undefined\n  readonly sortable?: boolean | undefined\n  readonly sort?: DataTableCompareFunction<any> | undefined\n  readonly sortRaw?: DataTableCompareFunction<any> | undefined\n  readonly filter?: FilterFunction | undefined\n  readonly children?: readonly any[] | undefined\n}[]\n",
    "description": "An array of objects that each describe a header column."
  },
  "VDataTableVirtual/loading-text": {
    "type": "string\n",
    "description": "Text shown when the data is loading."
  },
  "VDataTableVirtual/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VDataTableVirtual/row-props": {
    "type": "  | Record<string, any>\n  | ((\n      data: Pick<ItemKeySlot<any>, 'item' | 'index' | 'internalItem'>,\n    ) => Record<string, any>)\n",
    "description": "An object of additional props to be passed to each `<tr>` in the table body. Also accepts a function that will be called for each row."
  },
  "VDataTableVirtual/hide-default-body": {
    "type": "boolean\n",
    "description": "Hides the default body."
  },
  "VDataTableVirtual/hide-default-header": {
    "type": "boolean\n",
    "description": "Hides the default header."
  },
  "VDataTableVirtual/fixed-header": {
    "type": "boolean\n",
    "description": "Sticks the header to the top of the table."
  },
  "VDataTableVirtual/sort-asc-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for ascending sort button."
  },
  "VDataTableVirtual/sort-desc-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for descending sort button."
  },
  "VDataTableVirtual/fixed-footer": {
    "type": "boolean\n",
    "description": "Use the fixed-footer prop together with the height prop to fix the footer to the bottom of the table."
  },
  "VDataTableVirtual/hover": {
    "type": "boolean\n",
    "description": "Will add a hover effect to a table's row when the mouse is over it."
  },
  "VDataTableVirtual/item-height": {
    "type": "string | number\n",
    "description": "Height in pixels of each item to display."
  },
  "VDataTableVirtual/item-key": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "The property on each item that is used as a unique key."
  },
  "VDateInput/flat": {
    "type": "boolean\n",
    "description": "Removes box shadow when using a variant with elevation."
  },
  "VDateInput/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VDateInput/type": {
    "type": "string\n",
    "description": "Sets input type."
  },
  "VDateInput/reverse": {
    "type": "boolean\n",
    "description": "Reverses the orientation."
  },
  "VDateInput/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VDateInput/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VDateInput/header": {
    "type": "string\n",
    "description": "Text shown when no **display-date** is set."
  },
  "VDateInput/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VDateInput/menu": {
    "type": "boolean\n",
    "description": "Renders with the menu open by default."
  },
  "VDateInput/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VDateInput/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VDateInput/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VDateInput/max": {
    "type": "unknown\n",
    "description": "Maximum allowed date/month (ISO 8601 format)."
  },
  "VDateInput/min": {
    "type": "unknown\n",
    "description": "Minimum allowed date/month (ISO 8601 format)."
  },
  "VDateInput/multiple": {
    "type": "number | boolean | (string & {}) | 'range'\n",
    "description": "Allow the selection of multiple dates. The **range** value selects all dates between two selections."
  },
  "VDateInput/placeholder": {
    "type": "string\n",
    "description": "Sets the input’s placeholder text."
  },
  "VDateInput/width": {
    "type": "string | number\n",
    "description": "Width of the picker."
  },
  "VDateInput/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VDateInput/prefix": {
    "type": "string\n",
    "description": "Displays prefix text."
  },
  "VDateInput/role": {
    "type": "string\n",
    "description": "The role attribute applied to the input."
  },
  "VDateInput/autofocus": {
    "type": "boolean\n",
    "description": "Enables autofocus."
  },
  "VDateInput/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VDateInput/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VDateInput/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VDateInput/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the outside the component's input, uses the same syntax as `v-icon`."
  },
  "VDateInput/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VDateInput/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VDateInput/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VDateInput/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VDateInput/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VDateInput/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VDateInput/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VDateInput/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VDateInput/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VDateInput/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VDateInput/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VDateInput/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the date picker's location. Can combine by using a space separated string."
  },
  "VDateInput/position": {
    "type": "'fixed' | 'relative' | 'static' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VDateInput/rounded": {
    "type": "string | number | boolean\n",
    "description": "Adds a border radius to the input."
  },
  "VDateInput/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VDateInput/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDateInput/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VDateInput/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDateInput/model-value": {
    "type": "any\n",
    "description": "Represents the committed v-model value"
  },
  "VDateInput/transition": {
    "type": "string\n",
    "description": "The transition used when changing months into the future"
  },
  "VDateInput/counter": {
    "type": "string | number | boolean\n",
    "description": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation."
  },
  "VDateInput/persistent-placeholder": {
    "type": "boolean\n",
    "description": "Forces placeholder to always be visible."
  },
  "VDateInput/persistent-counter": {
    "type": "boolean\n",
    "description": "Forces counter to always be visible."
  },
  "VDateInput/suffix": {
    "type": "string\n",
    "description": "Displays suffix text."
  },
  "VDateInput/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VDateInput/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VDateInput/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VDateInput/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VDateInput/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VDateInput/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VDateInput/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VDateInput/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VDateInput/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VDateInput/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VDateInput/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VDateInput/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VDateInput/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VDateInput/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VDateInput/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VDateInput/append-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **append-inner** slot."
  },
  "VDateInput/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VDateInput/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when the **clearable** prop is set to true."
  },
  "VDateInput/dirty": {
    "type": "boolean\n",
    "description": "Manually apply the dirty state styling."
  },
  "VDateInput/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VDateInput/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
  },
  "VDateInput/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VDateInput/counter-value": {
    "type": "number | ((value: any) => number)\n",
    "description": "Function returns the counter display text."
  },
  "VDateInput/model-modifiers": {
    "type": "unknown\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VDateInput/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VDateInput/divided": {
    "type": "boolean\n",
    "description": "Adds a divider between the header and controls."
  },
  "VDateInput/landscape": {
    "type": "boolean\n",
    "description": "Changes the picker to landscape mode."
  },
  "VDateInput/hide-header": {
    "type": "boolean\n",
    "description": "Hides the header."
  },
  "VDateInput/cancel-text": {
    "type": "string\n",
    "description": "Text for the cancel button"
  },
  "VDateInput/ok-text": {
    "type": "string\n",
    "description": "Text for the ok button"
  },
  "VDateInput/hide-actions": {
    "type": "boolean\n",
    "description": "Hide the Cancel and OK buttons, and automatically update the value when a date is selected."
  },
  "VDateInput/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VDateInput/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Sets the icon for previous month/year button."
  },
  "VDateInput/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Sets the icon for next month/year button."
  },
  "VDateInput/display-format": {
    "type": "string | Function\n",
    "description": "The format of the date that is displayed in the input. Can use any format [here](/features/dates/#format-options) or a custom function."
  },
  "VDateInput/update-on": {
    "type": "('blur' | 'enter')[]\n",
    "description": "Specifies when the text input should update the model value. If empty, the text field will go into read-only state."
  },
  "VDateInput/input-format": {
    "type": "string\n",
    "description": "Format for manual date input. Use yyyy, mm, dd with separators '.', '-', '/' (e.g. 'yyyy-mm-dd', 'dd/mm/yyyy')."
  },
  "VDateInput/header-color": {
    "type": "string\n",
    "description": "Allows you to set a different color for the header when used in conjunction with the `color` prop."
  },
  "VDateInput/control-height": {
    "type": "string | number\n",
    "description": "Sets the height of the controls."
  },
  "VDateInput/mode-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon displayed next to the current month and year, toggles year selection when clicked."
  },
  "VDateInput/view-mode": {
    "type": "'month' | 'months' | 'year'\n",
    "description": "Determines which picker in the date or month picker is being displayed. Allowed values: `'month'`, `'months'`, `'year'`."
  },
  "VDateInput/month": {
    "type": "string | number\n",
    "description": "Sets the month."
  },
  "VDateInput/year": {
    "type": "number\n",
    "description": "Sets the year."
  },
  "VDateInput/hide-weekdays": {
    "type": "boolean\n",
    "description": "Hides the weekdays."
  },
  "VDateInput/show-week": {
    "type": "boolean\n",
    "description": "Toggles visibility of the week numbers in the body of the calendar."
  },
  "VDateInput/reverse-transition": {
    "type": "string\n",
    "description": "The transition used when changing months into the past"
  },
  "VDateInput/show-adjacent-months": {
    "type": "boolean\n",
    "description": "Toggles visibility of days from previous and next months."
  },
  "VDateInput/weekdays": {
    "type": "(0 | 1 | 2 | 3 | 4 | 5 | 6)[]\n",
    "description": "Array of weekdays."
  },
  "VDateInput/weeks-in-month": {
    "type": "'static' | 'dynamic'\n",
    "description": "A dynamic number of weeks in a month will grow and shrink depending on how many days are in the month. A static number always shows 7 weeks."
  },
  "VDateInput/first-day-of-week": {
    "type": "string | number\n",
    "description": "Sets the first day of the week, starting with 0 for Sunday."
  },
  "VDateInput/allowed-dates": {
    "type": "unknown[] | ((date: unknown) => boolean)\n",
    "description": "Restricts which dates can be selected."
  },
  "VDatePicker/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VDatePicker/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VDatePicker/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VDatePicker/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VDatePicker/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VDatePicker/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VDatePicker/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VDatePicker/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VDatePicker/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VDatePicker/width": {
    "type": "string | number\n",
    "description": "Width of the picker."
  },
  "VDatePicker/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VDatePicker/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VDatePicker/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VDatePicker/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VDatePicker/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VDatePicker/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VDatePicker/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VDatePicker/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDatePicker/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VDatePicker/max": {
    "type": "unknown\n",
    "description": "Maximum allowed date/month (ISO 8601 format)."
  },
  "VDatePicker/min": {
    "type": "unknown\n",
    "description": "Minimum allowed date/month (ISO 8601 format)."
  },
  "VDatePicker/multiple": {
    "type": "number | boolean | (string & {}) | 'range'\n",
    "description": "Allow the selection of multiple dates. The **range** value selects all dates between two selections."
  },
  "VDatePicker/header": {
    "type": "string\n",
    "description": "Text shown when no **display-date** is set."
  },
  "VDatePicker/transition": {
    "type": "string\n",
    "description": "The transition used when changing months into the future"
  },
  "VDatePicker/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDatePicker/active": {
    "type": "string | string[]\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VDatePicker/divided": {
    "type": "boolean\n",
    "description": "Adds a divider between the header and controls."
  },
  "VDatePicker/hide-header": {
    "type": "boolean\n",
    "description": "Hides the header."
  },
  "VDatePicker/month": {
    "type": "string | number\n",
    "description": "Sets the month."
  },
  "VDatePicker/show-adjacent-months": {
    "type": "boolean\n",
    "description": "Toggles visibility of days from previous and next months."
  },
  "VDatePicker/year": {
    "type": "number\n",
    "description": "Sets the year."
  },
  "VDatePicker/weekdays": {
    "type": "(0 | 1 | 2 | 4 | 5 | 6 | 3)[]\n",
    "description": "Array of weekdays."
  },
  "VDatePicker/weeks-in-month": {
    "type": "'static' | 'dynamic'\n",
    "description": "A dynamic number of weeks in a month will grow and shrink depending on how many days are in the month. A static number always shows 7 weeks."
  },
  "VDatePicker/first-day-of-week": {
    "type": "string | number\n",
    "description": "Sets the first day of the week, starting with 0 for Sunday."
  },
  "VDatePicker/allowed-dates": {
    "type": "unknown[] | ((date: unknown) => boolean)\n",
    "description": "Restricts which dates can be selected."
  },
  "VDatePicker/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Sets the icon for next month/year button."
  },
  "VDatePicker/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Sets the icon for previous month/year button."
  },
  "VDatePicker/view-mode": {
    "type": "'month' | 'year' | 'months'\n",
    "description": "Determines which picker in the date or month picker is being displayed. Allowed values: `'month'`, `'months'`, `'year'`."
  },
  "VDatePicker/reverse-transition": {
    "type": "string\n",
    "description": "The transition used when changing months into the past"
  },
  "VDatePicker/landscape": {
    "type": "boolean\n",
    "description": "Changes the picker to landscape mode."
  },
  "VDatePicker/header-color": {
    "type": "string\n",
    "description": "Allows you to set a different color for the header when used in conjunction with the `color` prop."
  },
  "VDatePicker/control-height": {
    "type": "string | number\n",
    "description": "Sets the height of the controls."
  },
  "VDatePicker/mode-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon displayed next to the current month and year, toggles year selection when clicked."
  },
  "VDatePicker/hide-weekdays": {
    "type": "boolean\n",
    "description": "Hides the weekdays."
  },
  "VDatePicker/show-week": {
    "type": "boolean\n",
    "description": "Toggles visibility of the week numbers in the body of the calendar."
  },
  "VDatePickerControls/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VDatePickerControls/disabled": {
    "type": "string | boolean | string[]\n",
    "description": "Removes the ability to click or target the component."
  },
  "VDatePickerControls/active": {
    "type": "string | string[]\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VDatePickerControls/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for the next button."
  },
  "VDatePickerControls/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for the previous button."
  },
  "VDatePickerControls/view-mode": {
    "type": "'month' | 'year' | 'months'\n",
    "description": "Sets the view mode of the date picker."
  },
  "VDatePickerControls/control-height": {
    "type": "string | number\n",
    "description": "Sets the height of the controls."
  },
  "VDatePickerControls/mode-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for the mode button."
  },
  "VDatePickerHeader/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDatePickerHeader/header": {
    "type": "string\n",
    "description": "Sets the header content."
  },
  "VDatePickerHeader/transition": {
    "type": "string\n",
    "description": "Sets the transition when the header changes."
  },
  "VDatePickerHeader/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VDatePickerMonth/model-value": {
    "type": "unknown[]\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VDatePickerMonth/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDatePickerMonth/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VDatePickerMonth/max": {
    "type": "unknown\n",
    "description": "Sets the maximum date of the month."
  },
  "VDatePickerMonth/min": {
    "type": "unknown\n",
    "description": "Sets the minimum date of the month."
  },
  "VDatePickerMonth/multiple": {
    "type": "number | boolean | (string & {}) | 'range'\n",
    "description": "Sets the multiple of the month."
  },
  "VDatePickerMonth/transition": {
    "type": "string\n",
    "description": "The transition used when changing months into the future"
  },
  "VDatePickerMonth/month": {
    "type": "string | number\n",
    "description": "Sets the month."
  },
  "VDatePickerMonth/show-adjacent-months": {
    "type": "boolean\n",
    "description": "Show adjacent months."
  },
  "VDatePickerMonth/year": {
    "type": "string | number\n",
    "description": "Sets the year."
  },
  "VDatePickerMonth/weekdays": {
    "type": "(0 | 1 | 2 | 4 | 5 | 6 | 3)[]\n",
    "description": "Sets the weekdays of the month."
  },
  "VDatePickerMonth/weeks-in-month": {
    "type": "'static' | 'dynamic'\n",
    "description": "A dynamic number of weeks in a month will grow and shrink depending on how many days are in the month. A static number always shows 7 weeks."
  },
  "VDatePickerMonth/first-day-of-week": {
    "type": "string | number\n",
    "description": "Sets the first day of the week, starting with 0 for Sunday."
  },
  "VDatePickerMonth/allowed-dates": {
    "type": "unknown[] | ((date: unknown) => boolean)\n",
    "description": "Sets the allowed dates of the month."
  },
  "VDatePickerMonth/reverse-transition": {
    "type": "string\n",
    "description": "The transition used when changing months into the past"
  },
  "VDatePickerMonth/hide-weekdays": {
    "type": "boolean\n",
    "description": "Hide the days of the week letters."
  },
  "VDatePickerMonth/show-week": {
    "type": "boolean\n",
    "description": "Show the week number."
  },
  "VDatePickerMonths/model-value": {
    "type": "number\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VDatePickerMonths/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VDatePickerMonths/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDatePickerMonths/max": {
    "type": "unknown\n",
    "description": "Sets the maximum selectable date. Months after this date will be disabled."
  },
  "VDatePickerMonths/min": {
    "type": "unknown\n",
    "description": "Sets the minimum selectable date. Months before this date will be disabled."
  },
  "VDatePickerMonths/year": {
    "type": "number\n",
    "description": "Sets the year for the given months."
  },
  "VDatePickerYears/model-value": {
    "type": "number\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VDatePickerYears/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VDatePickerYears/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDatePickerYears/max": {
    "type": "unknown\n",
    "description": "Sets the maximum date of the month."
  },
  "VDatePickerYears/min": {
    "type": "unknown\n",
    "description": "Sets the minimum date of the month."
  },
  "VDefaultsProvider/disabled": {
    "type": "boolean\n",
    "description": "Turns off all calculations of new default values for improved performance in situations where defaults propagation isn't necessary."
  },
  "VDefaultsProvider/reset": {
    "type": "string | number\n",
    "description": "Reset the default values up the nested chain by {n} amount."
  },
  "VDefaultsProvider/root": {
    "type": "string | boolean\n",
    "description": "Force current defaults to match the application root defaults."
  },
  "VDefaultsProvider/scoped": {
    "type": "boolean\n",
    "description": "Prevents the ability for default values to be inherited from parent components."
  },
  "VDefaultsProvider/defaults": {
    "type": "{\n  global: Record<string, unknown>\n  [string]: Record<string, unknown>\n}\n",
    "description": "Specify new default prop values for components. Keep in mind that this will be merged with previously defined values."
  },
  "VDialog/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VDialog/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VDialog/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VDialog/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VDialog/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VDialog/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VDialog/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VDialog/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both.."
  },
  "VDialog/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the content element."
  },
  "VDialog/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VDialog/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VDialog/transition": {
    "type": "  | string\n  | boolean\n  | (TransitionProps & { component: Component })\n  | {\n      component: ComponentPublicInstanceConstructor<\n        CreateComponentPublicInstanceWithMixins<\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          unknown,\n          {},\n          {},\n          ComponentOptionsMixin,\n          ComponentOptionsMixin,\n          Record<string, any>,\n          PublicProps,\n          {},\n          true,\n          {},\n          SlotsType<Partial<MakeSlots<{ default: never }>>>,\n          GlobalComponents,\n          GlobalDirectives,\n          string,\n          {},\n          any,\n          ComponentProvideOptions,\n          OptionTypesType<{}, {}, {}, {}, {}, {}>,\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          {},\n          {},\n          {},\n          {}\n        >,\n        any,\n        any,\n        any,\n        ComputedOptions,\n        MethodOptions\n      > &\n        ComponentOptionsBase<\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          unknown,\n          {},\n          {},\n          ComponentOptionsMixin,\n          ComponentOptionsMixin,\n          Record<string, any>,\n          string,\n          {},\n          {},\n          string,\n          SlotsType<Partial<MakeSlots<{ default: never }>>>,\n          GlobalComponents,\n          GlobalDirectives,\n          string,\n          ComponentProvideOptions\n        > &\n        VNodeProps &\n        AllowedComponentProps &\n        ComponentCustomProps & {\n          filterProps: (props: T) => Partial<Pick<T, U>>\n        }\n    }\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VDialog/activator": {
    "type": "Element | (string & {}) | 'parent' | ComponentPublicInstance\n",
    "description": "Explicitly sets the overlay's activator."
  },
  "VDialog/fullscreen": {
    "type": "boolean\n",
    "description": "Changes layout for fullscreen display."
  },
  "VDialog/retain-focus": {
    "type": "boolean\n",
    "description": "Tab focus will return to the first child of the dialog by default. Disable this when using external tools that require focus such as TinyMCE or vue-clipboard."
  },
  "VDialog/scrollable": {
    "type": "boolean\n",
    "description": "When set to true, expects a `v-card` and a `v-card-text` component with a designated height. For more information, check out the [scrollable example](/components/dialogs#scrollable)."
  },
  "VDialog/close-on-back": {
    "type": "boolean\n",
    "description": "Closes the overlay content when the browser's back button is pressed or `$router.back()` is called, cancelling the original navigation. `persistent` overlays will cancel navigation and animate as if they were clicked outside instead of closing."
  },
  "VDialog/contained": {
    "type": "boolean\n",
    "description": "Limits the size of the component and scrim to its offset parent. Implies `absolute` and `attach`. (Note: The parent element must have position: relative.)."
  },
  "VDialog/content-class": {
    "type": "any\n",
    "description": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component."
  },
  "VDialog/content-props": {
    "type": "any\n",
    "description": "Apply custom properties to the content."
  },
  "VDialog/opacity": {
    "type": "string | number\n",
    "description": "Sets the opacity of the scrim element. Only applies if `scrim` is enabled."
  },
  "VDialog/no-click-animation": {
    "type": "boolean\n",
    "description": "Disables the bounce effect when clicking outside of a `v-dialog`'s content when using the **persistent** prop."
  },
  "VDialog/persistent": {
    "type": "boolean\n",
    "description": "Clicking outside of the element or pressing **esc** key will not deactivate it."
  },
  "VDialog/scrim": {
    "type": "string | boolean\n",
    "description": "Accepts true/false to enable background, and string to define color."
  },
  "VDialog/z-index": {
    "type": "string | number\n",
    "description": "The z-index used for the component."
  },
  "VDialog/target": {
    "type": "  | Element\n  | (string & {})\n  | 'parent'\n  | 'cursor'\n  | ComponentPublicInstance\n  | [number, number]\n",
    "description": "For locationStrategy=\"connected\", specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default."
  },
  "VDialog/activator-props": {
    "type": "unknown\n",
    "description": "Apply custom properties to the activator."
  },
  "VDialog/open-on-click": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is clicked."
  },
  "VDialog/open-on-hover": {
    "type": "boolean\n",
    "description": "Designates whether component should activate when its activator is hovered."
  },
  "VDialog/open-on-focus": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is focused."
  },
  "VDialog/close-on-content-click": {
    "type": "boolean\n",
    "description": "Closes component when you click on its content."
  },
  "VDialog/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only applies to hover and focus events."
  },
  "VDialog/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only applies to hover and focus events."
  },
  "VDialog/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VDialog/location-strategy": {
    "type": "'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n",
    "description": "A function used to specifies how the component should position relative to its activator."
  },
  "VDialog/origin": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VDialog/offset": {
    "type": "string | number | number[]\n",
    "description": "Increases distance from the target. When passed as a pair of numbers, the second value shifts anchor along the side and away from the target."
  },
  "VDialog/scroll-strategy": {
    "type": "'close' | 'none' | 'block' | 'reposition' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/scrollStrategies.ts#L17-L17\" target=\"_blank\">ScrollStrategyFunction</a>\n",
    "description": "Strategy used when the component is activate and user scrolls."
  },
  "VDialog/attach": {
    "type": "string | boolean | Element\n",
    "description": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or `true` to disable teleporting. Uses `body` by default."
  },
  "VDialogBottomTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VDialogBottomTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VDialogBottomTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VDialogBottomTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VDialogBottomTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VDialogBottomTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VDialogTopTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VDialogTopTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VDialogTopTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VDialogTopTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VDialogTopTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VDialogTopTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VDialogTransition/target": {
    "type": "HTMLElement | [number, number]\n",
    "description": "Sets the target element for the transition."
  },
  "VDivider/length": {
    "type": "string | number\n",
    "description": "Sets the dividers length. Default unit is px."
  },
  "VDivider/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VDivider/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VDivider/inset": {
    "type": "boolean\n",
    "description": "Adds indentation (72px) for **normal** dividers, reduces max height for **vertical**."
  },
  "VDivider/opacity": {
    "type": "string | number\n",
    "description": "Sets the component's opacity value"
  },
  "VDivider/vertical": {
    "type": "boolean\n",
    "description": "Displays dividers vertically."
  },
  "VDivider/thickness": {
    "type": "string | number\n",
    "description": "Sets the dividers thickness. Default unit is px."
  },
  "VEmptyState/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VEmptyState/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VEmptyState/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VEmptyState/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VEmptyState/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VEmptyState/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VEmptyState/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VEmptyState/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VEmptyState/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VEmptyState/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VEmptyState/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VEmptyState/size": {
    "type": "string | number\n",
    "description": "The size used to control the dimensions of the media element inside the component. Can be specified as a number or a string (e.g., '50%', '100px')."
  },
  "VEmptyState/image": {
    "type": "string\n",
    "description": "Apply a specific image using [v-img](/components/images/)."
  },
  "VEmptyState/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VEmptyState/href": {
    "type": "string\n",
    "description": "The URL the action button links to."
  },
  "VEmptyState/to": {
    "type": "string\n",
    "description": "The URL the action button links to."
  },
  "VEmptyState/headline": {
    "type": "string\n",
    "description": "A large headline often used for 404 pages."
  },
  "VEmptyState/action-text": {
    "type": "string\n",
    "description": "The text used for the action button."
  },
  "VEmptyState/justify": {
    "type": "'end' | 'start' | 'center'\n",
    "description": "Control the justification of the text."
  },
  "VEmptyState/text-width": {
    "type": "string | number\n",
    "description": "Sets the width of the text container."
  },
  "VExpandTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VExpandTransition/mode": {
    "type": "'default' | 'in-out' | 'out-in'\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VExpandTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VExpandXTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VExpandXTransition/mode": {
    "type": "'default' | 'in-out' | 'out-in'\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VExpandXTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VExpansionPanel/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VExpansionPanel/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VExpansionPanel/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VExpansionPanel/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VExpansionPanel/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VExpansionPanel/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VExpansionPanel/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VExpansionPanel/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VExpansionPanel/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VExpansionPanel/static": {
    "type": "boolean\n",
    "description": "Remove title size expansion when selected."
  },
  "VExpansionPanel/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VExpansionPanel/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VExpansionPanel/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VExpansionPanel/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VExpansionPanel/disabled": {
    "type": "boolean\n",
    "description": "Disables the expansion-panel content."
  },
  "VExpansionPanel/value": {
    "type": "any\n",
    "description": "Controls the opened/closed state of content."
  },
  "VExpansionPanel/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VExpansionPanel/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VExpansionPanel/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VExpansionPanel/readonly": {
    "type": "boolean\n",
    "description": "Makes the expansion panel content read only."
  },
  "VExpansionPanel/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VExpansionPanel/hide-actions": {
    "type": "boolean\n",
    "description": "Hide the expand icon in the content title."
  },
  "VExpansionPanel/expand-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a expandable state."
  },
  "VExpansionPanel/collapse-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a collapsable state."
  },
  "VExpansionPanel/focusable": {
    "type": "boolean\n",
    "description": "Makes the expansion panel content focusable."
  },
  "VExpansionPanelText/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VExpansionPanelTitle/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VExpansionPanelTitle/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VExpansionPanelTitle/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VExpansionPanelTitle/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VExpansionPanelTitle/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VExpansionPanelTitle/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VExpansionPanelTitle/static": {
    "type": "boolean\n",
    "description": "Remove title size expansion when selected."
  },
  "VExpansionPanelTitle/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VExpansionPanelTitle/readonly": {
    "type": "boolean\n",
    "description": "Makes the expansion panel content read only."
  },
  "VExpansionPanelTitle/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VExpansionPanelTitle/hide-actions": {
    "type": "boolean\n",
    "description": "Hide the expand icon in the content title."
  },
  "VExpansionPanelTitle/expand-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a expandable state."
  },
  "VExpansionPanelTitle/collapse-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a collapsable state."
  },
  "VExpansionPanelTitle/focusable": {
    "type": "boolean\n",
    "description": "Makes the expansion panel headers focusable."
  },
  "VExpansionPanels/flat": {
    "type": "boolean\n",
    "description": "Removes the expansion-panel's elevation and borders."
  },
  "VExpansionPanels/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VExpansionPanels/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VExpansionPanels/static": {
    "type": "boolean\n",
    "description": "Remove title size expansion when selected."
  },
  "VExpansionPanels/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VExpansionPanels/tile": {
    "type": "boolean\n",
    "description": "Removes the border-radius."
  },
  "VExpansionPanels/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VExpansionPanels/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VExpansionPanels/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VExpansionPanels/variant": {
    "type": "'default' | 'inset' | 'accordion' | 'popout'\n",
    "description": "Applies a distinct style to the component."
  },
  "VExpansionPanels/disabled": {
    "type": "boolean\n",
    "description": "Puts all children components into a disabled state."
  },
  "VExpansionPanels/max": {
    "type": "number\n",
    "description": "Sets a maximum number of selections that can be made."
  },
  "VExpansionPanels/multiple": {
    "type": "boolean\n",
    "description": "Allows one to select multiple items."
  },
  "VExpansionPanels/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VExpansionPanels/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VExpansionPanels/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VExpansionPanels/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VExpansionPanels/readonly": {
    "type": "boolean\n",
    "description": "Makes the entire expansion panel read only."
  },
  "VExpansionPanels/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VExpansionPanels/hide-actions": {
    "type": "boolean\n",
    "description": "Hide the expand icon in the content title."
  },
  "VExpansionPanels/expand-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a expandable state."
  },
  "VExpansionPanels/collapse-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a collapsable state."
  },
  "VExpansionPanels/focusable": {
    "type": "boolean\n",
    "description": "Makes the expansion-panel headers focusable."
  },
  "VFab/symbol": {
    "type": "any\n",
    "description": "The [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) used to hook into group functionality for components like [v-btn-toggle](/components/btn-toggle) and [v-bottom-navigation](/components/bottom-navigations/)."
  },
  "VFab/text": {
    "type": "string | number | boolean\n",
    "description": "Specify content text for the component."
  },
  "VFab/flat": {
    "type": "boolean\n",
    "description": "Removes the button box shadow. This is different than using the 'flat' variant."
  },
  "VFab/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VFab/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VFab/icon": {
    "type": "  | boolean\n  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component. The button will become _round_."
  },
  "VFab/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VFab/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VFab/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VFab/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VFab/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VFab/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VFab/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VFab/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VFab/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VFab/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "The location of the fab relative to the layout. Only works when using **app**."
  },
  "VFab/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VFab/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the component."
  },
  "VFab/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VFab/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VFab/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VFab/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VFab/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VFab/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VFab/name": {
    "type": "string\n",
    "description": "Assign a specific name for layout registration."
  },
  "VFab/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VFab/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VFab/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VFab/extended": {
    "type": "boolean\n",
    "description": "An alternate style for the FAB that expects text."
  },
  "VFab/order": {
    "type": "string | number\n",
    "description": "Adjust the order of the component in relation to its registration order."
  },
  "VFab/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VFab/stacked": {
    "type": "boolean\n",
    "description": "Displays the button as a flex-column."
  },
  "VFab/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VFab/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VFab/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VFab/offset": {
    "type": "boolean\n",
    "description": "Translates the Fab up or down, depending on if location is set to **top** or **bottom**."
  },
  "VFab/block": {
    "type": "boolean\n",
    "description": "Expands the button to 100% of available space."
  },
  "VFab/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VFab/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VFab/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VFab/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VFab/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
  },
  "VFab/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VFab/readonly": {
    "type": "boolean\n",
    "description": "Puts the button in a readonly state. Cannot be clicked or navigated to by keyboard."
  },
  "VFab/slim": {
    "type": "boolean\n",
    "description": "Reduces padding to 0 8px."
  },
  "VFab/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VFab/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VFab/app": {
    "type": "boolean\n",
    "description": "If true, attaches to the closest layout and positions according to the value of **location**."
  },
  "VFab/appear": {
    "type": "boolean\n",
    "description": "Used to control the animation of the FAB."
  },
  "VFab/layout": {
    "type": "boolean\n",
    "description": "If true, will effect layout dimensions based on size and position."
  },
  "VFabTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VFabTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VFabTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VFabTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VFabTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VFabTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VFadeTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VFadeTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VFadeTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VFadeTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VFadeTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VFadeTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VField/flat": {
    "type": "boolean\n",
    "description": "Removes box shadow when using a variant with elevation."
  },
  "VField/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VField/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VField/reverse": {
    "type": "boolean\n",
    "description": "Reverses the orientation."
  },
  "VField/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VField/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VField/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VField/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VField/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VField/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VField/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VField/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VField/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VField/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VField/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VField/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VField/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VField/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VField/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VField/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VField/append-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **append-inner** slot."
  },
  "VField/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VField/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when the **clearable** prop is set to true."
  },
  "VField/dirty": {
    "type": "boolean\n",
    "description": "Manually apply the dirty state styling."
  },
  "VField/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VField/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
  },
  "VField/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VFieldLabel/floating": {
    "type": "boolean\n",
    "description": "Elevates the label above the slotted content."
  },
  "VFileInput/flat": {
    "type": "boolean\n",
    "description": "Removes box shadow when using a variant with elevation."
  },
  "VFileInput/model-value": {
    "type": "File | File[]\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VFileInput/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VFileInput/reverse": {
    "type": "boolean\n",
    "description": "Reverses the orientation."
  },
  "VFileInput/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VFileInput/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VFileInput/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VFileInput/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VFileInput/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VFileInput/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VFileInput/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VFileInput/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VFileInput/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VFileInput/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VFileInput/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VFileInput/multiple": {
    "type": "boolean\n",
    "description": "Adds the **multiple** attribute to the input, allowing multiple file selections."
  },
  "VFileInput/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VFileInput/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VFileInput/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VFileInput/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VFileInput/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VFileInput/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VFileInput/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VFileInput/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VFileInput/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VFileInput/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VFileInput/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VFileInput/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VFileInput/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VFileInput/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VFileInput/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VFileInput/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VFileInput/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VFileInput/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VFileInput/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VFileInput/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VFileInput/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VFileInput/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VFileInput/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VFileInput/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VFileInput/counter": {
    "type": "boolean\n",
    "description": "Displays the number of selected files."
  },
  "VFileInput/append-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **append-inner** slot."
  },
  "VFileInput/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VFileInput/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when the **clearable** prop is set to true."
  },
  "VFileInput/dirty": {
    "type": "boolean\n",
    "description": "Manually apply the dirty state styling."
  },
  "VFileInput/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VFileInput/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
  },
  "VFileInput/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VFileInput/chips": {
    "type": "boolean\n",
    "description": "Changes display of selections to chips."
  },
  "VFileInput/counter-size-string": {
    "type": "string\n",
    "description": "The text displayed when using the **counter** and **show-size** props. Can also be customized globally on the [internationalization page](/customization/internationalization)."
  },
  "VFileInput/counter-string": {
    "type": "string\n",
    "description": "The text displayed when using the **counter** prop. Can also be customized globally on the [internationalization page](/customization/internationalization)."
  },
  "VFileInput/hide-input": {
    "type": "boolean\n",
    "description": "Display the icon only without the input (file names)."
  },
  "VFileInput/show-size": {
    "type": "boolean | 1000 | 1024\n",
    "description": "Sets the displayed size of selected file(s). When using **true** will default to _1000_ displaying (**kB, MB, GB**) while _1024_ will display (**KiB, MiB, GiB**)."
  },
  "VFileUpload/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VFileUpload/length": {
    "type": "string | number\n",
    "description": "Sets the dividers length. Default unit is px."
  },
  "VFileUpload/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VFileUpload/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VFileUpload/model-value": {
    "type": "File | File[]\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VFileUpload/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VFileUpload/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VFileUpload/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VFileUpload/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VFileUpload/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VFileUpload/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VFileUpload/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VFileUpload/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VFileUpload/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VFileUpload/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VFileUpload/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VFileUpload/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VFileUpload/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VFileUpload/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VFileUpload/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VFileUpload/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VFileUpload/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VFileUpload/multiple": {
    "type": "boolean\n",
    "description": "Allows multiple files to be uploaded."
  },
  "VFileUpload/opacity": {
    "type": "string | number\n",
    "description": "Sets the component's opacity value"
  },
  "VFileUpload/scrim": {
    "type": "string | boolean\n",
    "description": "Determines whether an overlay is used when hovering over the component with files. Accepts true/false to enable background, and string to define color."
  },
  "VFileUpload/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only applies to hover and focus events."
  },
  "VFileUpload/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only applies to hover and focus events."
  },
  "VFileUpload/subtitle": {
    "type": "string\n",
    "description": "Specify a subtitle text for the component."
  },
  "VFileUpload/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VFileUpload/thickness": {
    "type": "string | number\n",
    "description": "Sets the dividers thickness. Default unit is px."
  },
  "VFileUpload/show-size": {
    "type": "boolean\n",
    "description": "Shows the size of the file."
  },
  "VFileUpload/browse-text": {
    "type": "string\n",
    "description": "Text for the browse button."
  },
  "VFileUpload/divider-text": {
    "type": "string\n",
    "description": "Text in the divider."
  },
  "VFileUpload/hide-browse": {
    "type": "boolean\n",
    "description": "Hides the browse button."
  },
  "VFileUploadItem/title": {
    "type": "string | number | boolean\n",
    "description": "Generates a `v-list-item-title` component with the supplied value. Note that this overrides the native [`title`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title) attribute, that must be set with `v-bind:title.attr` instead."
  },
  "VFileUploadItem/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VFileUploadItem/link": {
    "type": "boolean\n",
    "description": "Designates that the component is a link. This is automatic when using the href or to prop."
  },
  "VFileUploadItem/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VFileUploadItem/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VFileUploadItem/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VFileUploadItem/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VFileUploadItem/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VFileUploadItem/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VFileUploadItem/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VFileUploadItem/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VFileUploadItem/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VFileUploadItem/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VFileUploadItem/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VFileUploadItem/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VFileUploadItem/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VFileUploadItem/color": {
    "type": "string\n",
    "description": "Applies specified color to the control when in an **active** state or **input-value** is **true** - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors),"
  },
  "VFileUploadItem/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VFileUploadItem/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VFileUploadItem/value": {
    "type": "any\n",
    "description": "The value used for selection. Obtained from [`v-list`](/api/v-list)'s `v-model:selected` when the item is selected."
  },
  "VFileUploadItem/lines": {
    "type": "false | 'one' | 'two' | 'three'\n",
    "description": "The line declaration specifies the minimum height of the item and can also be controlled from v-list with the same prop."
  },
  "VFileUploadItem/nav": {
    "type": "boolean\n",
    "description": "Reduces the width v-list-item takes up as well as adding a border radius."
  },
  "VFileUploadItem/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VFileUploadItem/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VFileUploadItem/active-class": {
    "type": "string\n",
    "description": "The class applied to the component when it matches the current route. Find more information about the [active-class prop](https://router.vuejs.org/api/#active-class) on the [vue-router](https://router.vuejs.org/) documentation."
  },
  "VFileUploadItem/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VFileUploadItem/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VFileUploadItem/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VFileUploadItem/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VFileUploadItem/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
  },
  "VFileUploadItem/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VFileUploadItem/slim": {
    "type": "boolean\n",
    "description": "Reduces horizontal spacing for badges, icons, tooltips, and avatars to create a more compact visual representation."
  },
  "VFileUploadItem/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VFileUploadItem/subtitle": {
    "type": "string | number | boolean\n",
    "description": "Specify a subtitle text for the component."
  },
  "VFileUploadItem/append-avatar": {
    "type": "string\n",
    "description": "Appends a [v-avatar](/components/avatars/) component after default content in the **append** slot."
  },
  "VFileUploadItem/prepend-avatar": {
    "type": "string\n",
    "description": "Prepends a [v-avatar](/components/avatars/) component in the **prepend** slot before default content."
  },
  "VFileUploadItem/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VFileUploadItem/show-size": {
    "type": "boolean\n",
    "description": "Show the size of the file"
  },
  "VFileUploadItem/file": {
    "type": "File\n",
    "description": "The file object uploaded"
  },
  "VFileUploadItem/file-icon": {
    "type": "string\n",
    "description": "The icon prepending each uploaded file. This will be a preview image if the file is an image."
  },
  "VFooter/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VFooter/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VFooter/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VFooter/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the component."
  },
  "VFooter/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VFooter/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VFooter/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VFooter/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VFooter/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VFooter/name": {
    "type": "string\n",
    "description": "Assign a specific name for layout registration."
  },
  "VFooter/order": {
    "type": "string | number\n",
    "description": "Adjust the order of the component in relation to its registration order."
  },
  "VFooter/app": {
    "type": "boolean\n",
    "description": "Determines the position of the footer. If true, the footer would be given a fixed position at the bottom of the viewport. If false, the footer is set to the bottom of the page."
  },
  "VForm/model-value": {
    "type": "boolean\n",
    "description": "The value representing the validity of the form. If the value is `null` then no validation has taken place yet, or the form has been reset. Otherwise the value will be a `boolean` that indicates if validation has passed or not."
  },
  "VForm/disabled": {
    "type": "boolean\n",
    "description": "Puts all children inputs into a disabled state."
  },
  "VForm/readonly": {
    "type": "boolean\n",
    "description": "Puts all children inputs into a readonly state."
  },
  "VForm/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Changes the events in which validation occurs."
  },
  "VForm/fast-fail": {
    "type": "boolean\n",
    "description": "Stop validation as soon as any rules fail."
  },
  "VHover/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VHover/disabled": {
    "type": "boolean\n",
    "description": "Removes hover functionality."
  },
  "VHover/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only applies to hover and focus events."
  },
  "VHover/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only applies to hover and focus events."
  },
  "VIcon/end": {
    "type": "boolean\n",
    "description": "Applies margin at the start of the component."
  },
  "VIcon/start": {
    "type": "boolean\n",
    "description": "Applies margin at the end of the component."
  },
  "VIcon/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VIcon/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VIcon/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VIcon/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VIcon/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VIcon/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VIcon/opacity": {
    "type": "string | number\n",
    "description": "Sets the component's opacity value"
  },
  "VIconBtn/text": {
    "type": "string | number | boolean\n",
    "description": "Specify content text for the component."
  },
  "VIconBtn/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VIconBtn/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VIconBtn/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VIconBtn/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VIconBtn/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VIconBtn/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VIconBtn/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VIconBtn/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VIconBtn/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VIconBtn/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VIconBtn/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VIconBtn/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VIconBtn/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component."
  },
  "VIconBtn/active": {
    "type": "boolean\n",
    "description": "When undefined (default), the component utilizes its default variant, otherwise it will use the activeVariant if active is true, or the baseVariant if active is false."
  },
  "VIconBtn/opacity": {
    "type": "string | number\n",
    "description": "Sets the component's opacity value"
  },
  "VIconBtn/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VIconBtn/readonly": {
    "type": "boolean\n",
    "description": "Puts the button in a readonly state. Cannot be clicked or navigated to by keyboard."
  },
  "VIconBtn/loading": {
    "type": "boolean\n",
    "description": "Displays circular progress bar in place of the icon."
  },
  "VIconBtn/sizes": {
    "type": "['default' | 'small' | 'x-small' | 'large' | 'x-large', number][]\n",
    "description": "An array of tuples that define the button sizes for each named size."
  },
  "VIconBtn/icon-color": {
    "type": "string\n",
    "description": "Explicit color applied to the icon."
  },
  "VIconBtn/base-variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "When active is a boolean, this variant is used when active is false."
  },
  "VIconBtn/hide-overlay": {
    "type": "boolean\n",
    "description": "Hides overlay from being displayed when active or focused."
  },
  "VIconBtn/icon-sizes": {
    "type": "['default' | 'small' | 'x-small' | 'large' | 'x-large', number][]\n",
    "description": "An array of tuples that define the icon sizes for each named size."
  },
  "VIconBtn/rotate": {
    "type": "string | number\n",
    "description": "The rotation of the icon in degrees."
  },
  "VIconBtn/active-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "When active is a boolean, this icon is used when active is true."
  },
  "VIconBtn/active-variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "When active is a boolean, this variant is used when active is true."
  },
  "VIconBtn/icon-size": {
    "type": "string | number\n",
    "description": "The specific size of the icon, can use named sizes."
  },
  "VImg/alt": {
    "type": "string\n",
    "description": "Alternate text for screen readers. Leave empty for decorative images."
  },
  "VImg/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VImg/src": {
    "type": "  | string\n  | { src: string; srcset: string; lazySrc: string; aspect: number }\n",
    "description": "The image URL. This prop is mandatory."
  },
  "VImg/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VImg/draggable": {
    "type": "boolean | 'true' | 'false'\n",
    "description": "Controls the `draggable` behavior of the image. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable)."
  },
  "VImg/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VImg/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VImg/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VImg/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VImg/position": {
    "type": "string\n",
    "description": "Applies [object-position](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) styles to the image and placeholder elements."
  },
  "VImg/absolute": {
    "type": "boolean\n",
    "description": "Applies position: absolute to the component."
  },
  "VImg/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VImg/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VImg/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VImg/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VImg/content-class": {
    "type": "any\n",
    "description": "Apply a custom class to the internal content element."
  },
  "VImg/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "The transition to use when switching from `lazy-src` to `src`. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VImg/options": {
    "type": "IntersectionObserverInit\n",
    "description": "Options that are passed to the [Intersection observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) constructor."
  },
  "VImg/cover": {
    "type": "boolean\n",
    "description": "Resizes the background image to cover the entire container."
  },
  "VImg/gradient": {
    "type": "string\n",
    "description": "The gradient to apply to the image. Only supports [linear-gradient](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient) syntax, anything else should be done with classes."
  },
  "VImg/lazy-src": {
    "type": "string\n",
    "description": "Something to show while waiting for the main image to load, typically a small base64-encoded thumbnail. Has a slight blur filter applied.  \nNOTE: This prop has no effect unless either `height` or `aspect-ratio` are provided."
  },
  "VImg/sizes": {
    "type": "string\n",
    "description": "For use with `srcset`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes)."
  },
  "VImg/srcset": {
    "type": "string\n",
    "description": "A set of alternate images to use based on device size. [Read more...](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset)."
  },
  "VImg/aspect-ratio": {
    "type": "string | number\n",
    "description": "Calculated as `width/height`, so for a 1920x1080px image this will be `1.7778`. Will be calculated automatically if omitted."
  },
  "VImg/inline": {
    "type": "boolean\n",
    "description": "Display as an inline element instead of a block, also disables flex-grow."
  },
  "VImg/crossorigin": {
    "type": "'' | 'anonymous' | 'use-credentials'\n",
    "description": "Specify that images should be fetched with CORS enabled [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#crossorigin)"
  },
  "VImg/referrerpolicy": {
    "type": "  | 'origin'\n  | 'no-referrer'\n  | 'no-referrer-when-downgrade'\n  | 'origin-when-cross-origin'\n  | 'same-origin'\n  | 'strict-origin'\n  | 'strict-origin-when-cross-origin'\n  | 'unsafe-url'\n",
    "description": "Define which referrer is sent when fetching the resource [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#referrerpolicy)"
  },
  "VInfiniteScroll/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VInfiniteScroll/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VInfiniteScroll/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VInfiniteScroll/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VInfiniteScroll/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VInfiniteScroll/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VInfiniteScroll/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VInfiniteScroll/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VInfiniteScroll/mode": {
    "type": "'intersect' | 'manual'\n",
    "description": "Specifies if content should load automatically when scrolling (**intersect**) or manually (**manual**)."
  },
  "VInfiniteScroll/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Specifies if scroller is **vertical** or **horizontal**."
  },
  "VInfiniteScroll/side": {
    "type": "'end' | 'start' | 'both'\n",
    "description": "Specifies the side where new content should appear. Either the **start**, **end**, or **both** sides."
  },
  "VInfiniteScroll/margin": {
    "type": "string | number\n",
    "description": "Value sent to the intersection observer. Will make the observer trigger earlier, by the margin (px) value supplied."
  },
  "VInfiniteScroll/load-more-text": {
    "type": "string\n",
    "description": "Text shown in default load more button, when in manual mode."
  },
  "VInfiniteScroll/empty-text": {
    "type": "string\n",
    "description": "Text shown when there is no more content to load."
  },
  "VInput/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VInput/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VInput/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VInput/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VInput/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VInput/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VInput/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VInput/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VInput/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VInput/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VInput/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VInput/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VInput/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VInput/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VInput/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VInput/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VInput/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VInput/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the input is focused and apply color."
  },
  "VInput/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VInput/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VInput/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VInput/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VInput/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VInput/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VInput/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VInput/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VInput/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VInput/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VInput/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VInput/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VInput/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VItem/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VItem/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VItem/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VItemGroup/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VItemGroup/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VItemGroup/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VItemGroup/disabled": {
    "type": "boolean\n",
    "description": "Puts all children components into a disabled state."
  },
  "VItemGroup/max": {
    "type": "number\n",
    "description": "Sets a maximum number of selections that can be made."
  },
  "VItemGroup/multiple": {
    "type": "boolean\n",
    "description": "Allows one to select multiple items."
  },
  "VItemGroup/selected-class": {
    "type": "string\n",
    "description": "Configure the selected CSS class. This class will be available in `v-item` default scoped slot."
  },
  "VItemGroup/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VKbd/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VLabel/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VLabel/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VLayout/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VLayout/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VLayout/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VLayout/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VLayout/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VLayout/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VLayout/full-height": {
    "type": "boolean\n",
    "description": "Sets the component height to 100%."
  },
  "VLayout/overlaps": {
    "type": "string[]\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VLayoutItem/name": {
    "type": "string\n",
    "description": "Assign a specific name for layout registration."
  },
  "VLayoutItem/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component."
  },
  "VLayoutItem/position": {
    "type": "'top' | 'left' | 'right' | 'bottom'\n",
    "description": "The position of the item."
  },
  "VLayoutItem/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the component."
  },
  "VLayoutItem/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VLayoutItem/order": {
    "type": "string | number\n",
    "description": "Adjust the order of the component in relation to its registration order."
  },
  "VLazy/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VLazy/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VLazy/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VLazy/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VLazy/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VLazy/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VLazy/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VLazy/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VLazy/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VLazy/options": {
    "type": "IntersectionObserverInit\n",
    "description": "Options that are passed to the [Intersection observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) constructor."
  },
  "VLigatureIcon/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VLigatureIcon/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VList/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VList/nav": {
    "type": "boolean\n",
    "description": "An alternative styling that reduces `v-list-item` width and rounds the corners. Typically used with **[v-navigation-drawer](/components/navigation-drawers)**."
  },
  "VList/activated": {
    "type": "any\n",
    "description": "Array of ids of activated nodes."
  },
  "VList/disabled": {
    "type": "boolean\n",
    "description": "Puts all children inputs into a disabled state."
  },
  "VList/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VList/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VList/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VList/items": {
    "type": "any[]\n",
    "description": "Can be an array of objects or strings. By default objects should have a **title** property, and can optionally have a **props** property containing any [VListItem props](/api/v-list-item/#props), a **value** property to allow selection, and a **children** property containing more item objects. Keys to use for these can be changed with the **item-title**, **item-value**, **item-props**, and **item-children** props."
  },
  "VList/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VList/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VList/slim": {
    "type": "boolean\n",
    "description": "Reduces horizontal spacing for badges, icons, tooltips, and avatars within slim list items to create a more compact visual representation."
  },
  "VList/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VList/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VList/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VList/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VList/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VList/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VList/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VList/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VList/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VList/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VList/variant": {
    "type": "'flat' | 'text' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VList/active-class": {
    "type": "string\n",
    "description": "The class applied to the component when it is in an active state."
  },
  "VList/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VList/expand-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when the list item is collapsed."
  },
  "VList/collapse-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when the list item is expanded."
  },
  "VList/lines": {
    "type": "false | 'one' | 'two' | 'three'\n",
    "description": "Designates a **minimum-height** for all children `v-list-item` components. This prop uses [line-clamp](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp) and is not supported in all browsers."
  },
  "VList/activatable": {
    "type": "boolean\n",
    "description": "Designates whether the list items are activatable."
  },
  "VList/selectable": {
    "type": "boolean\n",
    "description": "Designates whether the list items are selectable."
  },
  "VList/opened": {
    "type": "unknown\n",
    "description": "An array containing the values of currently opened groups. Can be two-way bound with `v-model:opened`."
  },
  "VList/selected": {
    "type": "unknown\n",
    "description": "An array containing the values of currently selected items. Can be two-way bound with `v-model:selected`."
  },
  "VList/mandatory": {
    "type": "boolean\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VList/active-strategy": {
    "type": "  | 'single-leaf'\n  | 'leaf'\n  | 'independent'\n  | 'single-independent'\n  | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/nested/activeStrategies.ts#L27-L31\" target=\"_blank\">ActiveStrategy</a>\n  | ((mandatory: boolean) => <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/nested/activeStrategies.ts#L27-L31\" target=\"_blank\">ActiveStrategy</a>)\n",
    "description": "Affects how items with children behave when activated.\n- **leaf:** Only leaf nodes (items without children) can be activated.\n- **independent:** All nodes can be activated whether they have children or not.\n- **classic:** Activating a parent node will cause all children to be activated."
  },
  "VList/select-strategy": {
    "type": "  | 'single-leaf'\n  | 'leaf'\n  | 'independent'\n  | 'single-independent'\n  | 'classic'\n  | 'trunk'\n  | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/nested/selectStrategies.ts#L26-L30\" target=\"_blank\">SelectStrategy</a>\n  | ((mandatory: boolean) => <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/nested/selectStrategies.ts#L26-L30\" target=\"_blank\">SelectStrategy</a>)\n",
    "description": "Affects how items with children behave when selected.\n- **leaf:** Only leaf nodes (items without children) can be selected.\n- **independent:** All nodes can be selected whether they have children or not.\n- **classic:** Selecting a parent node will cause all children to be selected, parent nodes will be displayed as selected if all their descendants are selected. Only leaf nodes will be added to the model.\n- **trunk**: Same as classic but if all of a node's children are selected then only that node will be added to the model."
  },
  "VList/open-strategy": {
    "type": "'list' | 'multiple' | 'single' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/nested/openStrategies.ts#L20-L23\" target=\"_blank\">OpenStrategy</a>\n",
    "description": "Affects how items with children behave when expanded.\n- **multiple:** Any number of groups can be open at once.\n- **single:** Only one group at each level can be open, opening a group will cause others to close.\n- **list:** Multiple, but all other groups will close when an item is selected."
  },
  "VList/item-type": {
    "type": "string\n",
    "description": "Designates the key on the supplied items that is used for determining the nodes type."
  },
  "VList/item-title": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its title."
  },
  "VList/item-value": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VList/item-children": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its children."
  },
  "VList/item-props": {
    "type": "SelectItemKey<any>\n",
    "description": "Props object that will be applied to each item component. `true` will treat the original object as raw props and pass it directly to the component."
  },
  "VList/return-object": {
    "type": "boolean\n",
    "description": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**."
  },
  "VList/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VListGroup/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VListGroup/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VListGroup/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VListGroup/value": {
    "type": "any\n",
    "description": "Expands / Collapse the list-group."
  },
  "VListGroup/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VListGroup/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VListGroup/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VListGroup/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VListGroup/expand-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when the list item is collapsed."
  },
  "VListGroup/collapse-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when the list item is expanded."
  },
  "VListGroup/fluid": {
    "type": "boolean\n",
    "description": "Removes the left padding assigned for action icons from group items."
  },
  "VListGroup/subgroup": {
    "type": "boolean\n",
    "description": "Designate the component as nested list group."
  },
  "VListImg/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VListItem/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VListItem/link": {
    "type": "boolean\n",
    "description": "Designates that the component is a link. This is automatic when using the href or to prop."
  },
  "VListItem/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VListItem/nav": {
    "type": "boolean\n",
    "description": "Reduces the width v-list-item takes up as well as adding a border radius."
  },
  "VListItem/title": {
    "type": "string | number | boolean\n",
    "description": "Generates a `v-list-item-title` component with the supplied value. Note that this overrides the native [`title`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title) attribute, that must be set with `v-bind:title.attr` instead."
  },
  "VListItem/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VListItem/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VListItem/value": {
    "type": "any\n",
    "description": "The value used for selection. Obtained from [`v-list`](/api/v-list)'s `v-model:selected` when the item is selected."
  },
  "VListItem/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VListItem/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VListItem/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VListItem/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VListItem/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VListItem/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
  },
  "VListItem/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VListItem/slim": {
    "type": "boolean\n",
    "description": "Reduces horizontal spacing for badges, icons, tooltips, and avatars to create a more compact visual representation."
  },
  "VListItem/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VListItem/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VListItem/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VListItem/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VListItem/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VListItem/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VListItem/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VListItem/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VListItem/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VListItem/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VListItem/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VListItem/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VListItem/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VListItem/color": {
    "type": "string\n",
    "description": "Applies specified color to the control when in an **active** state or **input-value** is **true** - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors),"
  },
  "VListItem/variant": {
    "type": "'flat' | 'text' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VListItem/subtitle": {
    "type": "string | number | boolean\n",
    "description": "Specify a subtitle text for the component."
  },
  "VListItem/active-class": {
    "type": "string\n",
    "description": "The class applied to the component when it matches the current route. Find more information about the [active-class prop](https://router.vuejs.org/api/#active-class) on the [vue-router](https://router.vuejs.org/) documentation."
  },
  "VListItem/lines": {
    "type": "false | 'one' | 'two' | 'three'\n",
    "description": "The line declaration specifies the minimum height of the item and can also be controlled from v-list with the same prop."
  },
  "VListItem/append-avatar": {
    "type": "string\n",
    "description": "Appends a [v-avatar](/components/avatars/) component after default content in the **append** slot."
  },
  "VListItem/prepend-avatar": {
    "type": "string\n",
    "description": "Prepends a [v-avatar](/components/avatars/) component in the **prepend** slot before default content."
  },
  "VListItemAction/end": {
    "type": "boolean\n",
    "description": "Applies margin at the start of the component."
  },
  "VListItemAction/start": {
    "type": "boolean\n",
    "description": "Applies margin at the end of the component."
  },
  "VListItemAction/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VListItemMedia/end": {
    "type": "boolean\n",
    "description": "Applies margin at the start of the component."
  },
  "VListItemMedia/start": {
    "type": "boolean\n",
    "description": "Applies margin at the end of the component."
  },
  "VListItemMedia/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VListItemSubtitle/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VListItemSubtitle/opacity": {
    "type": "string | number\n",
    "description": "Sets the component's opacity value"
  },
  "VListItemTitle/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VListSubheader/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VListSubheader/sticky": {
    "type": "boolean\n",
    "description": "Sticks the header to the top of the table."
  },
  "VListSubheader/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VListSubheader/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VListSubheader/inset": {
    "type": "boolean\n",
    "description": "Insets the subheader without additional spacing, aligning it flush with the surrounding content."
  },
  "VLocaleProvider/messages": {
    "type": "unknown\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VLocaleProvider/locale": {
    "type": "string\n",
    "description": "Specify a locale to use."
  },
  "VLocaleProvider/fallback-locale": {
    "type": "string\n",
    "description": "Specify a fallback locale to use when a locale is not found."
  },
  "VLocaleProvider/rtl": {
    "type": "boolean\n",
    "description": "Specify a RTL mode."
  },
  "VMain/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VMain/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VMain/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VMain/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VMain/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VMain/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VMain/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VMain/scrollable": {
    "type": "boolean\n",
    "description": "Specify a custom scrollable function."
  },
  "VMenu/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VMenu/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VMenu/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VMenu/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VMenu/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VMenu/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component. Use `auto` to use the activator width."
  },
  "VMenu/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VMenu/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both.."
  },
  "VMenu/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VMenu/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VMenu/id": {
    "type": "string\n",
    "description": "The unique identifier of the component."
  },
  "VMenu/transition": {
    "type": "  | string\n  | boolean\n  | (TransitionProps & { component: Component })\n  | {\n      component: ComponentPublicInstanceConstructor<\n        CreateComponentPublicInstanceWithMixins<\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          unknown,\n          {},\n          {},\n          ComponentOptionsMixin,\n          ComponentOptionsMixin,\n          Record<string, any>,\n          PublicProps,\n          {},\n          true,\n          {},\n          SlotsType<Partial<MakeSlots<{ default: never }>>>,\n          GlobalComponents,\n          GlobalDirectives,\n          string,\n          {},\n          any,\n          ComponentProvideOptions,\n          OptionTypesType<{}, {}, {}, {}, {}, {}>,\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          {},\n          {},\n          {},\n          {}\n        >,\n        any,\n        any,\n        any,\n        ComputedOptions,\n        MethodOptions\n      > &\n        ComponentOptionsBase<\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          unknown,\n          {},\n          {},\n          ComponentOptionsMixin,\n          ComponentOptionsMixin,\n          Record<string, any>,\n          string,\n          {},\n          {},\n          string,\n          SlotsType<Partial<MakeSlots<{ default: never }>>>,\n          GlobalComponents,\n          GlobalDirectives,\n          string,\n          ComponentProvideOptions\n        > &\n        VNodeProps &\n        AllowedComponentProps &\n        ComponentCustomProps & {\n          filterProps: (props: T) => Partial<Pick<T, U>>\n        }\n    }\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VMenu/activator": {
    "type": "Element | (string & {}) | 'parent' | ComponentPublicInstance\n",
    "description": "Explicitly sets the overlay's activator."
  },
  "VMenu/close-on-back": {
    "type": "boolean\n",
    "description": "Closes the overlay content when the browser's back button is pressed or `$router.back()` is called, cancelling the original navigation. `persistent` overlays will cancel navigation and animate as if they were clicked outside instead of closing."
  },
  "VMenu/contained": {
    "type": "boolean\n",
    "description": "Limits the size of the component and scrim to its offset parent. Implies `absolute` and `attach`. (Note: The parent element must have position: relative.)."
  },
  "VMenu/content-class": {
    "type": "any\n",
    "description": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component."
  },
  "VMenu/content-props": {
    "type": "any\n",
    "description": "Apply custom properties to the content."
  },
  "VMenu/opacity": {
    "type": "string | number\n",
    "description": "Sets the opacity of the scrim element. Only applies if `scrim` is enabled."
  },
  "VMenu/no-click-animation": {
    "type": "boolean\n",
    "description": "Disables the bounce effect when clicking outside of the content element when using the persistent prop."
  },
  "VMenu/persistent": {
    "type": "boolean\n",
    "description": "Clicking outside of the element or pressing esc key will not deactivate it."
  },
  "VMenu/scrim": {
    "type": "string | boolean\n",
    "description": "Accepts true/false to enable background, and string to define color."
  },
  "VMenu/z-index": {
    "type": "string | number\n",
    "description": "The z-index used for the component."
  },
  "VMenu/target": {
    "type": "  | Element\n  | (string & {})\n  | 'parent'\n  | 'cursor'\n  | ComponentPublicInstance\n  | [number, number]\n",
    "description": "For locationStrategy=\"connected\", specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default."
  },
  "VMenu/activator-props": {
    "type": "unknown\n",
    "description": "Apply custom properties to the activator."
  },
  "VMenu/open-on-click": {
    "type": "boolean\n",
    "description": "Designates whether menu should open on activator click."
  },
  "VMenu/open-on-hover": {
    "type": "boolean\n",
    "description": "Designates whether menu should open on activator hover."
  },
  "VMenu/open-on-focus": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is focused."
  },
  "VMenu/close-on-content-click": {
    "type": "boolean\n",
    "description": "Designates if menu should close when its content is clicked."
  },
  "VMenu/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only works with the **open-on-hover** prop."
  },
  "VMenu/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only works with the **open-on-hover** prop."
  },
  "VMenu/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VMenu/location-strategy": {
    "type": "'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n",
    "description": "A function used to specifies how the component should position relative to its activator."
  },
  "VMenu/origin": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VMenu/offset": {
    "type": "string | number | number[]\n",
    "description": "Increases distance from the target. When passed as a pair of numbers, the second value shifts anchor along the side and away from the target."
  },
  "VMenu/scroll-strategy": {
    "type": "'close' | 'none' | 'block' | 'reposition' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/scrollStrategies.ts#L17-L17\" target=\"_blank\">ScrollStrategyFunction</a>\n",
    "description": "Strategy used when the component is activate and user scrolls."
  },
  "VMenu/attach": {
    "type": "string | boolean | Element\n",
    "description": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or `true` to disable teleporting. Uses `body` by default. Generally not recommended except as a last resort: the default positioning algorithm should handle most scenarios better than is possible without teleporting, and you may have unexpected behavior if the menu ends up as child of its activator."
  },
  "VMenu/submenu": {
    "type": "boolean\n",
    "description": "Opens with right arrow and closes on left instead of up/down. Implies `location=\"end\"`. Directions are reversed for RTL."
  },
  "VMessages/active": {
    "type": "boolean\n",
    "description": "Determines whether the messages are visible or not."
  },
  "VMessages/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VMessages/transition": {
    "type": "  | string\n  | boolean\n  | (TransitionProps & { component: Component })\n  | { component: Component; leaveAbsolute: boolean; group: boolean }\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VMessages/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VNavigationDrawer/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VNavigationDrawer/name": {
    "type": "string\n",
    "description": "Assign a specific name for layout registration."
  },
  "VNavigationDrawer/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VNavigationDrawer/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VNavigationDrawer/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VNavigationDrawer/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VNavigationDrawer/location": {
    "type": "'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'\n",
    "description": "Controls the edge of the screen the drawer is attached to."
  },
  "VNavigationDrawer/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the component."
  },
  "VNavigationDrawer/sticky": {
    "type": "boolean\n",
    "description": "When true, the drawer will remain visible when scrolling past the top of the page."
  },
  "VNavigationDrawer/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VNavigationDrawer/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VNavigationDrawer/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VNavigationDrawer/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VNavigationDrawer/persistent": {
    "type": "boolean\n",
    "description": "Clicking outside or pressing **esc** key will not dismiss the dialog."
  },
  "VNavigationDrawer/scrim": {
    "type": "string | boolean\n",
    "description": "Determines whether an overlay is used when a **temporary** drawer is open. Accepts true/false to enable background, and string to define color."
  },
  "VNavigationDrawer/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only applies to hover and focus events."
  },
  "VNavigationDrawer/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only applies to hover and focus events."
  },
  "VNavigationDrawer/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VNavigationDrawer/image": {
    "type": "string\n",
    "description": "Apply a specific background image to the component."
  },
  "VNavigationDrawer/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Sets the designated mobile breakpoint for the component. This will apply alternate styles for mobile devices such as the `temporary` prop, or activate the `bottom` prop when the breakpoint value is met. Setting the value to `0` will disable this functionality."
  },
  "VNavigationDrawer/order": {
    "type": "string | number\n",
    "description": "Adjust the order of the component in relation to its registration order."
  },
  "VNavigationDrawer/disable-resize-watcher": {
    "type": "boolean\n",
    "description": "Prevents the automatic opening or closing of the drawer when resized, based on whether the device is mobile or desktop."
  },
  "VNavigationDrawer/disable-route-watcher": {
    "type": "boolean\n",
    "description": "Disables opening of navigation drawer when route changes."
  },
  "VNavigationDrawer/expand-on-hover": {
    "type": "boolean\n",
    "description": "Collapses the drawer to a **rail-variant** until hovering with the mouse."
  },
  "VNavigationDrawer/floating": {
    "type": "boolean\n",
    "description": "A floating drawer has no visible container (no border-right)."
  },
  "VNavigationDrawer/permanent": {
    "type": "boolean\n",
    "description": "The drawer remains visible regardless of screen size."
  },
  "VNavigationDrawer/rail": {
    "type": "boolean\n",
    "description": "Sets the component width to the **rail-width** value."
  },
  "VNavigationDrawer/rail-width": {
    "type": "string | number\n",
    "description": "Sets the width for the component when `rail` is enabled."
  },
  "VNavigationDrawer/temporary": {
    "type": "boolean\n",
    "description": "A temporary drawer sits above its application and uses a scrim (overlay) to darken the background."
  },
  "VNavigationDrawer/touchless": {
    "type": "boolean\n",
    "description": "Disable mobile touch functionality."
  },
  "VNumberInput/flat": {
    "type": "boolean\n",
    "description": "Removes box shadow when using a variant with elevation."
  },
  "VNumberInput/type": {
    "type": "string\n",
    "description": "Sets input type."
  },
  "VNumberInput/model-value": {
    "type": "number\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VNumberInput/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VNumberInput/reverse": {
    "type": "boolean\n",
    "description": "Reverses the orientation."
  },
  "VNumberInput/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VNumberInput/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VNumberInput/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VNumberInput/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VNumberInput/rounded": {
    "type": "string | number | boolean\n",
    "description": "Adds a border radius to the input."
  },
  "VNumberInput/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VNumberInput/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VNumberInput/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VNumberInput/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VNumberInput/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VNumberInput/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VNumberInput/max": {
    "type": "number\n",
    "description": "Specifies the maximum allowable value for the input."
  },
  "VNumberInput/min": {
    "type": "number\n",
    "description": "Specifies the minimum allowable value for the input."
  },
  "VNumberInput/placeholder": {
    "type": "string\n",
    "description": "Sets the input’s placeholder text."
  },
  "VNumberInput/step": {
    "type": "number\n",
    "description": "Defines the interval between allowed values when the user increments or decrements the input"
  },
  "VNumberInput/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VNumberInput/prefix": {
    "type": "string\n",
    "description": "Displays prefix text."
  },
  "VNumberInput/role": {
    "type": "string\n",
    "description": "The role attribute applied to the input."
  },
  "VNumberInput/autofocus": {
    "type": "boolean\n",
    "description": "Enables autofocus."
  },
  "VNumberInput/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VNumberInput/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VNumberInput/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VNumberInput/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VNumberInput/inset": {
    "type": "boolean\n",
    "description": "Applies an indentation to the dividers used in the stepper buttons."
  },
  "VNumberInput/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the outside the component's input, uses the same syntax as `v-icon`."
  },
  "VNumberInput/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VNumberInput/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VNumberInput/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VNumberInput/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VNumberInput/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VNumberInput/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VNumberInput/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VNumberInput/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VNumberInput/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VNumberInput/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VNumberInput/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VNumberInput/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VNumberInput/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VNumberInput/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VNumberInput/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VNumberInput/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VNumberInput/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VNumberInput/counter": {
    "type": "string | number | boolean\n",
    "description": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation."
  },
  "VNumberInput/persistent-placeholder": {
    "type": "boolean\n",
    "description": "Forces placeholder to always be visible."
  },
  "VNumberInput/persistent-counter": {
    "type": "boolean\n",
    "description": "Forces counter to always be visible."
  },
  "VNumberInput/suffix": {
    "type": "string\n",
    "description": "Displays suffix text."
  },
  "VNumberInput/append-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **append-inner** slot."
  },
  "VNumberInput/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VNumberInput/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when the **clearable** prop is set to true."
  },
  "VNumberInput/dirty": {
    "type": "boolean\n",
    "description": "Manually apply the dirty state styling."
  },
  "VNumberInput/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VNumberInput/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
  },
  "VNumberInput/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VNumberInput/counter-value": {
    "type": "number | ((value: any) => number)\n",
    "description": "Function returns the counter display text."
  },
  "VNumberInput/model-modifiers": {
    "type": "unknown\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VNumberInput/hide-input": {
    "type": "boolean\n",
    "description": "Hide the input field."
  },
  "VNumberInput/control-variant": {
    "type": "'default' | 'split' | 'hidden' | 'stacked'\n",
    "description": "The color of the control. It defaults to the value of `variant` prop."
  },
  "VNumberInput/precision": {
    "type": "number\n",
    "description": "Enforces strict precision. It is expected to be an integer value in range between `0` and `15`, or null for unrestricted."
  },
  "VOtpInput/length": {
    "type": "string | number\n",
    "description": "The OTP field's length."
  },
  "VOtpInput/type": {
    "type": "'number' | 'text' | 'password'\n",
    "description": "Supported types: `text`, `password`, `number`."
  },
  "VOtpInput/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VOtpInput/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VOtpInput/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VOtpInput/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VOtpInput/placeholder": {
    "type": "string\n",
    "description": "Sets the input’s placeholder text."
  },
  "VOtpInput/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VOtpInput/autofocus": {
    "type": "boolean\n",
    "description": "Automatically focuses the first input on page load"
  },
  "VOtpInput/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VOtpInput/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VOtpInput/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VOtpInput/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VOtpInput/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VOtpInput/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VOtpInput/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VOtpInput/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VOtpInput/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VOtpInput/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VOtpInput/divider": {
    "type": "string\n",
    "description": "Specifies the dividing character between items."
  },
  "VOtpInput/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VOtpInput/model-value": {
    "type": "string | number\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VOtpInput/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VOtpInput/focus-all": {
    "type": "boolean\n",
    "description": "Puts all inputs into a focus state when any are focused"
  },
  "VOverlay/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VOverlay/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VOverlay/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VOverlay/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VOverlay/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VOverlay/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VOverlay/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VOverlay/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VOverlay/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both.."
  },
  "VOverlay/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the content element."
  },
  "VOverlay/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VOverlay/activator": {
    "type": "Element | (string & {}) | 'parent' | ComponentPublicInstance\n",
    "description": "Explicitly sets the overlay's activator."
  },
  "VOverlay/close-on-back": {
    "type": "boolean\n",
    "description": "Closes the overlay content when the browser's back button is pressed or `$router.back()` is called, cancelling the original navigation. `persistent` overlays will cancel navigation and animate as if they were clicked outside instead of closing."
  },
  "VOverlay/contained": {
    "type": "boolean\n",
    "description": "Limits the size of the component and scrim to its offset parent. Implies `absolute` and `attach`. (Note: The parent element must have position: relative.)."
  },
  "VOverlay/content-class": {
    "type": "any\n",
    "description": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component."
  },
  "VOverlay/content-props": {
    "type": "any\n",
    "description": "Apply custom properties to the content."
  },
  "VOverlay/opacity": {
    "type": "string | number\n",
    "description": "Sets the opacity of the scrim element. Only applies if `scrim` is enabled."
  },
  "VOverlay/no-click-animation": {
    "type": "boolean\n",
    "description": "Disables the bounce effect when clicking outside of the content element when using the persistent prop."
  },
  "VOverlay/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VOverlay/persistent": {
    "type": "boolean\n",
    "description": "Clicking outside of the element or pressing esc key will not deactivate it."
  },
  "VOverlay/scrim": {
    "type": "string | boolean\n",
    "description": "Accepts true/false to enable background, and string to define color."
  },
  "VOverlay/z-index": {
    "type": "string | number\n",
    "description": "The z-index used for the component."
  },
  "VOverlay/target": {
    "type": "  | Element\n  | (string & {})\n  | 'parent'\n  | 'cursor'\n  | ComponentPublicInstance\n  | [number, number]\n",
    "description": "For locationStrategy=\"connected\", specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default."
  },
  "VOverlay/activator-props": {
    "type": "unknown\n",
    "description": "Apply custom properties to the activator."
  },
  "VOverlay/open-on-click": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is clicked."
  },
  "VOverlay/open-on-hover": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is hovered."
  },
  "VOverlay/open-on-focus": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is focused."
  },
  "VOverlay/close-on-content-click": {
    "type": "boolean\n",
    "description": "Closes component when you click on its content."
  },
  "VOverlay/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only applies to hover and focus events."
  },
  "VOverlay/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only applies to hover and focus events."
  },
  "VOverlay/location-strategy": {
    "type": "'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n",
    "description": "A function used to specifies how the component should position relative to its activator."
  },
  "VOverlay/origin": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VOverlay/offset": {
    "type": "string | number | number[]\n",
    "description": "Increases distance from the target. When passed as a pair of numbers, the second value shifts anchor along the side and away from the target."
  },
  "VOverlay/scroll-strategy": {
    "type": "'close' | 'block' | 'none' | 'reposition' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/scrollStrategies.ts#L17-L17\" target=\"_blank\">ScrollStrategyFunction</a>\n",
    "description": "Strategy used when the component is activate and user scrolls."
  },
  "VOverlay/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VOverlay/attach": {
    "type": "string | boolean | Element\n",
    "description": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or `true` to disable teleporting. Uses `body` by default."
  },
  "VPagination/length": {
    "type": "string | number\n",
    "description": "The number of pages."
  },
  "VPagination/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VPagination/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VPagination/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VPagination/aria-label": {
    "type": "string\n",
    "description": "Label for the root element."
  },
  "VPagination/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VPagination/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VPagination/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VPagination/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VPagination/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VPagination/start": {
    "type": "string | number\n",
    "description": "Specify the starting page."
  },
  "VPagination/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VPagination/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VPagination/color": {
    "type": "string\n",
    "description": "Applies specified color to the selected page button - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VPagination/variant": {
    "type": "'flat' | 'text' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VPagination/model-value": {
    "type": "number\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VPagination/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon to use for the prev button."
  },
  "VPagination/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon to use for the next button."
  },
  "VPagination/first-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon to use for the first button."
  },
  "VPagination/last-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon to use for the last button."
  },
  "VPagination/total-visible": {
    "type": "string | number\n",
    "description": "Specify the total visible pagination numbers."
  },
  "VPagination/page-aria-label": {
    "type": "string\n",
    "description": "Label for each page button."
  },
  "VPagination/current-page-aria-label": {
    "type": "string\n",
    "description": "Label for the currently selected page."
  },
  "VPagination/first-aria-label": {
    "type": "string\n",
    "description": "Label for the go to first button."
  },
  "VPagination/previous-aria-label": {
    "type": "string\n",
    "description": "Label for the previous button."
  },
  "VPagination/next-aria-label": {
    "type": "string\n",
    "description": "Label for the next button."
  },
  "VPagination/last-aria-label": {
    "type": "string\n",
    "description": "Label for the go to last button."
  },
  "VPagination/ellipsis": {
    "type": "string\n",
    "description": "Text to show between page buttons when truncating the list."
  },
  "VPagination/show-first-last-page": {
    "type": "boolean\n",
    "description": "Show buttons for going to first and last page."
  },
  "VParallax/scale": {
    "type": "string | number\n",
    "description": "The scale of the parallax image."
  },
  "VPicker/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VPicker/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VPicker/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VPicker/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VPicker/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VPicker/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VPicker/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VPicker/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VPicker/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VPicker/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VPicker/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VPicker/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VPicker/position": {
    "type": "'fixed' | 'relative' | 'static' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VPicker/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VPicker/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VPicker/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VPicker/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VPicker/divided": {
    "type": "boolean\n",
    "description": "Adds a divider between the header and controls."
  },
  "VPicker/landscape": {
    "type": "boolean\n",
    "description": "Puts the picker into landscape mode."
  },
  "VPicker/hide-header": {
    "type": "boolean\n",
    "description": "Hide the picker header."
  },
  "VPickerTitle/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VProgressCircular/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VProgressCircular/indeterminate": {
    "type": "boolean | 'disable-shrink'\n",
    "description": "Constantly animates, use when loading progress is unknown. If set to the string `'disable-shrink'` it will use a simpler animation that does not run on the main thread."
  },
  "VProgressCircular/size": {
    "type": "string | number\n",
    "description": "Sets the diameter of the circle in pixels."
  },
  "VProgressCircular/width": {
    "type": "string | number\n",
    "description": "Sets the stroke of the circle in pixels."
  },
  "VProgressCircular/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VProgressCircular/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VProgressCircular/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VProgressCircular/model-value": {
    "type": "string | number\n",
    "description": "The percentage value for current progress."
  },
  "VProgressCircular/rotate": {
    "type": "string | number\n",
    "description": "Rotates the circle start point in degrees."
  },
  "VProgressLinear/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VProgressLinear/reverse": {
    "type": "boolean\n",
    "description": "Displays reversed progress (right to left in LTR mode and left to right in RTL)."
  },
  "VProgressLinear/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VProgressLinear/indeterminate": {
    "type": "boolean\n",
    "description": "Constantly animates, use when loading progress is unknown."
  },
  "VProgressLinear/max": {
    "type": "string | number\n",
    "description": "Sets the maximum value the progress can reach."
  },
  "VProgressLinear/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VProgressLinear/active": {
    "type": "boolean\n",
    "description": "Reduce the height to 0, hiding component."
  },
  "VProgressLinear/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VProgressLinear/absolute": {
    "type": "boolean\n",
    "description": "Applies position: absolute to the component."
  },
  "VProgressLinear/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VProgressLinear/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VProgressLinear/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VProgressLinear/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VProgressLinear/opacity": {
    "type": "string | number\n",
    "description": "Set the opacity of the progress bar."
  },
  "VProgressLinear/model-value": {
    "type": "string | number\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VProgressLinear/bg-opacity": {
    "type": "string | number\n",
    "description": "Background opacity, if null it defaults to 0.3 if background color is not specified or 1 otherwise."
  },
  "VProgressLinear/buffer-value": {
    "type": "string | number\n",
    "description": "The percentage value for the buffer."
  },
  "VProgressLinear/buffer-color": {
    "type": "string\n",
    "description": "Sets the color of the buffer bar."
  },
  "VProgressLinear/buffer-opacity": {
    "type": "string | number\n",
    "description": "Set the opacity of the buffer bar."
  },
  "VProgressLinear/clickable": {
    "type": "boolean\n",
    "description": "Clicking on the progress track will automatically set the value."
  },
  "VProgressLinear/stream": {
    "type": "boolean\n",
    "description": "An alternative style for portraying loading that works in tandem with **buffer-value**."
  },
  "VProgressLinear/striped": {
    "type": "boolean\n",
    "description": "Adds a stripe background to the filled portion of the progress component."
  },
  "VProgressLinear/rounded-bar": {
    "type": "boolean\n",
    "description": "Applies a border radius to the progress bar."
  },
  "VPullToRefresh/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VPullToRefresh/pull-down-threshold": {
    "type": "number\n",
    "description": "The distance the user must pull down to trigger a refresh."
  },
  "VRadio/type": {
    "type": "string\n",
    "description": "Provides the default type for children selection controls."
  },
  "VRadio/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VRadio/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VRadio/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VRadio/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VRadio/multiple": {
    "type": "boolean\n",
    "description": "Changes select to multiple. Accepts array for value."
  },
  "VRadio/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VRadio/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VRadio/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VRadio/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VRadio/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VRadio/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VRadio/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VRadio/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VRadio/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VRadio/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VRadio/inline": {
    "type": "boolean\n",
    "description": "Puts children inputs into a row."
  },
  "VRadio/true-value": {
    "type": "any\n",
    "description": "Sets value for truthy state."
  },
  "VRadio/false-value": {
    "type": "any\n",
    "description": "Sets value for falsy state."
  },
  "VRadio/defaults-target": {
    "type": "string\n",
    "description": "The target component to provide defaults values for."
  },
  "VRadio/false-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when inactive."
  },
  "VRadio/true-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when active."
  },
  "VRadioGroup/type": {
    "type": "string\n",
    "description": "Provides the default type for children selection controls."
  },
  "VRadioGroup/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VRadioGroup/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VRadioGroup/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VRadioGroup/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VRadioGroup/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VRadioGroup/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VRadioGroup/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VRadioGroup/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VRadioGroup/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VRadioGroup/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VRadioGroup/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VRadioGroup/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VRadioGroup/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VRadioGroup/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VRadioGroup/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VRadioGroup/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VRadioGroup/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VRadioGroup/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VRadioGroup/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VRadioGroup/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VRadioGroup/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the input is focused and apply color."
  },
  "VRadioGroup/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VRadioGroup/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VRadioGroup/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VRadioGroup/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VRadioGroup/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VRadioGroup/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VRadioGroup/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VRadioGroup/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VRadioGroup/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VRadioGroup/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VRadioGroup/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VRadioGroup/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VRadioGroup/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VRadioGroup/inline": {
    "type": "boolean\n",
    "description": "Displays radio buttons in row."
  },
  "VRadioGroup/defaults-target": {
    "type": "string\n",
    "description": "The target component to provide defaults values for."
  },
  "VRadioGroup/false-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when inactive."
  },
  "VRadioGroup/true-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when active."
  },
  "VRangeSlider/reverse": {
    "type": "boolean\n",
    "description": "Reverses the slider direction."
  },
  "VRangeSlider/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VRangeSlider/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VRangeSlider/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VRangeSlider/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VRangeSlider/max": {
    "type": "string | number\n",
    "description": "Sets the maximum allowed value."
  },
  "VRangeSlider/min": {
    "type": "string | number\n",
    "description": "Sets the minimum allowed value."
  },
  "VRangeSlider/step": {
    "type": "string | number\n",
    "description": "If greater than 0, sets step interval for ticks."
  },
  "VRangeSlider/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VRangeSlider/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VRangeSlider/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VRangeSlider/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VRangeSlider/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VRangeSlider/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VRangeSlider/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VRangeSlider/ripple": {
    "type": "boolean\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VRangeSlider/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VRangeSlider/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VRangeSlider/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VRangeSlider/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VRangeSlider/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VRangeSlider/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VRangeSlider/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VRangeSlider/model-value": {
    "type": "(string | number)[]\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VRangeSlider/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VRangeSlider/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the input is focused and apply color."
  },
  "VRangeSlider/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VRangeSlider/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VRangeSlider/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VRangeSlider/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VRangeSlider/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VRangeSlider/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VRangeSlider/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VRangeSlider/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VRangeSlider/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VRangeSlider/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VRangeSlider/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VRangeSlider/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VRangeSlider/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VRangeSlider/thumb-color": {
    "type": "string\n",
    "description": "Sets the thumb and thumb label color."
  },
  "VRangeSlider/thumb-label": {
    "type": "boolean | 'always'\n",
    "description": "Show thumb label. If `true` it shows label when using slider. If set to `'always'` it always shows label."
  },
  "VRangeSlider/thumb-size": {
    "type": "string | number\n",
    "description": "Controls the size of the thumb label."
  },
  "VRangeSlider/show-ticks": {
    "type": "boolean | 'always'\n",
    "description": "Show track ticks. If `true` it shows ticks when using slider. If set to `'always'` it always shows ticks."
  },
  "VRangeSlider/ticks": {
    "type": "number[] | Record<number, string>\n",
    "description": "Show track ticks. If `true` it shows ticks when using slider. If set to `'always'` it always shows ticks."
  },
  "VRangeSlider/tick-size": {
    "type": "string | number\n",
    "description": "Controls the size of **ticks**"
  },
  "VRangeSlider/track-color": {
    "type": "string\n",
    "description": "Sets the track's color"
  },
  "VRangeSlider/track-fill-color": {
    "type": "string\n",
    "description": "Sets the track's fill color"
  },
  "VRangeSlider/track-size": {
    "type": "string | number\n",
    "description": "Sets the track's size (height)."
  },
  "VRangeSlider/strict": {
    "type": "boolean\n",
    "description": "Disallows dragging the ending thumb past the starting thumb and vice versa."
  },
  "VRating/length": {
    "type": "string | number\n",
    "description": "The amount of items to show."
  },
  "VRating/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VRating/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VRating/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VRating/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VRating/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VRating/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VRating/readonly": {
    "type": "boolean\n",
    "description": "Removes all hover effects and pointer events."
  },
  "VRating/ripple": {
    "type": "boolean\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VRating/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VRating/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VRating/model-value": {
    "type": "string | number\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VRating/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared by clicking on the current value."
  },
  "VRating/hover": {
    "type": "boolean\n",
    "description": "Provides visual feedback when hovering over icons."
  },
  "VRating/item-aria-label": {
    "type": "string\n",
    "description": "The **aria-label** used for each item."
  },
  "VRating/empty-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon displayed when empty."
  },
  "VRating/full-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon displayed when full."
  },
  "VRating/half-increments": {
    "type": "boolean\n",
    "description": "Allows the selection of half increments."
  },
  "VRating/item-label-position": {
    "type": "string\n",
    "description": "Position of item labels. Accepts 'top' and 'bottom'."
  },
  "VRating/item-labels": {
    "type": "string[]\n",
    "description": "Array of labels to display next to each item.."
  },
  "VResponsive/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VResponsive/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VResponsive/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VResponsive/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VResponsive/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VResponsive/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VResponsive/content-class": {
    "type": "any\n",
    "description": "Apply a custom class to the internal content element."
  },
  "VResponsive/aspect-ratio": {
    "type": "string | number\n",
    "description": "Sets a base aspect ratio, calculated as width/height. This will only set a **minimum** height, the component can still grow if it has a lot of content."
  },
  "VResponsive/inline": {
    "type": "boolean\n",
    "description": "Display as an inline element instead of a block, also disables flex-grow."
  },
  "VRow/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VRow/align": {
    "type": "'start' | 'end' | 'center' | 'baseline' | 'stretch'\n",
    "description": "Applies the [align-items](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items) css property. Available options are: **start**, **center**, **end**, **baseline** and **stretch**."
  },
  "VRow/dense": {
    "type": "boolean\n",
    "description": "Reduces the gutter between `v-col`s."
  },
  "VRow/no-gutters": {
    "type": "boolean\n",
    "description": "Removes the gutter between `v-col`s."
  },
  "VRow/align-sm": {
    "type": "'start' | 'end' | 'center' | 'baseline' | 'stretch'\n",
    "description": "Changes the **align-items** property on small and greater breakpoints."
  },
  "VRow/align-md": {
    "type": "'start' | 'end' | 'center' | 'baseline' | 'stretch'\n",
    "description": "Changes the **align-items** property on medium and greater breakpoints."
  },
  "VRow/align-lg": {
    "type": "'start' | 'end' | 'center' | 'baseline' | 'stretch'\n",
    "description": "Changes the **align-items** property on large and greater breakpoints."
  },
  "VRow/align-xl": {
    "type": "'start' | 'end' | 'center' | 'baseline' | 'stretch'\n",
    "description": "Changes the **align-items** property on extra large and greater breakpoints."
  },
  "VRow/align-xxl": {
    "type": "'start' | 'end' | 'center' | 'baseline' | 'stretch'\n",
    "description": "Changes the **align-items** property on extra extra large and greater breakpoints."
  },
  "VRow/justify-sm": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **justify-content** property on small and greater breakpoints."
  },
  "VRow/justify-md": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **justify-content** property on medium and greater breakpoints."
  },
  "VRow/justify-lg": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **justify-content** property on large and greater breakpoints."
  },
  "VRow/justify-xl": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **justify-content** property on extra large and greater breakpoints."
  },
  "VRow/justify-xxl": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **justify-content** property on extra extra large and greater breakpoints."
  },
  "VRow/align-content-sm": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'stretch'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **align-content** property on small and greater breakpoints."
  },
  "VRow/align-content-md": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'stretch'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **align-content** property on medium and greater breakpoints."
  },
  "VRow/align-content-lg": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'stretch'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **align-content** property on large and greater breakpoints."
  },
  "VRow/align-content-xl": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'stretch'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **align-content** property on extra large and greater breakpoints."
  },
  "VRow/align-content-xxl": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'stretch'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Changes the **align-content** property on extra extra large and greater breakpoints."
  },
  "VRow/justify": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'stretch'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Applies the [justify-content](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content) css property. Available options are: **start**, **center**, **end**, **space-between** and **space-around**."
  },
  "VRow/align-content": {
    "type": "  | 'start'\n  | 'end'\n  | 'center'\n  | 'stretch'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n",
    "description": "Applies the [align-content](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content) css property. Available options are: **start**, **center**, **end**, **space-between**, **space-around** and **stretch**."
  },
  "VScaleTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VScaleTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VScaleTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VScaleTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VScaleTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VScaleTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VScrollXReverseTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VScrollXReverseTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VScrollXReverseTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VScrollXReverseTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VScrollXReverseTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VScrollXReverseTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VScrollXTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VScrollXTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VScrollXTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VScrollXTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VScrollXTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VScrollXTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VScrollYReverseTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VScrollYReverseTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VScrollYReverseTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VScrollYReverseTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VScrollYReverseTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VScrollYReverseTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VScrollYTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VScrollYTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VScrollYTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VScrollYTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VScrollYTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VScrollYTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VSelect/flat": {
    "type": "boolean\n",
    "description": "Removes box shadow when using a variant with elevation."
  },
  "VSelect/type": {
    "type": "string\n",
    "description": "Sets input type."
  },
  "VSelect/reverse": {
    "type": "boolean\n",
    "description": "Reverses the orientation."
  },
  "VSelect/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VSelect/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VSelect/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VSelect/menu": {
    "type": "boolean\n",
    "description": "Renders with the menu open by default."
  },
  "VSelect/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VSelect/multiple": {
    "type": "boolean\n",
    "description": "Changes select to multiple. Accepts array for value."
  },
  "VSelect/placeholder": {
    "type": "string\n",
    "description": "Sets the input’s placeholder text."
  },
  "VSelect/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VSelect/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VSelect/prefix": {
    "type": "string\n",
    "description": "Displays prefix text."
  },
  "VSelect/role": {
    "type": "string\n",
    "description": "The role attribute applied to the input."
  },
  "VSelect/autofocus": {
    "type": "boolean\n",
    "description": "Enables autofocus."
  },
  "VSelect/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSelect/items": {
    "type": "any[]\n",
    "description": "Can be an array of objects or strings. By default objects should have **title** and **value** properties, and can optionally have a **props** property containing any [VListItem props](/api/v-list-item/#props). Keys to use for these can be changed with the **item-title**, **item-value**, and **item-props** props."
  },
  "VSelect/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VSelect/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VSelect/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the outside the component's input, uses the same syntax as `v-icon`."
  },
  "VSelect/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VSelect/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VSelect/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VSelect/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VSelect/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width of the select's `v-menu` content."
  },
  "VSelect/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VSelect/rounded": {
    "type": "string | number | boolean\n",
    "description": "Adds a border radius to the input."
  },
  "VSelect/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VSelect/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSelect/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VSelect/chips": {
    "type": "boolean\n",
    "description": "Changes display of selections to chips."
  },
  "VSelect/closable-chips": {
    "type": "boolean\n",
    "description": "Enables the [closable](/api/v-chip/#props-closable) prop on all [v-chip](/components/chips/) components."
  },
  "VSelect/close-text": {
    "type": "string\n",
    "description": "Text set to the inputs `aria-label` and `title` when input menu is closed."
  },
  "VSelect/open-text": {
    "type": "string\n",
    "description": "Text set to the inputs **aria-label** and **title** when input menu is open."
  },
  "VSelect/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VSelect/hide-no-data": {
    "type": "boolean\n",
    "description": "Hides the menu when there are no options to show.  Useful for preventing the menu from opening before results are fetched asynchronously.  Also has the effect of opening the menu when the `items` array changes if not already open."
  },
  "VSelect/hide-selected": {
    "type": "boolean\n",
    "description": "Do not display in the select menu items that are already selected."
  },
  "VSelect/list-props": {
    "type": "unknown\n",
    "description": "Pass props through to the `v-list` component. Accepts an object with anything from [v-list](/api/v-list/#props) props, camelCase keys are recommended."
  },
  "VSelect/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSelect/item-title": {
    "type": "SelectItemKey<any>\n",
    "description": "Property on supplied `items` that contains its title."
  },
  "VSelect/item-value": {
    "type": "SelectItemKey<any>\n",
    "description": "Set property of **items**'s value - **must be primitive**. Dot notation is supported. **Note:** This is currently not supported with `v-combobox` [GitHub Issue](https://github.com/vuetifyjs/vuetify/issues/5479)."
  },
  "VSelect/item-children": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "This property currently has **no effect**."
  },
  "VSelect/item-props": {
    "type": "SelectItemKey<any>\n",
    "description": "Props object that will be applied to each item component. `true` will treat the original object as raw props and pass it directly to the component."
  },
  "VSelect/return-object": {
    "type": "boolean\n",
    "description": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**."
  },
  "VSelect/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VSelect/menu-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Sets the the spin icon."
  },
  "VSelect/menu-props": {
    "type": "unknown\n",
    "description": "Pass props through to the `v-menu` component. Accepts an object with anything from [v-menu](/api/v-menu/#props) props, camelCase keys are recommended."
  },
  "VSelect/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSelect/transition": {
    "type": "  | string\n  | boolean\n  | (TransitionProps & { component: Component })\n  | { component: Component }\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VSelect/no-data-text": {
    "type": "string\n",
    "description": "Text shown when no items are provided to the component."
  },
  "VSelect/open-on-clear": {
    "type": "boolean\n",
    "description": "When using the **clearable** prop, once cleared, the select menu will either open or stay open, depending on the current state."
  },
  "VSelect/item-color": {
    "type": "string\n",
    "description": "Sets color of selected items."
  },
  "VSelect/counter": {
    "type": "string | number | boolean\n",
    "description": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation."
  },
  "VSelect/persistent-placeholder": {
    "type": "boolean\n",
    "description": "Forces placeholder to always be visible."
  },
  "VSelect/persistent-counter": {
    "type": "boolean\n",
    "description": "Forces counter to always be visible."
  },
  "VSelect/suffix": {
    "type": "string\n",
    "description": "Displays suffix text."
  },
  "VSelect/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VSelect/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VSelect/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VSelect/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VSelect/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VSelect/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VSelect/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VSelect/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VSelect/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VSelect/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VSelect/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VSelect/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VSelect/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VSelect/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VSelect/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VSelect/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when the **clearable** prop is set to true."
  },
  "VSelect/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VSelect/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
  },
  "VSelect/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VSelect/counter-value": {
    "type": "number | ((value: any) => number)\n",
    "description": "Function returns the counter display text."
  },
  "VSelect/model-modifiers": {
    "type": "unknown\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VSelectionControl/type": {
    "type": "string\n",
    "description": "Provides the default type for children selection controls."
  },
  "VSelectionControl/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSelectionControl/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VSelectionControl/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VSelectionControl/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSelectionControl/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSelectionControl/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VSelectionControl/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSelectionControl/multiple": {
    "type": "boolean\n",
    "description": "Changes select to multiple. Accepts array for value."
  },
  "VSelectionControl/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VSelectionControl/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VSelectionControl/inline": {
    "type": "boolean\n",
    "description": "Puts children inputs into a row."
  },
  "VSelectionControl/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VSelectionControl/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VSelectionControl/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VSelectionControl/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VSelectionControl/true-value": {
    "type": "any\n",
    "description": "Sets value for truthy state."
  },
  "VSelectionControl/false-value": {
    "type": "any\n",
    "description": "Sets value for falsy state."
  },
  "VSelectionControl/defaults-target": {
    "type": "string\n",
    "description": "The target component to provide defaults values for."
  },
  "VSelectionControl/false-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when inactive."
  },
  "VSelectionControl/true-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when active."
  },
  "VSelectionControl/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VSelectionControlGroup/type": {
    "type": "string\n",
    "description": "Provides the default type for children selection controls."
  },
  "VSelectionControlGroup/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSelectionControlGroup/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VSelectionControlGroup/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VSelectionControlGroup/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSelectionControlGroup/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSelectionControlGroup/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VSelectionControlGroup/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSelectionControlGroup/multiple": {
    "type": "boolean\n",
    "description": "Changes select to multiple. Accepts array for value."
  },
  "VSelectionControlGroup/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VSelectionControlGroup/inline": {
    "type": "boolean\n",
    "description": "Puts children inputs into a row."
  },
  "VSelectionControlGroup/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VSelectionControlGroup/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VSelectionControlGroup/defaults-target": {
    "type": "string\n",
    "description": "The target component to provide defaults values for."
  },
  "VSelectionControlGroup/false-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when inactive."
  },
  "VSelectionControlGroup/true-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when active."
  },
  "VSelectionControlGroup/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VSheet/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VSheet/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VSheet/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VSheet/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VSheet/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VSheet/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VSheet/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VSheet/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VSheet/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VSheet/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VSheet/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VSheet/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VSheet/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VSheet/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSheet/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSkeletonLoader/type": {
    "type": "  | 'text'\n  | (string & {})\n  | 'image'\n  | 'actions'\n  | 'avatar'\n  | 'article'\n  | 'button'\n  | 'table'\n  | 'divider'\n  | 'subtitle'\n  | 'chip'\n  | 'heading'\n  | 'sentences'\n  | 'paragraph'\n  | 'ossein'\n  | 'card'\n  | 'card-avatar'\n  | 'date-picker'\n  | 'date-picker-options'\n  | 'date-picker-days'\n  | 'list-item'\n  | 'list-item-avatar'\n  | 'list-item-two-line'\n  | 'list-item-avatar-two-line'\n  | 'list-item-three-line'\n  | 'list-item-avatar-three-line'\n  | 'table-heading'\n  | 'table-thead'\n  | 'table-tbody'\n  | 'table-row-divider'\n  | 'table-row'\n  | 'table-tfoot'\n  | (\n      | 'text'\n      | (string & {})\n      | 'image'\n      | 'actions'\n      | 'avatar'\n      | 'article'\n      | 'button'\n      | 'table'\n      | 'divider'\n      | 'subtitle'\n      | 'chip'\n      | 'heading'\n      | 'sentences'\n      | 'paragraph'\n      | 'ossein'\n      | 'card'\n      | 'card-avatar'\n      | 'date-picker'\n      | 'date-picker-options'\n      | 'date-picker-days'\n      | 'list-item'\n      | 'list-item-avatar'\n      | 'list-item-two-line'\n      | 'list-item-avatar-two-line'\n      | 'list-item-three-line'\n      | 'list-item-avatar-three-line'\n      | 'table-heading'\n      | 'table-thead'\n      | 'table-tbody'\n      | 'table-row-divider'\n      | 'table-row'\n      | 'table-tfoot'\n    )[]\n",
    "description": "A string delimited list of skeleton components to create such as `type=\"text@3\"` or `type=\"card, list-item\"`. Will recursively generate a corresponding skeleton from the provided string. Also supports short-hand for multiple elements such as **article@3** and **paragraph@2** which will generate 3 _article_ skeletons and 2 _paragraph_ skeletons. Please see below for a list of available pre-defined options."
  },
  "VSkeletonLoader/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VSkeletonLoader/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VSkeletonLoader/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VSkeletonLoader/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VSkeletonLoader/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VSkeletonLoader/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VSkeletonLoader/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VSkeletonLoader/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSkeletonLoader/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSkeletonLoader/loading": {
    "type": "boolean\n",
    "description": "Applies a loading animation with a on-hover loading cursor. A value of **false** will only work when there is content in the `default` slot."
  },
  "VSkeletonLoader/boilerplate": {
    "type": "boolean\n",
    "description": "Remove the loading animation from the skeleton."
  },
  "VSkeletonLoader/loading-text": {
    "type": "string\n",
    "description": "aria-label for the element in a loading state."
  },
  "VSlideGroup/symbol": {
    "type": "any\n",
    "description": "The [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) used to hook into group functionality for components like [v-btn-toggle](/components/btn-toggle) and [v-bottom-navigation](/components/bottom-navigations/)."
  },
  "VSlideGroup/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSlideGroup/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VSlideGroup/disabled": {
    "type": "boolean\n",
    "description": "Puts all children components into a disabled state."
  },
  "VSlideGroup/max": {
    "type": "number\n",
    "description": "Sets a maximum number of selections that can be made."
  },
  "VSlideGroup/multiple": {
    "type": "boolean\n",
    "description": "Allows one to select multiple items."
  },
  "VSlideGroup/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VSlideGroup/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Sets the designated mobile breakpoint for the component."
  },
  "VSlideGroup/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VSlideGroup/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VSlideGroup/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The appended slot when arrows are shown."
  },
  "VSlideGroup/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The prepended slot when arrows are shown."
  },
  "VSlideGroup/show-arrows": {
    "type": "string | boolean\n",
    "description": "Change when the overflow arrow indicators are shown. By **default**, arrows *always* display on Desktop when the container is overflowing. When the container overflows on mobile, arrows are not shown by default. A **show-arrows** value of `true` allows these arrows to show on Mobile if the container overflowing. A value of `desktop` *always* displays arrows on Desktop while a value of `mobile` always displays arrows on Mobile. A value of `always` always displays arrows on Desktop *and* Mobile. Find more information on how to customize breakpoint thresholds on the [breakpoints page](/customizing/breakpoints)."
  },
  "VSlideGroup/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Switch between horizontal and vertical modes."
  },
  "VSlideGroup/center-active": {
    "type": "boolean\n",
    "description": "Forces the selected component to be centered."
  },
  "VSlideGroupItem/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSlideGroupItem/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VSlideGroupItem/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VSlideXReverseTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSlideXReverseTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VSlideXReverseTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VSlideXReverseTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VSlideXReverseTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VSlideXReverseTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VSlideXTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSlideXTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VSlideXTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VSlideXTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VSlideXTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VSlideXTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VSlideYReverseTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSlideYReverseTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VSlideYReverseTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VSlideYReverseTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VSlideYReverseTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VSlideYReverseTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VSlideYTransition/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSlideYTransition/mode": {
    "type": "string\n",
    "description": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/api/built-in-components.html#transition)."
  },
  "VSlideYTransition/group": {
    "type": "boolean\n",
    "description": "Creates a `transition-group` component. You can find more information in the [vue docs](https://vuejs.org/api/built-in-components.html#transitiongroup)."
  },
  "VSlideYTransition/origin": {
    "type": "string\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VSlideYTransition/hide-on-leave": {
    "type": "boolean\n",
    "description": "Hides the leaving element (no exit animation)."
  },
  "VSlideYTransition/leave-absolute": {
    "type": "boolean\n",
    "description": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))."
  },
  "VSlider/model-value": {
    "type": "string | number\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSlider/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VSlider/reverse": {
    "type": "boolean\n",
    "description": "Reverses the slider direction."
  },
  "VSlider/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VSlider/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VSlider/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VSlider/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VSlider/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VSlider/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VSlider/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VSlider/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSlider/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSlider/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VSlider/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSlider/max": {
    "type": "string | number\n",
    "description": "Sets the maximum allowed value."
  },
  "VSlider/min": {
    "type": "string | number\n",
    "description": "Sets the minimum allowed value."
  },
  "VSlider/step": {
    "type": "string | number\n",
    "description": "If greater than 0, sets step interval for ticks."
  },
  "VSlider/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VSlider/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VSlider/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VSlider/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VSlider/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VSlider/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VSlider/ripple": {
    "type": "boolean\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VSlider/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VSlider/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VSlider/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the input is focused and apply color."
  },
  "VSlider/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VSlider/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VSlider/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VSlider/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VSlider/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VSlider/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VSlider/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VSlider/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VSlider/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VSlider/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VSlider/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VSlider/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VSlider/thumb-color": {
    "type": "string\n",
    "description": "Sets the thumb and thumb label color."
  },
  "VSlider/thumb-label": {
    "type": "boolean | 'always'\n",
    "description": "Show thumb label. If `true` it shows label when using slider. If set to `'always'` it always shows label."
  },
  "VSlider/thumb-size": {
    "type": "string | number\n",
    "description": "Controls the size of the thumb label."
  },
  "VSlider/show-ticks": {
    "type": "boolean | 'always'\n",
    "description": "Show track ticks. If `true` it shows ticks when using slider. If set to `'always'` it always shows ticks."
  },
  "VSlider/ticks": {
    "type": "number[] | Record<number, string>\n",
    "description": "Show track ticks. If `true` it shows ticks when using slider. If set to `'always'` it always shows ticks."
  },
  "VSlider/tick-size": {
    "type": "string | number\n",
    "description": "Controls the size of **ticks**"
  },
  "VSlider/track-color": {
    "type": "string\n",
    "description": "Sets the track's color"
  },
  "VSlider/track-fill-color": {
    "type": "string\n",
    "description": "Sets the track's fill color"
  },
  "VSlider/track-size": {
    "type": "string | number\n",
    "description": "Sets the track's size (height)."
  },
  "VSnackbar/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VSnackbar/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSnackbar/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VSnackbar/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VSnackbar/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VSnackbar/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VSnackbar/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VSnackbar/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VSnackbar/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both.."
  },
  "VSnackbar/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VSnackbar/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the content element."
  },
  "VSnackbar/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VSnackbar/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VSnackbar/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSnackbar/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSnackbar/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VSnackbar/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSnackbar/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VSnackbar/activator": {
    "type": "Element | (string & {}) | 'parent' | ComponentPublicInstance\n",
    "description": "Explicitly sets the overlay's activator."
  },
  "VSnackbar/close-on-back": {
    "type": "boolean\n",
    "description": "Closes the overlay content when the browser's back button is pressed or `$router.back()` is called, cancelling the original navigation. `persistent` overlays will cancel navigation and animate as if they were clicked outside instead of closing."
  },
  "VSnackbar/contained": {
    "type": "boolean\n",
    "description": "Limits the size of the component and scrim to its offset parent. Implies `absolute` and `attach`. (Note: The parent element must have position: relative.)."
  },
  "VSnackbar/content-class": {
    "type": "any\n",
    "description": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component."
  },
  "VSnackbar/content-props": {
    "type": "any\n",
    "description": "Apply custom properties to the content."
  },
  "VSnackbar/opacity": {
    "type": "string | number\n",
    "description": "Sets the opacity of the scrim element. Only applies if `scrim` is enabled."
  },
  "VSnackbar/z-index": {
    "type": "string | number\n",
    "description": "The z-index used for the component."
  },
  "VSnackbar/target": {
    "type": "  | Element\n  | (string & {})\n  | 'parent'\n  | 'cursor'\n  | ComponentPublicInstance\n  | [number, number]\n",
    "description": "For locationStrategy=\"connected\", specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default."
  },
  "VSnackbar/activator-props": {
    "type": "unknown\n",
    "description": "Apply custom properties to the activator."
  },
  "VSnackbar/open-on-click": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is clicked."
  },
  "VSnackbar/open-on-hover": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is hovered."
  },
  "VSnackbar/open-on-focus": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is focused."
  },
  "VSnackbar/close-on-content-click": {
    "type": "boolean\n",
    "description": "Closes component when you click on its content."
  },
  "VSnackbar/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only applies to hover and focus events."
  },
  "VSnackbar/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only applies to hover and focus events."
  },
  "VSnackbar/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VSnackbar/location-strategy": {
    "type": "'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n",
    "description": "A function used to specifies how the component should position relative to its activator."
  },
  "VSnackbar/origin": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VSnackbar/offset": {
    "type": "string | number | number[]\n",
    "description": "Increases distance from the target. When passed as a pair of numbers, the second value shifts anchor along the side and away from the target."
  },
  "VSnackbar/attach": {
    "type": "string | boolean | Element\n",
    "description": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or `true` to disable teleporting. Uses `body` by default."
  },
  "VSnackbar/vertical": {
    "type": "boolean\n",
    "description": "Stacks snackbar content on top of the actions (button)."
  },
  "VSnackbar/multi-line": {
    "type": "boolean\n",
    "description": "Gives the snackbar a larger minimum height."
  },
  "VSnackbar/timer": {
    "type": "string | boolean\n",
    "description": "Display a progress bar that counts down until the snackbar closes. Pass a string to set a custom color, otherwise uses `info`."
  },
  "VSnackbar/timeout": {
    "type": "string | number\n",
    "description": "Time (in milliseconds) to wait until snackbar is automatically hidden.  Use `-1` to keep open indefinitely (`0` in version < 2.3 ). It is recommended for this number to be between `4000` and `10000`. Changes to this property will reset the timeout."
  },
  "VSnackbarQueue/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VSnackbarQueue/closable": {
    "type": "string | boolean\n",
    "description": "Adds a dismiss button that closes the active snackbar."
  },
  "VSnackbarQueue/model-value": {
    "type": "(\n  | string\n  | ({\n      text: string\n      class: any\n      height: string | number\n      maxHeight: string | number\n      maxWidth: string | number\n      minHeight: string | number\n      minWidth: string | number\n      width: string | number\n      location: <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n      position: 'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n      absolute: boolean\n      rounded: string | number | boolean\n      tile: boolean\n      theme: string\n      color: string\n      variant: 'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n      disabled: boolean\n      transition:\n        | string\n        | boolean\n        | (TransitionProps & { component: Component })\n      closeOnBack: boolean\n      contained: boolean\n      contentClass: any\n      contentProps: any\n      opacity: string | number\n      zIndex: string | number\n      target:\n        | Element\n        | (string & {})\n        | 'parent'\n        | 'cursor'\n        | ComponentPublicInstance\n        | [number, number]\n      closeOnContentClick: boolean\n      eager: boolean\n      locationStrategy: 'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n      origin: <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n      offset: string | number | number[]\n      attach: string | boolean | Element\n      vertical: boolean\n      multiLine: boolean\n      timer: string | boolean\n      timeout: string | number\n    } & { style: any })\n)[]\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSnackbarQueue/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VSnackbarQueue/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VSnackbarQueue/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VSnackbarQueue/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VSnackbarQueue/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VSnackbarQueue/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VSnackbarQueue/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both.."
  },
  "VSnackbarQueue/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VSnackbarQueue/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the content element."
  },
  "VSnackbarQueue/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VSnackbarQueue/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VSnackbarQueue/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSnackbarQueue/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSnackbarQueue/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VSnackbarQueue/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSnackbarQueue/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VSnackbarQueue/activator": {
    "type": "Element | (string & {}) | 'parent' | ComponentPublicInstance\n",
    "description": "Explicitly sets the overlay's activator."
  },
  "VSnackbarQueue/close-on-back": {
    "type": "boolean\n",
    "description": "Closes the overlay content when the browser's back button is pressed or `$router.back()` is called, cancelling the original navigation. `persistent` overlays will cancel navigation and animate as if they were clicked outside instead of closing."
  },
  "VSnackbarQueue/contained": {
    "type": "boolean\n",
    "description": "Limits the size of the component and scrim to its offset parent. Implies `absolute` and `attach`. (Note: The parent element must have position: relative.)."
  },
  "VSnackbarQueue/content-class": {
    "type": "any\n",
    "description": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component."
  },
  "VSnackbarQueue/content-props": {
    "type": "any\n",
    "description": "Apply custom properties to the content."
  },
  "VSnackbarQueue/opacity": {
    "type": "string | number\n",
    "description": "Sets the opacity of the scrim element. Only applies if `scrim` is enabled."
  },
  "VSnackbarQueue/z-index": {
    "type": "string | number\n",
    "description": "The z-index used for the component."
  },
  "VSnackbarQueue/target": {
    "type": "  | Element\n  | (string & {})\n  | 'parent'\n  | 'cursor'\n  | ComponentPublicInstance\n  | [number, number]\n",
    "description": "For locationStrategy=\"connected\", specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default."
  },
  "VSnackbarQueue/activator-props": {
    "type": "unknown\n",
    "description": "Apply custom properties to the activator."
  },
  "VSnackbarQueue/open-on-click": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is clicked."
  },
  "VSnackbarQueue/open-on-hover": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is hovered."
  },
  "VSnackbarQueue/open-on-focus": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is focused."
  },
  "VSnackbarQueue/close-on-content-click": {
    "type": "boolean\n",
    "description": "Closes component when you click on its content."
  },
  "VSnackbarQueue/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only applies to hover and focus events."
  },
  "VSnackbarQueue/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only applies to hover and focus events."
  },
  "VSnackbarQueue/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VSnackbarQueue/location-strategy": {
    "type": "'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n",
    "description": "A function used to specifies how the component should position relative to its activator."
  },
  "VSnackbarQueue/origin": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VSnackbarQueue/offset": {
    "type": "string | number | number[]\n",
    "description": "Increases distance from the target. When passed as a pair of numbers, the second value shifts anchor along the side and away from the target."
  },
  "VSnackbarQueue/attach": {
    "type": "string | boolean | Element\n",
    "description": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or `true` to disable teleporting. Uses `body` by default."
  },
  "VSnackbarQueue/vertical": {
    "type": "boolean\n",
    "description": "Stacks snackbar content on top of the actions (button)."
  },
  "VSnackbarQueue/close-text": {
    "type": "string\n",
    "description": "The text used in the close button when using the **closable** prop."
  },
  "VSnackbarQueue/multi-line": {
    "type": "boolean\n",
    "description": "Gives the snackbar a larger minimum height."
  },
  "VSnackbarQueue/timer": {
    "type": "string | boolean\n",
    "description": "Display a progress bar that counts down until the snackbar closes. Pass a string to set a custom color, otherwise uses `info`."
  },
  "VSnackbarQueue/timeout": {
    "type": "string | number\n",
    "description": "Time (in milliseconds) to wait until snackbar is automatically hidden.  Use `-1` to keep open indefinitely (`0` in version < 2.3 ). It is recommended for this number to be between `4000` and `10000`. Changes to this property will reset the timeout."
  },
  "VSpacer/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VSparkline/type": {
    "type": "'trend' | 'bar'\n",
    "description": "Choose between a trendline or bars."
  },
  "VSparkline/fill": {
    "type": "boolean\n",
    "description": "Using the **fill** property allows you to better customize the look and feel of your sparkline."
  },
  "VSparkline/height": {
    "type": "string | number\n",
    "description": "Height of the SVG trendline or bars."
  },
  "VSparkline/labels": {
    "type": "(string | number | { value: number })[]\n",
    "description": "An array of string labels that correspond to the same index as its data counterpart."
  },
  "VSparkline/max": {
    "type": "string | number\n",
    "description": "The maximum value of the sparkline."
  },
  "VSparkline/min": {
    "type": "string | number\n",
    "description": "The minimum value of the sparkline."
  },
  "VSparkline/width": {
    "type": "string | number\n",
    "description": "Width of the SVG trendline or bars."
  },
  "VSparkline/id": {
    "type": "string\n",
    "description": "The id of the component."
  },
  "VSparkline/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSparkline/item-value": {
    "type": "string\n",
    "description": "The value of the item."
  },
  "VSparkline/model-value": {
    "type": "(string | number | { value: number })[]\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSparkline/gradient": {
    "type": "string[]\n",
    "description": "An array of colors to use as a linear-gradient."
  },
  "VSparkline/auto-line-width": {
    "type": "boolean\n",
    "description": "Automatically expand bars to use space efficiently."
  },
  "VSparkline/auto-draw": {
    "type": "boolean\n",
    "description": "Trace the length of the line when first rendered."
  },
  "VSparkline/auto-draw-duration": {
    "type": "string | number\n",
    "description": "Amount of time (in ms) to run the trace animation."
  },
  "VSparkline/auto-draw-easing": {
    "type": "string\n",
    "description": "The easing function to use for the trace animation."
  },
  "VSparkline/gradient-direction": {
    "type": "'top' | 'left' | 'right' | 'bottom'\n",
    "description": "The direction the gradient should run."
  },
  "VSparkline/label-size": {
    "type": "string | number\n",
    "description": "The label font size."
  },
  "VSparkline/line-width": {
    "type": "string | number\n",
    "description": "The thickness of the line, in px."
  },
  "VSparkline/padding": {
    "type": "string | number\n",
    "description": "Low `smooth` or high `line-width` values may result in cropping, increase padding to compensate."
  },
  "VSparkline/show-labels": {
    "type": "boolean\n",
    "description": "Show labels below each data point."
  },
  "VSparkline/smooth": {
    "type": "string | number | boolean\n",
    "description": "Number of px to use as a corner radius. `true` defaults to 8, `false` is 0."
  },
  "VSpeedDial/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSpeedDial/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VSpeedDial/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VSpeedDial/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VSpeedDial/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VSpeedDial/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VSpeedDial/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VSpeedDial/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both.."
  },
  "VSpeedDial/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSpeedDial/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSpeedDial/id": {
    "type": "string\n",
    "description": "The unique identifier of the component."
  },
  "VSpeedDial/transition": {
    "type": "  | string\n  | boolean\n  | (TransitionProps & { component: Component })\n  | {\n      component: ComponentPublicInstanceConstructor<\n        CreateComponentPublicInstanceWithMixins<\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          unknown,\n          {},\n          {},\n          ComponentOptionsMixin,\n          ComponentOptionsMixin,\n          Record<string, any>,\n          PublicProps,\n          {},\n          true,\n          {},\n          SlotsType<Partial<MakeSlots<{ default: never }>>>,\n          GlobalComponents,\n          GlobalDirectives,\n          string,\n          {},\n          any,\n          ComponentProvideOptions,\n          OptionTypesType<{}, {}, {}, {}, {}, {}>,\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          {},\n          {},\n          {},\n          {}\n        >,\n        any,\n        any,\n        any,\n        ComputedOptions,\n        MethodOptions\n      > &\n        ComponentOptionsBase<\n          {} & { target?: HTMLElement | [x: number, y: number] | undefined } & {\n            $children?:\n              | VNodeChild\n              | (() => VNodeChild)\n              | { default?: (() => VNodeChild) | undefined }\n            'v-slots'?:\n              | { default?: false | (() => VNodeChild) | undefined }\n              | undefined\n          } & { 'v-slot:default'?: false | (() => VNodeChild) | undefined },\n          () => any,\n          unknown,\n          {},\n          {},\n          ComponentOptionsMixin,\n          ComponentOptionsMixin,\n          Record<string, any>,\n          string,\n          {},\n          {},\n          string,\n          SlotsType<Partial<MakeSlots<{ default: never }>>>,\n          GlobalComponents,\n          GlobalDirectives,\n          string,\n          ComponentProvideOptions\n        > &\n        VNodeProps &\n        AllowedComponentProps &\n        ComponentCustomProps & {\n          filterProps: (props: T) => Partial<Pick<T, U>>\n        }\n    }\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VSpeedDial/activator": {
    "type": "Element | (string & {}) | 'parent' | ComponentPublicInstance\n",
    "description": "Explicitly sets the overlay's activator."
  },
  "VSpeedDial/close-on-back": {
    "type": "boolean\n",
    "description": "Closes the overlay content when the browser's back button is pressed or `$router.back()` is called, cancelling the original navigation. `persistent` overlays will cancel navigation and animate as if they were clicked outside instead of closing."
  },
  "VSpeedDial/contained": {
    "type": "boolean\n",
    "description": "Limits the size of the component and scrim to its offset parent. Implies `absolute` and `attach`. (Note: The parent element must have position: relative.)."
  },
  "VSpeedDial/content-class": {
    "type": "any\n",
    "description": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component."
  },
  "VSpeedDial/content-props": {
    "type": "any\n",
    "description": "Apply custom properties to the content."
  },
  "VSpeedDial/opacity": {
    "type": "string | number\n",
    "description": "Sets the opacity of the scrim element. Only applies if `scrim` is enabled."
  },
  "VSpeedDial/no-click-animation": {
    "type": "boolean\n",
    "description": "Disables the bounce effect when clicking outside of the content element when using the persistent prop."
  },
  "VSpeedDial/persistent": {
    "type": "boolean\n",
    "description": "Clicking outside of the element or pressing esc key will not deactivate it."
  },
  "VSpeedDial/scrim": {
    "type": "string | boolean\n",
    "description": "Accepts true/false to enable background, and string to define color."
  },
  "VSpeedDial/z-index": {
    "type": "string | number\n",
    "description": "The z-index used for the component."
  },
  "VSpeedDial/target": {
    "type": "  | Element\n  | (string & {})\n  | 'parent'\n  | 'cursor'\n  | ComponentPublicInstance\n  | [number, number]\n",
    "description": "For locationStrategy=\"connected\", specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default."
  },
  "VSpeedDial/activator-props": {
    "type": "unknown\n",
    "description": "Apply custom properties to the activator."
  },
  "VSpeedDial/open-on-click": {
    "type": "boolean\n",
    "description": "Designates whether menu should open on activator click."
  },
  "VSpeedDial/open-on-hover": {
    "type": "boolean\n",
    "description": "Opens speed-dial on hover."
  },
  "VSpeedDial/open-on-focus": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is focused."
  },
  "VSpeedDial/close-on-content-click": {
    "type": "boolean\n",
    "description": "Designates if menu should close when its content is clicked."
  },
  "VSpeedDial/close-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before closing component. Only works with the **open-on-hover** prop."
  },
  "VSpeedDial/open-delay": {
    "type": "string | number\n",
    "description": "Milliseconds to wait before opening component. Only works with the **open-on-hover** prop."
  },
  "VSpeedDial/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VSpeedDial/location-strategy": {
    "type": "'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n",
    "description": "A function used to specifies how the component should position relative to its activator."
  },
  "VSpeedDial/origin": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VSpeedDial/offset": {
    "type": "string | number | number[]\n",
    "description": "Increases distance from the target. When passed as a pair of numbers, the second value shifts anchor along the side and away from the target."
  },
  "VSpeedDial/scroll-strategy": {
    "type": "'close' | 'none' | 'block' | 'reposition' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/scrollStrategies.ts#L17-L17\" target=\"_blank\">ScrollStrategyFunction</a>\n",
    "description": "Strategy used when the component is activate and user scrolls."
  },
  "VSpeedDial/attach": {
    "type": "string | boolean | Element\n",
    "description": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or `true` to disable teleporting. Uses `body` by default."
  },
  "VSpeedDial/submenu": {
    "type": "boolean\n",
    "description": "Opens with right arrow and closes on left instead of up/down. Implies `location=\"end\"`. Directions are reversed for RTL."
  },
  "VStepper/flat": {
    "type": "boolean\n",
    "description": "Removes the stepper's elevation."
  },
  "VStepper/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VStepper/disabled": {
    "type": "boolean\n",
    "description": "Puts all children components into a disabled state."
  },
  "VStepper/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VStepper/max": {
    "type": "number\n",
    "description": "Sets a maximum number of selections that can be made."
  },
  "VStepper/multiple": {
    "type": "boolean\n",
    "description": "Allows one to select multiple items."
  },
  "VStepper/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VStepper/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VStepper/items": {
    "type": "(string | Record<string, any>)[]\n",
    "description": "An array of strings or objects used for automatically generating children components."
  },
  "VStepper/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VStepper/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VStepper/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VStepper/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VStepper/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VStepper/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VStepper/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VStepper/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VStepper/position": {
    "type": "'fixed' | 'relative' | 'static' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VStepper/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VStepper/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VStepper/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VStepper/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VStepper/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VStepper/item-title": {
    "type": "string\n",
    "description": "Property on supplied `items` that contains its title."
  },
  "VStepper/item-value": {
    "type": "string\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VStepper/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VStepper/mobile": {
    "type": "boolean\n",
    "description": "Forces the stepper into a mobile state, removing labels from stepper items."
  },
  "VStepper/hide-actions": {
    "type": "boolean\n",
    "description": "Hide actions bar (prev and next buttons)."
  },
  "VStepper/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VStepper/alt-labels": {
    "type": "boolean\n",
    "description": "Places the labels beneath the step."
  },
  "VStepper/complete-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step is marked as completed."
  },
  "VStepper/edit-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step is editable."
  },
  "VStepper/editable": {
    "type": "boolean\n",
    "description": "Marks step as editable."
  },
  "VStepper/error-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step has an error."
  },
  "VStepper/non-linear": {
    "type": "boolean\n",
    "description": "Allow user to jump to any step."
  },
  "VStepper/prev-text": {
    "type": "string\n",
    "description": "The text used for the Prev button."
  },
  "VStepper/next-text": {
    "type": "string\n",
    "description": "The text used for the Next button."
  },
  "VStepperActions/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VStepperActions/disabled": {
    "type": "boolean | 'prev' | 'next'\n",
    "description": "Removes the ability to click or target the component."
  },
  "VStepperActions/prev-text": {
    "type": "string\n",
    "description": "The text used for the Prev button."
  },
  "VStepperActions/next-text": {
    "type": "string\n",
    "description": "The text used for the Next button."
  },
  "VStepperHeader/tag": {
    "type": "string\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VStepperItem/error": {
    "type": "boolean\n",
    "description": "Puts the stepper item in a manual error state."
  },
  "VStepperItem/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VStepperItem/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VStepperItem/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VStepperItem/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VStepperItem/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VStepperItem/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VStepperItem/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VStepperItem/subtitle": {
    "type": "string\n",
    "description": "Specify a subtitle text for the component."
  },
  "VStepperItem/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VStepper/VStepperItem.tsx#L43-L43\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VStepperItem/complete-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step is marked as completed."
  },
  "VStepperItem/edit-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step is editable."
  },
  "VStepperItem/editable": {
    "type": "boolean\n",
    "description": "Marks step as editable."
  },
  "VStepperItem/error-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step has an error."
  },
  "VStepperItem/complete": {
    "type": "boolean\n",
    "description": "Marks step as complete."
  },
  "VStepperVertical/flat": {
    "type": "boolean\n",
    "description": "Removes the expansion-panel's elevation and borders."
  },
  "VStepperVertical/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VStepperVertical/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VStepperVertical/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VStepperVertical/tile": {
    "type": "boolean\n",
    "description": "Removes the border-radius."
  },
  "VStepperVertical/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VStepperVertical/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VStepperVertical/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VStepperVertical/variant": {
    "type": "'default' | 'inset' | 'accordion' | 'popout'\n",
    "description": "Applies a distinct style to the component."
  },
  "VStepperVertical/disabled": {
    "type": "boolean\n",
    "description": "Puts all children components into a disabled state."
  },
  "VStepperVertical/max": {
    "type": "number\n",
    "description": "Sets a maximum number of selections that can be made."
  },
  "VStepperVertical/multiple": {
    "type": "boolean\n",
    "description": "Allows one to select multiple items."
  },
  "VStepperVertical/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VStepperVertical/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VStepperVertical/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Overrides the display configuration default screen size that the component should be considered in mobile."
  },
  "VStepperVertical/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VStepperVertical/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VStepperVertical/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VStepperVertical/items": {
    "type": "(string | Record<string, any>)[]\n",
    "description": "An array of strings or objects used for automatically generating children components."
  },
  "VStepperVertical/readonly": {
    "type": "boolean\n",
    "description": "Makes the entire expansion panel read only."
  },
  "VStepperVertical/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VStepperVertical/hide-actions": {
    "type": "boolean\n",
    "description": "Hide the expand icon in the content title."
  },
  "VStepperVertical/expand-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a expandable state."
  },
  "VStepperVertical/collapse-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a collapsable state."
  },
  "VStepperVertical/item-title": {
    "type": "string\n",
    "description": "Property on supplied `items` that contains its title."
  },
  "VStepperVertical/item-value": {
    "type": "string\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VStepperVertical/focusable": {
    "type": "boolean\n",
    "description": "Makes the expansion-panel headers focusable."
  },
  "VStepperVertical/prev-text": {
    "type": "string\n",
    "description": "The text used for the Prev button."
  },
  "VStepperVertical/next-text": {
    "type": "string\n",
    "description": "The text used for the Next button."
  },
  "VStepperVertical/alt-labels": {
    "type": "boolean\n",
    "description": "Places the labels beneath the step."
  },
  "VStepperVertical/complete-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step is marked as completed."
  },
  "VStepperVertical/edit-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step is editable."
  },
  "VStepperVertical/editable": {
    "type": "boolean\n",
    "description": "Marks step as editable."
  },
  "VStepperVertical/error-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step has an error."
  },
  "VStepperVertical/non-linear": {
    "type": "boolean\n",
    "description": "Allow user to jump to any step."
  },
  "VStepperVerticalActions/disabled": {
    "type": "boolean | 'next' | 'prev'\n",
    "description": "Removes the ability to click or target the component."
  },
  "VStepperVerticalActions/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VStepperVerticalActions/prev-text": {
    "type": "string\n",
    "description": "The text used for the Prev button."
  },
  "VStepperVerticalActions/next-text": {
    "type": "string\n",
    "description": "The text used for the Next button."
  },
  "VStepperVerticalItem/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VStepperVerticalItem/error": {
    "type": "boolean\n",
    "description": "Puts the stepper item in a manual error state."
  },
  "VStepperVerticalItem/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VStepperVerticalItem/disabled": {
    "type": "boolean\n",
    "description": "Disables the expansion-panel content."
  },
  "VStepperVerticalItem/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VStepperVerticalItem/value": {
    "type": "any\n",
    "description": "Controls the opened/closed state of content."
  },
  "VStepperVerticalItem/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VStepperVerticalItem/readonly": {
    "type": "boolean\n",
    "description": "Makes the expansion panel content read only."
  },
  "VStepperVerticalItem/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VStepperVerticalItem/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VStepperVerticalItem/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VStepperVerticalItem/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VStepperVerticalItem/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VStepperVerticalItem/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VStepperVerticalItem/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VStepperVerticalItem/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VStepperVerticalItem/static": {
    "type": "boolean\n",
    "description": "Remove title size expansion when selected."
  },
  "VStepperVerticalItem/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VStepperVerticalItem/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VStepperVerticalItem/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VStepperVerticalItem/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VStepperVerticalItem/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VStepperVerticalItem/subtitle": {
    "type": "string\n",
    "description": "Specify a subtitle text for the component."
  },
  "VStepperVerticalItem/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VStepperVerticalItem/expand-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a expandable state."
  },
  "VStepperVerticalItem/collapse-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when the expansion panel is in a collapsable state."
  },
  "VStepperVerticalItem/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VStepper/VStepperItem.tsx#L43-L43\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VStepperVerticalItem/hide-actions": {
    "type": "boolean\n",
    "description": "Hide the expand icon in the content title."
  },
  "VStepperVerticalItem/complete-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step is marked as completed."
  },
  "VStepperVerticalItem/edit-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step is editable."
  },
  "VStepperVerticalItem/editable": {
    "type": "boolean\n",
    "description": "Marks step as editable."
  },
  "VStepperVerticalItem/error-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when step has an error."
  },
  "VStepperVerticalItem/complete": {
    "type": "boolean\n",
    "description": "Marks step as complete."
  },
  "VStepperVerticalItem/focusable": {
    "type": "boolean\n",
    "description": "Makes the expansion panel content focusable."
  },
  "VStepperWindow/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VStepperWindow/reverse": {
    "type": "boolean\n",
    "description": "Reverse the normal transition direction."
  },
  "VStepperWindow/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VStepperWindow/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VStepperWindow/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VStepperWindow/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VStepperWindow/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "The transition direction when changing windows."
  },
  "VStepperWindowItem/disabled": {
    "type": "boolean\n",
    "description": "Prevents the item from becoming active when using the \"next\" and \"prev\" buttons or the `toggle` method."
  },
  "VStepperWindowItem/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VStepperWindowItem/transition": {
    "type": "string | boolean\n",
    "description": "The transition used when the component progressing through items. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VStepperWindowItem/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VStepperWindowItem/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VStepperWindowItem/reverse-transition": {
    "type": "string | boolean\n",
    "description": "Sets the reverse transition."
  },
  "VSvgIcon/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VSvgIcon/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component."
  },
  "VSwitch/flat": {
    "type": "boolean\n",
    "description": "Display component without elevation. Default elevation for thumb is 4dp, `flat` resets it."
  },
  "VSwitch/type": {
    "type": "string\n",
    "description": "Provides the default type for children selection controls."
  },
  "VSwitch/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VSwitch/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VSwitch/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VSwitch/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VSwitch/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VSwitch/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VSwitch/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSwitch/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSwitch/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VSwitch/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VSwitch/indeterminate": {
    "type": "boolean\n",
    "description": "Sets an indeterminate state for the switch."
  },
  "VSwitch/multiple": {
    "type": "boolean\n",
    "description": "Changes expected model to an array."
  },
  "VSwitch/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VSwitch/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VSwitch/inline": {
    "type": "boolean\n",
    "description": "Puts children inputs into a row."
  },
  "VSwitch/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VSwitch/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VSwitch/inset": {
    "type": "boolean\n",
    "description": "Enlarge the `v-switch` track to encompass the thumb."
  },
  "VSwitch/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VSwitch/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VSwitch/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VSwitch/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VSwitch/loading": {
    "type": "string | boolean\n",
    "description": "Displays circular progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - primary, secondary, success, info, warning, error) or a Boolean which uses the component color (set by color prop - if it's supported by the component) or the primary color."
  },
  "VSwitch/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VSwitch/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VSwitch/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the input is focused and apply color."
  },
  "VSwitch/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VSwitch/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VSwitch/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VSwitch/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VSwitch/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VSwitch/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VSwitch/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VSwitch/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VSwitch/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VSwitch/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VSwitch/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VSwitch/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VSwitch/true-value": {
    "type": "any\n",
    "description": "Sets value for truthy state."
  },
  "VSwitch/false-value": {
    "type": "any\n",
    "description": "Sets value for falsy state."
  },
  "VSwitch/defaults-target": {
    "type": "string\n",
    "description": "The target component to provide defaults values for."
  },
  "VSwitch/false-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when inactive."
  },
  "VSwitch/true-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when active."
  },
  "VSwitch/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VSystemBar/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VSystemBar/name": {
    "type": "string\n",
    "description": "Assign a specific name for layout registration."
  },
  "VSystemBar/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VSystemBar/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VSystemBar/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VSystemBar/absolute": {
    "type": "boolean\n",
    "description": "Applies **position: absolute** to the component."
  },
  "VSystemBar/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VSystemBar/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VSystemBar/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VSystemBar/order": {
    "type": "string | number\n",
    "description": "Adjust the order of the component in relation to its registration order."
  },
  "VSystemBar/window": {
    "type": "boolean\n",
    "description": "Increases the system bar height to 32px (24px default)."
  },
  "VTab/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VTab/fixed": {
    "type": "boolean\n",
    "description": "Forces component to take up all available space up to their maximum width (300px), and centers it."
  },
  "VTab/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTab/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VTab/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VTab/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VTab/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VTab/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VTab/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTab/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VTab/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VTab/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
  },
  "VTab/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VTab/readonly": {
    "type": "boolean\n",
    "description": "Puts the button in a readonly state. Cannot be clicked or navigated to by keyboard."
  },
  "VTab/slim": {
    "type": "boolean\n",
    "description": "Reduces padding to 0 8px."
  },
  "VTab/stacked": {
    "type": "boolean\n",
    "description": "Displays the tab as a flex-column."
  },
  "VTab/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VTab/text": {
    "type": "string | number | boolean\n",
    "description": "Specify content text for the component."
  },
  "VTab/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VTab/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VTab/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VTab/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VTab/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VTab/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VTab/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VTab/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VTab/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VTab/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VTab/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VTab/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VTab/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VTab/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VTab/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTab/variant": {
    "type": "'flat' | 'text' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VTab/icon": {
    "type": "  | boolean\n  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon using the [v-icon](/components/icons/) component. The button will become _round_."
  },
  "VTab/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the tabs. Can be either `horizontal` or `vertical`."
  },
  "VTab/slider-color": {
    "type": "string\n",
    "description": "Applies specified color to the slider when active on that component - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTab/hide-slider": {
    "type": "boolean\n",
    "description": "Hides the active tab slider component (no exit or enter animation)."
  },
  "VTable/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VTable/height": {
    "type": "string | number\n",
    "description": "Use the height prop to set the height of the table."
  },
  "VTable/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTable/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTable/hover": {
    "type": "boolean\n",
    "description": "Will add a hover effect to a table's row when the mouse is over it."
  },
  "VTable/fixed-header": {
    "type": "boolean\n",
    "description": "Use the fixed-header prop together with the height prop to fix the header to the top of the table."
  },
  "VTable/fixed-footer": {
    "type": "boolean\n",
    "description": "Use the fixed-footer prop together with the height prop to fix the footer to the bottom of the table."
  },
  "VTabs/symbol": {
    "type": "any\n",
    "description": "The [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) used to hook into group functionality for components like [v-btn-toggle](/components/btn-toggle) and [v-bottom-navigation](/components/bottom-navigations/)."
  },
  "VTabs/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTabs/disabled": {
    "type": "boolean\n",
    "description": "Puts all children components into a disabled state."
  },
  "VTabs/height": {
    "type": "string | number\n",
    "description": "Sets the height of the tabs bar."
  },
  "VTabs/max": {
    "type": "number\n",
    "description": "Sets a maximum number of selections that can be made."
  },
  "VTabs/multiple": {
    "type": "boolean\n",
    "description": "Allows one to select multiple items."
  },
  "VTabs/items": {
    "type": "unknown[]\n",
    "description": "The items to display in the component. This can be an array of strings or objects with a property `text`."
  },
  "VTabs/stacked": {
    "type": "boolean\n",
    "description": "Apply the stacked prop to all children v-tab components."
  },
  "VTabs/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VTabs/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VTabs/color": {
    "type": "string\n",
    "description": "Applies specified color to the selected tab - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTabs/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTabs/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VTabs/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VTabs/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the tabs. Can be either `horizontal` or `vertical`."
  },
  "VTabs/mobile": {
    "type": "boolean\n",
    "description": "Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint"
  },
  "VTabs/mobile-breakpoint": {
    "type": "number | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n",
    "description": "Sets the designated mobile breakpoint for the component."
  },
  "VTabs/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Left pagination icon."
  },
  "VTabs/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Right pagination icon."
  },
  "VTabs/slider-color": {
    "type": "string\n",
    "description": "Changes the background color of an auto-generated `v-tabs-slider`."
  },
  "VTabs/hide-slider": {
    "type": "boolean\n",
    "description": "Hide's the generated `v-tabs-slider`."
  },
  "VTabs/align-tabs": {
    "type": "'title' | 'start' | 'end' | 'center'\n",
    "description": "Aligns the tabs to the `start`, `center`, or `end` of container. Also accepts `title` to align with the `v-toolbar-title` component."
  },
  "VTabs/fixed-tabs": {
    "type": "boolean\n",
    "description": "`v-tabs-item` min-width 160px, max-width 360px."
  },
  "VTabs/grow": {
    "type": "boolean\n",
    "description": "Force `v-tab`'s to take up all available space."
  },
  "VTabs/center-active": {
    "type": "boolean\n",
    "description": "Forces the selected tab to be centered."
  },
  "VTabs/show-arrows": {
    "type": "string | boolean\n",
    "description": "Show pagination arrows if the tab items overflow their container. For mobile devices, arrows will only display when using this prop."
  },
  "VTabsWindow/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VTabsWindow/reverse": {
    "type": "boolean\n",
    "description": "Reverse the normal transition direction."
  },
  "VTabsWindow/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTabsWindow/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTabsWindow/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VTabsWindow/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VTabsWindow/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "The transition direction when changing windows."
  },
  "VTabsWindowItem/disabled": {
    "type": "boolean\n",
    "description": "Prevents the item from becoming active when using the \"next\" and \"prev\" buttons or the `toggle` method."
  },
  "VTabsWindowItem/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VTabsWindowItem/transition": {
    "type": "string | boolean\n",
    "description": "The transition used when the component progressing through items. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VTabsWindowItem/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VTabsWindowItem/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VTabsWindowItem/reverse-transition": {
    "type": "string | boolean\n",
    "description": "Sets the reverse transition."
  },
  "VTextField/flat": {
    "type": "boolean\n",
    "description": "Removes elevation (shadow) added to element when using the **solo** or **solo-inverted** props."
  },
  "VTextField/type": {
    "type": "string\n",
    "description": "Sets input type."
  },
  "VTextField/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VTextField/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VTextField/reverse": {
    "type": "boolean\n",
    "description": "Reverses the input orientation."
  },
  "VTextField/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VTextField/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VTextField/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VTextField/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VTextField/rounded": {
    "type": "string | number | boolean\n",
    "description": "Adds a border radius to the input."
  },
  "VTextField/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VTextField/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTextField/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTextField/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VTextField/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VTextField/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VTextField/placeholder": {
    "type": "string\n",
    "description": "Sets the input’s placeholder text."
  },
  "VTextField/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VTextField/prefix": {
    "type": "string\n",
    "description": "Displays prefix text."
  },
  "VTextField/role": {
    "type": "string\n",
    "description": "The role attribute applied to the input."
  },
  "VTextField/autofocus": {
    "type": "boolean\n",
    "description": "Enables autofocus."
  },
  "VTextField/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VTextField/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTextField/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VTextField/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VTextField/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the outside the component's input, uses the same syntax as `v-icon`."
  },
  "VTextField/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VTextField/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VTextField/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VTextField/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VTextField/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VTextField/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VTextField/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VTextField/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VTextField/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VTextField/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VTextField/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VTextField/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VTextField/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VTextField/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VTextField/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VTextField/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VTextField/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VTextField/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VTextField/counter": {
    "type": "string | number | boolean\n",
    "description": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation."
  },
  "VTextField/persistent-placeholder": {
    "type": "boolean\n",
    "description": "Forces placeholder to always be visible."
  },
  "VTextField/persistent-counter": {
    "type": "boolean\n",
    "description": "Forces counter to always be visible."
  },
  "VTextField/suffix": {
    "type": "string\n",
    "description": "Displays suffix text."
  },
  "VTextField/append-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **append-inner** slot."
  },
  "VTextField/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VTextField/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Applied when using **clearable** and the input is dirty."
  },
  "VTextField/dirty": {
    "type": "boolean\n",
    "description": "Manually apply the dirty state styling."
  },
  "VTextField/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VTextField/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon inside the component's input, uses the same syntax as `v-icon`."
  },
  "VTextField/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VTextField/counter-value": {
    "type": "number | ((value: any) => number)\n",
    "description": "Function returns the counter display text."
  },
  "VTextField/model-modifiers": {
    "type": "unknown\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VTextarea/flat": {
    "type": "boolean\n",
    "description": "Removes box shadow when using a variant with elevation."
  },
  "VTextarea/reverse": {
    "type": "boolean\n",
    "description": "Reverses the orientation."
  },
  "VTextarea/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VTextarea/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VTextarea/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VTextarea/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the input."
  },
  "VTextarea/placeholder": {
    "type": "string\n",
    "description": "Sets the input's placeholder text."
  },
  "VTextarea/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VTextarea/id": {
    "type": "string\n",
    "description": "Sets the DOM id on the component."
  },
  "VTextarea/prefix": {
    "type": "string\n",
    "description": "Displays prefix text."
  },
  "VTextarea/autofocus": {
    "type": "boolean\n",
    "description": "The element should be focused as soon as the page loads."
  },
  "VTextarea/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTextarea/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VTextarea/base-color": {
    "type": "string\n",
    "description": "Sets the color of the input when it is not focused."
  },
  "VTextarea/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VTextarea/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VTextarea/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VTextarea/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VTextarea/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VTextarea/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VTextarea/loading": {
    "type": "string | boolean\n",
    "description": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color."
  },
  "VTextarea/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VTextarea/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VTextarea/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTextarea/variant": {
    "type": "  | 'outlined'\n  | 'plain'\n  | 'underlined'\n  | 'filled'\n  | 'solo'\n  | 'solo-inverted'\n  | 'solo-filled'\n",
    "description": "Applies a distinct style to the component."
  },
  "VTextarea/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTextarea/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VTextarea/counter": {
    "type": "string | number | true\n",
    "description": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation."
  },
  "VTextarea/persistent-placeholder": {
    "type": "boolean\n",
    "description": "Forces placeholder to always be visible."
  },
  "VTextarea/persistent-counter": {
    "type": "boolean\n",
    "description": "Forces counter to always be visible."
  },
  "VTextarea/suffix": {
    "type": "string\n",
    "description": "Displays suffix text."
  },
  "VTextarea/center-affix": {
    "type": "boolean\n",
    "description": "Vertically align **appendInner**, **prependInner**, **clearIcon** and **label** in the center."
  },
  "VTextarea/glow": {
    "type": "boolean\n",
    "description": "Makes prepend/append icons full opacity when the field is focused and apply color."
  },
  "VTextarea/icon-color": {
    "type": "string | boolean\n",
    "description": "Sets the color of the prepend/append icons."
  },
  "VTextarea/hide-spin-buttons": {
    "type": "boolean\n",
    "description": "Hides spin buttons on the input when type is set to `number`."
  },
  "VTextarea/hint": {
    "type": "string\n",
    "description": "Displays hint text below the input when focused. Force this always open with the [persistent-hint](#props-persistent-hint) property."
  },
  "VTextarea/persistent-hint": {
    "type": "boolean\n",
    "description": "Forces [hint](#props-hint) to always be visible."
  },
  "VTextarea/messages": {
    "type": "string | string[]\n",
    "description": "Displays a list of messages or a single message if using a string."
  },
  "VTextarea/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Changes the direction of the input."
  },
  "VTextarea/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VTextarea/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VTextarea/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VTextarea/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VTextarea/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VTextarea/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VTextarea/hide-details": {
    "type": "boolean | 'auto'\n",
    "description": "Hides hint and validation errors. When set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
  },
  "VTextarea/append-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **append-inner** slot."
  },
  "VTextarea/clearable": {
    "type": "boolean\n",
    "description": "Allows for the component to be cleared."
  },
  "VTextarea/clear-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when the **clearable** prop is set to true."
  },
  "VTextarea/dirty": {
    "type": "boolean\n",
    "description": "Manually apply the dirty state styling."
  },
  "VTextarea/persistent-clear": {
    "type": "boolean\n",
    "description": "Always show the clearable icon when the input is dirty (By default it only shows on hover)."
  },
  "VTextarea/prepend-inner-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend-inner** slot."
  },
  "VTextarea/single-line": {
    "type": "boolean\n",
    "description": "Label does not move on focus/dirty."
  },
  "VTextarea/counter-value": {
    "type": "(value: any) => number\n",
    "description": "Display the input length but do not provide any validation."
  },
  "VTextarea/model-modifiers": {
    "type": "unknown\n",
    "description": "**FOR INTERNAL USE ONLY**"
  },
  "VTextarea/auto-grow": {
    "type": "boolean\n",
    "description": "Automatically grow the textarea depending on amount of text."
  },
  "VTextarea/no-resize": {
    "type": "boolean\n",
    "description": "Remove resize handle."
  },
  "VTextarea/rows": {
    "type": "string | number\n",
    "description": "Default row count."
  },
  "VTextarea/max-rows": {
    "type": "string | number\n",
    "description": "Specifies the maximum number of rows for **auto-grow**."
  },
  "VThemeProvider/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VThemeProvider/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VThemeProvider/with-background": {
    "type": "boolean\n",
    "description": "Use the current value of `$vuetify.theme.dark` as opposed to the provided one."
  },
  "VTimePicker/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VTimePicker/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VTimePicker/model-value": {
    "type": "any\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VTimePicker/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VTimePicker/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VTimePicker/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VTimePicker/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VTimePicker/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VTimePicker/width": {
    "type": "string | number\n",
    "description": "Width of the picker."
  },
  "VTimePicker/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VTimePicker/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the component's location. Can combine by using a space separated string."
  },
  "VTimePicker/position": {
    "type": "'fixed' | 'static' | 'relative' | 'absolute' | 'sticky'\n",
    "description": "Sets the position for the component."
  },
  "VTimePicker/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VTimePicker/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VTimePicker/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTimePicker/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTimePicker/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTimePicker/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VTimePicker/max": {
    "type": "string\n",
    "description": "Maximum allowed time."
  },
  "VTimePicker/min": {
    "type": "string\n",
    "description": "Minimum allowed time."
  },
  "VTimePicker/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTimePicker/scrollable": {
    "type": "boolean\n",
    "description": "Allows changing hour/minute with mouse scroll."
  },
  "VTimePicker/readonly": {
    "type": "boolean\n",
    "description": "Puts picker in readonly state."
  },
  "VTimePicker/divided": {
    "type": "boolean\n",
    "description": "Adds a divider between the header and controls."
  },
  "VTimePicker/hide-header": {
    "type": "boolean\n",
    "description": "Hide the picker header."
  },
  "VTimePicker/view-mode": {
    "type": "'hour' | 'minute' | 'second'\n",
    "description": "The current view mode of the picker.`"
  },
  "VTimePicker/ampm-in-title": {
    "type": "boolean\n",
    "description": "Place AM/PM switch in title, not near the clock."
  },
  "VTimePicker/format": {
    "type": "'ampm' | '24hr'\n",
    "description": "Defines the format of a time displayed in picker. Available options are `ampm` and `24hr`."
  },
  "VTimePicker/use-seconds": {
    "type": "boolean\n",
    "description": "Toggles the use of seconds in picker."
  },
  "VTimePicker/allowed-hours": {
    "type": "number[] | ((val: number) => boolean)\n",
    "description": "Restricts which hours can be selected."
  },
  "VTimePicker/allowed-minutes": {
    "type": "number[] | ((val: number) => boolean)\n",
    "description": "Restricts which minutes can be selected."
  },
  "VTimePicker/allowed-seconds": {
    "type": "number[] | ((val: number) => boolean)\n",
    "description": "Restricts which seconds can be selected."
  },
  "VTimePickerClock/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VTimePickerClock/max": {
    "type": "number\n",
    "description": "Defines the maximum time value that can be selected."
  },
  "VTimePickerClock/min": {
    "type": "number\n",
    "description": "Defines the minimum time value that can be selected."
  },
  "VTimePickerClock/step": {
    "type": "number\n",
    "description": "Defines the increments between selectable times, such as a step of 1 for every minute or a larger step for every 5 or 15 minutes."
  },
  "VTimePickerClock/readonly": {
    "type": "boolean\n",
    "description": "When true, the picker is in a read-only state, and users cannot modify the selected time."
  },
  "VTimePickerClock/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTimePickerClock/model-value": {
    "type": "number\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VTimePickerClock/scrollable": {
    "type": "boolean\n",
    "description": "Allows the time selection to be scrollable, enhancing user experience for devices with scroll inputs."
  },
  "VTimePickerClock/rotate": {
    "type": "number\n",
    "description": "Controls rotation, specifying the degree of rotation for the clock hands."
  },
  "VTimePickerClock/ampm": {
    "type": "boolean\n",
    "description": "Displays time in a 12-hour format."
  },
  "VTimePickerClock/displayed-value": {
    "type": "any\n",
    "description": "Used to display a custom value on the clock."
  },
  "VTimePickerClock/double": {
    "type": "boolean\n",
    "description": "If set, this probably indicates a double rotation or a mode where more than one set of values (like hours and minutes) is displayed on the clock at the same time."
  },
  "VTimePickerClock/format": {
    "type": "Function\n",
    "description": "Specifies the format of the displayed time, either 12-hour or 24-hour, depending on the component's setup."
  },
  "VTimePickerClock/allowed-values": {
    "type": "(value: number) => boolean\n",
    "description": "Restricts which hours can be selected."
  },
  "VTimePickerControls/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTimePickerControls/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VTimePickerControls/value": {
    "type": "number\n",
    "description": "The current value of the timepicker."
  },
  "VTimePickerControls/readonly": {
    "type": "boolean\n",
    "description": "Makes the timepicker readonly."
  },
  "VTimePickerControls/view-mode": {
    "type": "'hour' | 'minute' | 'second'\n",
    "description": "The current view mode of the timepicker. Can be either `hour`, `minute`, or `second`."
  },
  "VTimePickerControls/ampm-in-title": {
    "type": "boolean\n",
    "description": "Displays AM/PM in the title."
  },
  "VTimePickerControls/ampm": {
    "type": "boolean\n",
    "description": "Enables AM/PM mode."
  },
  "VTimePickerControls/hour": {
    "type": "number\n",
    "description": "The current hour value."
  },
  "VTimePickerControls/minute": {
    "type": "number\n",
    "description": "The current minute value."
  },
  "VTimePickerControls/second": {
    "type": "number\n",
    "description": "The current second value."
  },
  "VTimePickerControls/use-seconds": {
    "type": "boolean\n",
    "description": "Enables the display and selection of seconds in the timepicker."
  },
  "VTimePickerControls/ampm-readonly": {
    "type": "boolean\n",
    "description": "Makes AM/PM controls readonly."
  },
  "VTimePickerControls/period": {
    "type": "'am' | 'pm'\n",
    "description": "The current period value. either `am` or `pm`."
  },
  "VTimeline/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTimeline/align": {
    "type": "'start' | 'center'\n",
    "description": "Places the timeline dot at the top or center of the timeline item."
  },
  "VTimeline/size": {
    "type": "string | number\n",
    "description": "Sets the height and width of the component. Default unit is px. Can also use the following predefined sizes: **x-small**, **small**, **default**, **large**, and **x-large**."
  },
  "VTimeline/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTimeline/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VTimeline/icon-color": {
    "type": "string\n",
    "description": "Color of the icon."
  },
  "VTimeline/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "Display timeline in a **vertical** or **horizontal** direction."
  },
  "VTimeline/justify": {
    "type": "string\n",
    "description": "Places timeline line at the center or automatically on the left or right side."
  },
  "VTimeline/line-thickness": {
    "type": "string | number\n",
    "description": "Thickness of the timeline line."
  },
  "VTimeline/line-color": {
    "type": "string\n",
    "description": "Color of the timeline line."
  },
  "VTimeline/dot-color": {
    "type": "string\n",
    "description": "Color of the item dot."
  },
  "VTimeline/fill-dot": {
    "type": "boolean\n",
    "description": "Remove outer border of item dot, making the color fill the entire dot."
  },
  "VTimeline/hide-opposite": {
    "type": "boolean\n",
    "description": "Hide opposite content if it exists."
  },
  "VTimeline/line-inset": {
    "type": "string | number\n",
    "description": "Specifies the distance between the line and the dot of timeline items."
  },
  "VTimeline/side": {
    "type": "'start' | 'end'\n",
    "description": "Display all timeline items on one side of the timeline, either **start** or **end**."
  },
  "VTimeline/truncate-line": {
    "type": "'start' | 'end' | 'both'\n",
    "description": "Truncate timeline directly at the **start** or **end** of the line, or on **both** ends."
  },
  "VTimelineItem/icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Apply a specific icon to the inside dot using the [v-icon](/components/icons/) component."
  },
  "VTimelineItem/density": {
    "type": "'default' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VTimelineItem/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VTimelineItem/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VTimelineItem/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VTimelineItem/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VTimelineItem/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VTimelineItem/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VTimelineItem/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VTimelineItem/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VTimelineItem/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VTimelineItem/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTimelineItem/size": {
    "type": "string | number\n",
    "description": "Size of the item dot"
  },
  "VTimelineItem/icon-color": {
    "type": "string\n",
    "description": "Color of the icon."
  },
  "VTimelineItem/side": {
    "type": "'end' | 'start'\n",
    "description": "Show the item either **before** or **after** the timeline. This will override the implicit ordering of items, but will in turn be overridden by the `v-timeline` **single-side** prop."
  },
  "VTimelineItem/dot-color": {
    "type": "string\n",
    "description": "Color of the item dot."
  },
  "VTimelineItem/fill-dot": {
    "type": "boolean\n",
    "description": "Remove outer border of item dot, making the color fill the entire dot."
  },
  "VTimelineItem/hide-dot": {
    "type": "boolean\n",
    "description": "Hide the timeline item dot."
  },
  "VTimelineItem/hide-opposite": {
    "type": "boolean\n",
    "description": "Hide opposite content if it exists."
  },
  "VTimelineItem/line-inset": {
    "type": "string | number\n",
    "description": "Specifies the distance between the line and the dot of the item."
  },
  "VToolbar/flat": {
    "type": "boolean\n",
    "description": "Removes the toolbar's box-shadow."
  },
  "VToolbar/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VToolbar/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VToolbar/height": {
    "type": "string | number\n",
    "description": "Designates a specific height for the toolbar. Overrides the heights imposed by other props, e.g. **prominent**, **dense**, **extended**, etc."
  },
  "VToolbar/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VToolbar/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VToolbar/density": {
    "type": "'default' | 'comfortable' | 'compact' | 'prominent'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VToolbar/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VToolbar/absolute": {
    "type": "boolean\n",
    "description": "Applies position: absolute to the component."
  },
  "VToolbar/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VToolbar/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VToolbar/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VToolbar/image": {
    "type": "string\n",
    "description": "Specifies a [v-img](/components/images) as the component's background."
  },
  "VToolbar/floating": {
    "type": "boolean\n",
    "description": "Applies **display: inline-flex** to the component."
  },
  "VToolbar/collapse": {
    "type": "boolean\n",
    "description": "Puts the toolbar into a collapsed state reducing its maximum width."
  },
  "VToolbar/extended": {
    "type": "boolean\n",
    "description": "Use this prop to increase the height of the toolbar _without_ using the `extension` slot for adding content. May be used in conjunction with the **extension-height** prop, and any of the other props that affect the height of the toolbar, e.g. **prominent**, **dense**, etc., **WITH THE EXCEPTION** of **height**."
  },
  "VToolbar/extension-height": {
    "type": "string | number\n",
    "description": "Specify an explicit height for the `extension` slot."
  },
  "VToolbarItems/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VToolbarItems/variant": {
    "type": "'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VToolbarTitle/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VToolbarTitle/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VTooltip/text": {
    "type": "string\n",
    "description": "Specify content text for the component."
  },
  "VTooltip/model-value": {
    "type": "boolean\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VTooltip/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VTooltip/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VTooltip/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VTooltip/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VTooltip/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VTooltip/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VTooltip/location": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a>\n",
    "description": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both.."
  },
  "VTooltip/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTooltip/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VTooltip/id": {
    "type": "string\n",
    "description": "HTML id attribute of the tooltip overlay. If not set, a globally unique id will be used."
  },
  "VTooltip/transition": {
    "type": "string | boolean | (TransitionProps & { component: Component })\n",
    "description": "Sets the component transition. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VTooltip/activator": {
    "type": "Element | (string & {}) | 'parent' | ComponentPublicInstance\n",
    "description": "Explicitly sets the overlay's activator."
  },
  "VTooltip/close-on-back": {
    "type": "boolean\n",
    "description": "Closes the overlay content when the browser's back button is pressed or `$router.back()` is called, cancelling the original navigation. `persistent` overlays will cancel navigation and animate as if they were clicked outside instead of closing."
  },
  "VTooltip/contained": {
    "type": "boolean\n",
    "description": "Limits the size of the component and scrim to its offset parent. Implies `absolute` and `attach`. (Note: The parent element must have position: relative.)."
  },
  "VTooltip/content-class": {
    "type": "any\n",
    "description": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component."
  },
  "VTooltip/content-props": {
    "type": "any\n",
    "description": "Apply custom properties to the content."
  },
  "VTooltip/opacity": {
    "type": "string | number\n",
    "description": "Sets the opacity of the scrim element. Only applies if `scrim` is enabled."
  },
  "VTooltip/no-click-animation": {
    "type": "boolean\n",
    "description": "Disables the bounce effect when clicking outside of the content element when using the persistent prop."
  },
  "VTooltip/scrim": {
    "type": "string | boolean\n",
    "description": "Accepts true/false to enable background, and string to define color."
  },
  "VTooltip/z-index": {
    "type": "string | number\n",
    "description": "The z-index used for the component."
  },
  "VTooltip/target": {
    "type": "  | Element\n  | (string & {})\n  | 'parent'\n  | 'cursor'\n  | ComponentPublicInstance\n  | [number, number]\n",
    "description": "For locationStrategy=\"connected\", specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default."
  },
  "VTooltip/activator-props": {
    "type": "unknown\n",
    "description": "Apply custom properties to the activator."
  },
  "VTooltip/open-on-click": {
    "type": "boolean\n",
    "description": "Designates whether the tooltip should open on activator click."
  },
  "VTooltip/open-on-hover": {
    "type": "boolean\n",
    "description": "Designates whether the tooltip should open on activator hover."
  },
  "VTooltip/open-on-focus": {
    "type": "boolean\n",
    "description": "Activate the component when the activator is focused."
  },
  "VTooltip/close-on-content-click": {
    "type": "boolean\n",
    "description": "Closes component when you click on its content."
  },
  "VTooltip/close-delay": {
    "type": "string | number\n",
    "description": "Delay (in ms) after which menu closes (when open-on-hover prop is set to true)."
  },
  "VTooltip/open-delay": {
    "type": "string | number\n",
    "description": "Delay (in ms) after which tooltip opens (when `open-on-hover` prop is set to **true**)."
  },
  "VTooltip/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VTooltip/location-strategy": {
    "type": "'static' | 'connected' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/locationStrategies.ts#L38-L42\" target=\"_blank\">LocationStrategyFunction</a>\n",
    "description": "A function used to specifies how the component should position relative to its activator."
  },
  "VTooltip/origin": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/anchor.ts#L8-L14\" target=\"_blank\">Anchor</a> | 'auto' | 'overlap'\n",
    "description": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)."
  },
  "VTooltip/offset": {
    "type": "string | number | number[]\n",
    "description": "Increases distance from the target. When passed as a pair of numbers, the second value shifts anchor along the side and away from the target."
  },
  "VTooltip/scroll-strategy": {
    "type": "'close' | 'none' | 'block' | 'reposition' | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VOverlay/scrollStrategies.ts#L17-L17\" target=\"_blank\">ScrollStrategyFunction</a>\n",
    "description": "Strategy used when the component is activate and user scrolls."
  },
  "VTooltip/attach": {
    "type": "string | boolean | Element\n",
    "description": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or `true` to disable teleporting. Uses `body` by default."
  },
  "VTooltip/interactive": {
    "type": "boolean\n",
    "description": "When true, the tooltip will respond to pointer events, allowing you to copy text from it."
  },
  "VTreeview/search": {
    "type": "string\n",
    "description": "The search model for filtering results."
  },
  "VTreeview/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTreeview/activated": {
    "type": "any\n",
    "description": "Array of ids of activated nodes."
  },
  "VTreeview/disabled": {
    "type": "boolean\n",
    "description": "Disables selection for all nodes."
  },
  "VTreeview/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VTreeview/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VTreeview/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTreeview/items": {
    "type": "unknown[]\n",
    "description": "An array of items used to build the treeview."
  },
  "VTreeview/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VTreeview/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VTreeview/slim": {
    "type": "boolean\n",
    "description": "Reduces horizontal spacing for badges, icons, tooltips, and avatars within slim list items to create a more compact visual representation."
  },
  "VTreeview/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VTreeview/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VTreeview/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VTreeview/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VTreeview/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VTreeview/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VTreeview/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VTreeview/rounded": {
    "type": "string | number | boolean\n",
    "description": "Provides an alternative active style for `v-treeview` node. Only visible when `activatable` is `true` and should not be used in conjunction with the `shaped` prop."
  },
  "VTreeview/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VTreeview/color": {
    "type": "string\n",
    "description": "Applies specified color to the active node - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTreeview/variant": {
    "type": "'flat' | 'text' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VTreeview/filter-mode": {
    "type": "'every' | 'some' | 'union' | 'intersection'\n",
    "description": "Controls how the results of `customFilter` and `customKeyFilter` are combined. All modes only apply `customFilter` to columns not specified in `customKeyFilter`.\n\n- **some**: There is at least one match from either the custom filter or the custom key filter.\n- **every**: All columns match either the custom filter or the custom key filter.\n- **union**: There is at least one match from the custom filter, or all columns match the custom key filters.\n- **intersection**: There is at least one match from the custom filter, and all columns match the custom key filters."
  },
  "VTreeview/no-filter": {
    "type": "boolean\n",
    "description": "Disables all item filtering."
  },
  "VTreeview/custom-filter": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/filter.tsx#L22-L22\" target=\"_blank\">FilterFunction</a>\n",
    "description": "Function used to filter items, called for each filterable key on each item in the list. The first argument is the filterable value from the item, the second is the search term, and the third is the internal item object. The function should return true if the item should be included in the filtered list, or the index of the match in the value if it should be included with the result highlighted."
  },
  "VTreeview/custom-key-filter": {
    "type": "unknown\n",
    "description": "Function used on specific keys within the item object. `customFilter` is skipped for columns with `customKeyFilter` specified."
  },
  "VTreeview/filter-keys": {
    "type": "string | string[]\n",
    "description": "Array of specific keys to filter on the item."
  },
  "VTreeview/active-class": {
    "type": "string\n",
    "description": "The class applied to the component when it is in an active state."
  },
  "VTreeview/bg-color": {
    "type": "string\n",
    "description": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTreeview/expand-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used to indicate that a node can be expanded."
  },
  "VTreeview/collapse-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when the list item is expanded."
  },
  "VTreeview/lines": {
    "type": "false | 'one' | 'two' | 'three'\n",
    "description": "Designates a **minimum-height** for all children `v-list-item` components. This prop uses [line-clamp](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp) and is not supported in all browsers."
  },
  "VTreeview/activatable": {
    "type": "boolean\n",
    "description": "Allows user to mark a node as active by clicking on it."
  },
  "VTreeview/selectable": {
    "type": "boolean\n",
    "description": "Will render a checkbox next to each node allowing them to be selected. Additionally, the **[openOnClick](/api/v-treeview/#props-open-on-click)** property will be applied internally."
  },
  "VTreeview/opened": {
    "type": "any\n",
    "description": "An array containing the values of currently opened groups. Can be two-way bound with `v-model:opened`."
  },
  "VTreeview/selected": {
    "type": "any\n",
    "description": "An array containing the values of currently selected items. Can be two-way bound with `v-model:selected`."
  },
  "VTreeview/mandatory": {
    "type": "boolean\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VTreeview/active-strategy": {
    "type": "  | 'single-leaf'\n  | 'leaf'\n  | 'independent'\n  | 'single-independent'\n  | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/nested/activeStrategies.ts#L27-L31\" target=\"_blank\">ActiveStrategy</a>\n  | ((mandatory: boolean) => <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/nested/activeStrategies.ts#L27-L31\" target=\"_blank\">ActiveStrategy</a>)\n",
    "description": "Affects how items with children behave when activated.\n- **leaf:** Only leaf nodes (items without children) can be activated.\n- **independent:** All nodes can be activated whether they have children or not.\n- **classic:** Activating a parent node will cause all children to be activated."
  },
  "VTreeview/select-strategy": {
    "type": "  | 'single-leaf'\n  | 'leaf'\n  | 'independent'\n  | 'single-independent'\n  | 'classic'\n  | 'trunk'\n  | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/nested/selectStrategies.ts#L26-L30\" target=\"_blank\">SelectStrategy</a>\n  | ((mandatory: boolean) => <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/nested/selectStrategies.ts#L26-L30\" target=\"_blank\">SelectStrategy</a>)\n",
    "description": "Affects how items with children behave when selected.\n- **leaf:** Only leaf nodes (items without children) can be selected.\n- **independent:** All nodes can be selected whether they have children or not.\n- **classic:** Selecting a parent node will cause all children to be selected, parent nodes will be displayed as selected if all their descendants are selected. Only leaf nodes will be added to the model.\n- **trunk**: Same as classic but if all of a node's children are selected then only that node will be added to the model."
  },
  "VTreeview/item-title": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "Property on supplied `items` that contains its title."
  },
  "VTreeview/item-value": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "Property on supplied `items` that contains its value."
  },
  "VTreeview/item-children": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "Property on supplied `items` that contains its children."
  },
  "VTreeview/item-props": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "Props object that will be applied to each item component. `true` will treat the original object as raw props and pass it directly to the component."
  },
  "VTreeview/return-object": {
    "type": "boolean\n",
    "description": "When `true` will make `v-model`, `active.sync` and `open.sync` return the complete object instead of just the key."
  },
  "VTreeview/value-comparator": {
    "type": "(a: any, b: any) => boolean\n",
    "description": "Apply a custom comparison algorithm to compare **model-value** and values contains in the **items** prop."
  },
  "VTreeview/model-value": {
    "type": "unknown[]\n",
    "description": "Allows one to control which nodes are selected. The array contains the values of currently selected items. It is equivalent to the `v-model:selected`"
  },
  "VTreeview/open-on-click": {
    "type": "boolean\n",
    "description": "When `true` will cause nodes to be opened by clicking anywhere on it, instead of only opening by clicking on expand icon. When using this prop with `activatable` you will be unable to mark nodes with children as active."
  },
  "VTreeview/fluid": {
    "type": "boolean\n",
    "description": "Removes indentation from nested items."
  },
  "VTreeview/false-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when inactive."
  },
  "VTreeview/true-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "The icon used when active."
  },
  "VTreeview/open-all": {
    "type": "boolean\n",
    "description": "When `true` will cause all branch nodes to be opened when component is mounted."
  },
  "VTreeview/loading-icon": {
    "type": "string\n",
    "description": "Icon used when node is in a loading state."
  },
  "VTreeview/indeterminate-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used when node is in an indeterminate state. Only visible when `selectable` is `true`."
  },
  "VTreeview/selected-color": {
    "type": "string\n",
    "description": "The color of the selection checkbox."
  },
  "VTreeview/load-children": {
    "type": "(item: unknown) => Promise<void>\n",
    "description": "A function used when dynamically loading children. If this prop is set, then the supplied function will be run if expanding an item that has a `item-children` property that is an empty array. Supports returning a Promise."
  },
  "VTreeviewGroup/title": {
    "type": "string\n",
    "description": "Specify a title text for the component."
  },
  "VTreeviewGroup/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTreeviewGroup/color": {
    "type": "string\n",
    "description": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)."
  },
  "VTreeviewGroup/value": {
    "type": "any\n",
    "description": "Expands / Collapse the list-group."
  },
  "VTreeviewGroup/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VTreeviewGroup/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VTreeviewGroup/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Prepends an icon to the component, uses the same syntax as `v-icon`."
  },
  "VTreeviewGroup/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VTreeviewGroup/expand-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when the list item is collapsed."
  },
  "VTreeviewGroup/collapse-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon to display when the list item is expanded."
  },
  "VTreeviewGroup/fluid": {
    "type": "boolean\n",
    "description": "Removes indentation from nested items."
  },
  "VTreeviewItem/replace": {
    "type": "boolean\n",
    "description": "Setting **replace** prop will call `router.replace()` instead of `router.push()` when clicked, so the navigation will not leave a history record. You can find more information about the [replace](https://router.vuejs.org/api/#replace) prop on the vue-router documentation."
  },
  "VTreeviewItem/link": {
    "type": "boolean\n",
    "description": "Designates that the component is a link. This is automatic when using the href or to prop."
  },
  "VTreeviewItem/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VTreeviewItem/nav": {
    "type": "boolean\n",
    "description": "Reduces the width of v-list-item takes and adds a border radius."
  },
  "VTreeviewItem/title": {
    "type": "string | number | boolean\n",
    "description": "Generates a `v-list-item-title` component with the supplied value. Note that this overrides the native [`title`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title) attribute, that must be set with `v-bind:title.attr` instead."
  },
  "VTreeviewItem/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VTreeviewItem/height": {
    "type": "string | number\n",
    "description": "Sets the height for the component."
  },
  "VTreeviewItem/value": {
    "type": "any\n",
    "description": "The value used for selection. Obtained from [`v-list`](/api/v-list)'s `v-model:selected` when the item is selected."
  },
  "VTreeviewItem/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VTreeviewItem/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VTreeviewItem/active": {
    "type": "boolean\n",
    "description": "Controls the **active** state of the item. This is typically used to highlight the component."
  },
  "VTreeviewItem/active-color": {
    "type": "string\n",
    "description": "The applied color when the component is in an active state."
  },
  "VTreeviewItem/base-color": {
    "type": "string\n",
    "description": "Sets the color of component when not focused."
  },
  "VTreeviewItem/prepend-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content."
  },
  "VTreeviewItem/append-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot."
  },
  "VTreeviewItem/slim": {
    "type": "boolean\n",
    "description": "Reduces the vertical padding or height of the v-treeview-item, making it more compact."
  },
  "VTreeviewItem/ripple": {
    "type": "boolean | { class: string }\n",
    "description": "Applies the [v-ripple](/directives/ripple) directive."
  },
  "VTreeviewItem/border": {
    "type": "string | number | boolean\n",
    "description": "Applies utility border classes to the component. To use it, you need to omit the `border-` prefix, (for example use `border-sm` as `border=\"sm\"`).  Find a list of the built-in border classes on the [borders page](/styles/borders)."
  },
  "VTreeviewItem/density": {
    "type": "'default' | 'comfortable' | 'compact'\n",
    "description": "Adjusts the vertical height used by the component."
  },
  "VTreeviewItem/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VTreeviewItem/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VTreeviewItem/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VTreeviewItem/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VTreeviewItem/elevation": {
    "type": "string | number\n",
    "description": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/styles/elevation)."
  },
  "VTreeviewItem/loading": {
    "type": "boolean\n",
    "description": "Places the v-treeview-item into a loading state."
  },
  "VTreeviewItem/rounded": {
    "type": "string | number | boolean\n",
    "description": "Designates the **border-radius** applied to the component. This can be **0**, **xs**, **sm**, true, **lg**, **xl**, **pill**, **circle**, and **shaped**. Find more information on available border radius classes on the [Border Radius page](/styles/border-radius)."
  },
  "VTreeviewItem/tile": {
    "type": "boolean\n",
    "description": "Removes any applied **border-radius** from the component."
  },
  "VTreeviewItem/href": {
    "type": "string\n",
    "description": "Designates the component as anchor and applies the **href** attribute."
  },
  "VTreeviewItem/exact": {
    "type": "boolean\n",
    "description": "Exactly match the link. Without this, '/' will match every route. You can find more information about the [**exact** prop](https://router.vuejs.org/api/#exact) on the vue-router documentation."
  },
  "VTreeviewItem/to": {
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric\n",
    "description": "Denotes the target route of the link. You can find more information about the [**to** prop](https://router.vuejs.org/api/#to) on the vue-router documentation."
  },
  "VTreeviewItem/color": {
    "type": "string\n",
    "description": "Applies specified color to the control when in an **active** state or **input-value** is **true** - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors),"
  },
  "VTreeviewItem/variant": {
    "type": "'flat' | 'text' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n",
    "description": "Applies a distinct style to the component."
  },
  "VTreeviewItem/subtitle": {
    "type": "string | number | boolean\n",
    "description": "Specify a subtitle text for the component."
  },
  "VTreeviewItem/active-class": {
    "type": "string\n",
    "description": "The class applied to the component when it matches the current route. Find more information about the [active-class prop](https://router.vuejs.org/api/#active-class) on the [vue-router](https://router.vuejs.org/) documentation."
  },
  "VTreeviewItem/lines": {
    "type": "false | 'one' | 'two' | 'three'\n",
    "description": "The line declaration specifies the minimum height of the item and can also be controlled from v-list with the same prop."
  },
  "VTreeviewItem/append-avatar": {
    "type": "string\n",
    "description": "Appends a [v-avatar](/components/avatars/) component after default content in the **append** slot."
  },
  "VTreeviewItem/prepend-avatar": {
    "type": "string\n",
    "description": "Prepends a [v-avatar](/components/avatars/) component in the **prepend** slot before default content."
  },
  "VTreeviewItem/toggle-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Allows customization of the icon used to toggle the expansion and collapse of treeview branches."
  },
  "VValidation/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VValidation/error": {
    "type": "boolean\n",
    "description": "Puts the input in a manual error state."
  },
  "VValidation/name": {
    "type": "string\n",
    "description": "Sets the component's name attribute."
  },
  "VValidation/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VValidation/label": {
    "type": "string\n",
    "description": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component."
  },
  "VValidation/readonly": {
    "type": "boolean\n",
    "description": "Puts input in readonly state."
  },
  "VValidation/error-messages": {
    "type": "string | string[]\n",
    "description": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation."
  },
  "VValidation/max-errors": {
    "type": "string | number\n",
    "description": "Control the maximum number of shown errors from validation."
  },
  "VValidation/rules": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/validation.ts#L17-L21\" target=\"_blank\">ValidationRule</a>[]\n",
    "description": "Accepts a mixed array of types `function`, `boolean` and `string`. Functions pass an input value as an argument and must return either `true` / `false` or a `string` containing an error message. The input field will enter an error state if a function returns (or any value in the array contains) `false` or is a `string`."
  },
  "VValidation/validate-on": {
    "type": "  | 'eager'\n  | 'lazy'\n  | 'blur'\n  | 'input'\n  | 'submit'\n  | 'invalid-input'\n  | 'blur lazy'\n  | 'input lazy'\n  | 'submit lazy'\n  | 'invalid-input lazy'\n  | 'blur eager'\n  | 'input eager'\n  | 'submit eager'\n  | 'invalid-input eager'\n  | 'lazy blur'\n  | 'lazy input'\n  | 'lazy submit'\n  | 'lazy invalid-input'\n  | 'eager blur'\n  | 'eager input'\n  | 'eager submit'\n  | 'eager invalid-input'\n",
    "description": "Change what type of event triggers validation to run."
  },
  "VValidation/validation-value": {
    "type": "any\n",
    "description": "The value used when applying validation rules."
  },
  "VValidation/focused": {
    "type": "boolean\n",
    "description": "Forces a focused state styling on the component."
  },
  "VVirtualScroll/height": {
    "type": "string | number\n",
    "description": "Height of the component as a css value/"
  },
  "VVirtualScroll/max-height": {
    "type": "string | number\n",
    "description": "Sets the maximum height for the component."
  },
  "VVirtualScroll/max-width": {
    "type": "string | number\n",
    "description": "Sets the maximum width for the component."
  },
  "VVirtualScroll/min-height": {
    "type": "string | number\n",
    "description": "Sets the minimum height for the component."
  },
  "VVirtualScroll/min-width": {
    "type": "string | number\n",
    "description": "Sets the minimum width for the component."
  },
  "VVirtualScroll/width": {
    "type": "string | number\n",
    "description": "Sets the width for the component."
  },
  "VVirtualScroll/items": {
    "type": "unknown[]\n",
    "description": "The array of items to display."
  },
  "VVirtualScroll/renderless": {
    "type": "boolean\n",
    "description": "Disables default component rendering functionality. The parent node must be [a positioned element](https://developer.mozilla.org/en-US/docs/Web/CSS/position#types_of_positioning), e.g. using `position: relative;`"
  },
  "VVirtualScroll/item-height": {
    "type": "string | number\n",
    "description": "Height in pixels of each item to display."
  },
  "VVirtualScroll/item-key": {
    "type": "<a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts#L82-L86\" target=\"_blank\">SelectItemKey</a>\n",
    "description": "Should point to a property with a unique value for each item, if not set then item index will be used as a key which may result in unnecessary re-renders."
  },
  "VWindow/tag": {
    "type": "string | (new () => any) | FunctionalComponent\n",
    "description": "Specify a custom tag used on the root element."
  },
  "VWindow/reverse": {
    "type": "boolean\n",
    "description": "Reverse the normal transition direction."
  },
  "VWindow/disabled": {
    "type": "boolean\n",
    "description": "Removes the ability to click or target the component."
  },
  "VWindow/theme": {
    "type": "string\n",
    "description": "Specify a theme for this component and all of its children."
  },
  "VWindow/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VWindow/mandatory": {
    "type": "boolean | 'force'\n",
    "description": "Forces at least one item to always be selected (if available)."
  },
  "VWindow/model-value": {
    "type": "unknown\n",
    "description": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array."
  },
  "VWindow/direction": {
    "type": "'horizontal' | 'vertical'\n",
    "description": "The transition direction when changing windows."
  },
  "VWindow/prev-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for the \"prev\" button if `show-arrows` is `true`."
  },
  "VWindow/next-icon": {
    "type": "  | string\n  | (string | [string, number])[]\n  | (new () => any)\n  | FunctionalComponent\n",
    "description": "Icon used for the \"next\" button if `show-arrows` is `true`."
  },
  "VWindow/show-arrows": {
    "type": "string | boolean\n",
    "description": "Display the \"next\" and \"prev\" buttons."
  },
  "VWindow/continuous": {
    "type": "boolean\n",
    "description": "If `true`, window will \"wrap around\" from the last item to the first, and from the first item to the last."
  },
  "VWindow/touch": {
    "type": "boolean | <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/directives/touch/index.ts#L9-L17\" target=\"_blank\">TouchHandlers</a>\n",
    "description": "Provide a custom **left** and **right** function when swiped left or right."
  },
  "VWindowItem/disabled": {
    "type": "boolean\n",
    "description": "Prevents the item from becoming active when using the \"next\" and \"prev\" buttons or the `toggle` method."
  },
  "VWindowItem/value": {
    "type": "any\n",
    "description": "The value used when the component is selected in a group. If not provided, a unique ID will be used."
  },
  "VWindowItem/transition": {
    "type": "string | boolean\n",
    "description": "The transition used when the component progressing through items. Can be one of the [built in](/styles/transitions/) or custom transition."
  },
  "VWindowItem/selected-class": {
    "type": "string\n",
    "description": "Configure the active CSS class applied when an item is selected."
  },
  "VWindowItem/eager": {
    "type": "boolean\n",
    "description": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO."
  },
  "VWindowItem/reverse-transition": {
    "type": "string | boolean\n",
    "description": "Sets the reverse transition."
  }
}